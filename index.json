[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/api/ApplicationsAPI.js",
    "content": "import axios from \"axios\";\n\n/**\n * REST API Resource for interacting with ARI Stasis Applications.\n */\nexport default class ApplicationsAPI {\n  /**\n   * Create an instance of the Applications API client, providing access\n   * to the `/applications` endpoint.\n   *\n   * @param {object} params\n   * @param {string} params.username The username to send with the request.\n   * @param {string} params.password The password to send with the request.\n   * @param {string} params.baseUrl The base url, without trailing slash,\n   *  of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'.\n   */\n  constructor(params = {}) {\n    const { username, password } = params;\n\n    /** @private */\n    this._baseUrl = params.baseUrl;\n\n    /** @private */\n    this._request = axios.create({\n      auth: { username, password },\n    });\n  }\n\n  /**\n   * GET /applications\n   *\n   * List all ARI applications registered in Asterisk.\n   *\n   * @returns {Promise.<Array.<Application>>} Resolves with all applications\n   *  registered in Asterisk.\n   */\n  list() {\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/applications`,\n    });\n  }\n\n  /**\n   * GET /applications/{applicationName}\n   *\n   * Retrieve a single ARI application's details.\n   *\n   * @param {object} params\n   * @param {string} params.applicationName The name of the application to\n   *  retrieve.\n   * @returns {Promise.<Application>} Resolves to the application details\n   *  matching the provided application name. Rejects if the application\n   *  does not exist (404 status).\n   */\n  get(params = {}) {\n    const { applicationName } = params;\n    const app = encodeURIComponent(applicationName);\n\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/applications/${app}`,\n    });\n  }\n\n  /**\n   * POST /applications/{applicationName}/subscription\n   *\n   * *Subscribing to all endpoints for a specific endpoint technology,\n   * i.e. `eventSource: 'endpoint:PJSIP'`, was introduced in Asterisk 12.5*\n   *\n   * *Subscribing to all resources in an event source, i.e.\n   * `eventSource: 'channels:'`, was introduced in Asterisk 13.6*\n   *\n   * @param {object} params\n   * @param {string} params.applicationName The name of the application to\n   *  register 1 or more subscriptions with.\n   * @param {string|Array.<string>} params.eventSource The uri for the event\n   *  source[s] to subscribe to. For channels, it is the `channelId`. For\n   *  bridges, it is the `bridgeId`. For endpoints, it is the technology\n   *  combined with the resource with a slash, i.e. 'PJSIP/6001'. For\n   *  deviceState, it is the `deviceName`.\n   * @returns {Promise.<Application>} Resolves to the application details\n   *  matching the provided application name. Rejects if the application\n   *  does not exist (404 status) or one of the provided eventSources does\n   *  not exist (422 status).\n   */\n  subscribe(params = {}) {\n    const { eventSource, applicationName } = params;\n    const app = encodeURIComponent(applicationName);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/applications/${app}/subscription`,\n      params: { eventSource: [].concat(eventSource).join(\",\") },\n    });\n  }\n\n  /**\n   * DELETE /applications/{applicationName}/subscription\n   *\n   * @param {object} params\n   * @param {string} params.applicationName The name of the application to\n   *  remove 1 or more subscriptions from.\n   * @param {string|Array.<string>} params.eventSource The uri for the event\n   *  source[s] to unsubscribe from. For channels, it is the `channelId`. For\n   *  bridges, it is the `bridgeId`. For endpoints, it is the technology\n   *  combined with the resource with a slash, i.e. 'PJSIP/6001'. For\n   *  deviceState, it is the `deviceName`.\n   * @returns {Promise.<Application>} Resolves to the application details\n   *  matching the provided application name. Rejects if the application\n   *  does not exist (404 status), the application is not currently\n   *  subscribed to one of the provided eventSources (409), or one of the\n   *  provided eventSources does not exist (422 status).\n   */\n  unsubscribe(params = {}) {\n    const { eventSource, applicationName } = params;\n    const app = encodeURIComponent(applicationName);\n\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/applications/${app}/subscription`,\n      params: { eventSource: [].concat(eventSource).join(\",\") },\n    });\n  }\n\n  /**\n   * PUT /applications/{applicationName}/eventFilter\n   *\n   * Filter application events types.\n   *\n   * @param {object} params\n   * @param {string} params.applicationName The name of the application to\n   *  filter events on.\n   * @param {FilterOptions} [params.filter={}] Specify which event types to\n   *  allow and/or disallow. If not provided, this method will remove all\n   *  \"allowed\" and \"disallowed\" filters. See {@link FilterOptions} for more details.\n   * @returns {Promise.<Application>} Resolves to the application details\n   *  matching the provided application name. Rejects if the application\n   *  does not exist (404 status) or the request body is incorrect (400 status).\n   */\n  filterEvents(params) {\n    const { filter = {}, applicationName } = params;\n\n    const app = encodeURIComponent(applicationName);\n\n    return this._request({\n      method: \"PUT\",\n      url: `${this._baseUrl}/applications/${app}/eventFilter`,\n      data: { filter },\n    });\n  }\n}\n\n/**\n * The Application model returned by Asterisk.\n *\n * See {@link ApplicationsAPI}\n *\n * @typedef {object} Application\n * @property {Array.<string>} bridge_ids The ids of bridges that this application is subscribed to.\n * @property {Array.<string>} channel_ids The ids of channels that this application is subscribed to.\n * @property {Array.<string>} device_names The names of devices that this application is subscribed to.\n * @property {Array.<string>} endpoint_ids The endpoints that this application is subscribed to, in the format `{tech}/{resource}` i.e. 'PJSIP/6001'.\n * @property {string} name The name of this application.\n */\n\n/**\n * The object to specify which application events to allow or disallow.\n * An empty \"allowed\" list means all events are allowed. An empty \"disallowed\"\n * list means no events are disallowed. Disallowed events take precedence over\n * allowed events if the event type is specified in both lists. If both list\n * types are given then both are set to their respective values\n * (note, specifying an empty array for a given type sets that type to empty).\n * If only one list type is given then only that type is set. The other type is\n * not updated. If neither is specified, both the allowed and disallowed filters\n * are set empty.\n *\n * See {@link ApplicationsAPI#filterEvents}.\n *\n * @typedef {object} FilterOptions\n * @property {Array.<FilterValue>} [allowed] The events you want to allow.\n * @property {Array.<FilterValue>} [disallowed] The events you want to disallow.\n */\n\n/**\n * The object to specify a filter.\n *\n * For example, `{ type: 'StasisStart' }`\n *\n * See {@link ApplicationsAPI#filterEvents}.\n *\n * @typedef {object} FilterValue\n * @property {string} type The event type that needs filtering.\n */\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/src/api/ApplicationsAPI.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "ApplicationsAPI",
    "memberof": "src/api/ApplicationsAPI.js",
    "static": true,
    "longname": "src/api/ApplicationsAPI.js~ApplicationsAPI",
    "access": "public",
    "export": true,
    "importPath": "awry/src/api/ApplicationsAPI.js",
    "importStyle": "ApplicationsAPI",
    "description": "REST API Resource for interacting with ARI Stasis Applications.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "typedef",
    "name": "Application",
    "memberof": "src/api/ApplicationsAPI.js",
    "static": true,
    "longname": "src/api/ApplicationsAPI.js~Application",
    "access": "public",
    "description": "The Application model returned by Asterisk.\n\nSee {@link ApplicationsAPI}",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "bridge_ids",
        "description": "The ids of bridges that this application is subscribed to."
      },
      {
        "nullable": null,
        "types": [
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "channel_ids",
        "description": "The ids of channels that this application is subscribed to."
      },
      {
        "nullable": null,
        "types": [
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "device_names",
        "description": "The names of devices that this application is subscribed to."
      },
      {
        "nullable": null,
        "types": [
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "endpoint_ids",
        "description": "The endpoints that this application is subscribed to, in the format `{tech}/{resource}` i.e. 'PJSIP/6001'."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of this application."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "Application"
    }
  },
  {
    "__docId__": 51,
    "kind": "typedef",
    "name": "FilterOptions",
    "memberof": "src/api/ApplicationsAPI.js",
    "static": true,
    "longname": "src/api/ApplicationsAPI.js~FilterOptions",
    "access": "public",
    "description": "The object to specify which application events to allow or disallow.\nAn empty \"allowed\" list means all events are allowed. An empty \"disallowed\"\nlist means no events are disallowed. Disallowed events take precedence over\nallowed events if the event type is specified in both lists. If both list\ntypes are given then both are set to their respective values\n(note, specifying an empty array for a given type sets that type to empty).\nIf only one list type is given then only that type is set. The other type is\nnot updated. If neither is specified, both the allowed and disallowed filters\nare set empty.\n\nSee {@link ApplicationsAPI#filterEvents}.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array.<FilterValue>"
        ],
        "spread": false,
        "optional": true,
        "name": "allowed",
        "description": "The events you want to allow."
      },
      {
        "nullable": null,
        "types": [
          "Array.<FilterValue>"
        ],
        "spread": false,
        "optional": true,
        "name": "disallowed",
        "description": "The events you want to disallow."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "FilterOptions"
    }
  },
  {
    "__docId__": 52,
    "kind": "typedef",
    "name": "FilterValue",
    "memberof": "src/api/ApplicationsAPI.js",
    "static": true,
    "longname": "src/api/ApplicationsAPI.js~FilterValue",
    "access": "public",
    "description": "The object to specify a filter.\n\nFor example, `{ type: 'StasisStart' }`\n\nSee {@link ApplicationsAPI#filterEvents}.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The event type that needs filtering."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "FilterValue"
    }
  },
  {
    "__docId__": 53,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/api/ApplicationsAPI.js~ApplicationsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ApplicationsAPI.js~ApplicationsAPI#constructor",
    "access": "public",
    "description": "Create an instance of the Applications API client, providing access\nto the `/applications` endpoint.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.username",
        "description": "The username to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.password",
        "description": "The password to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.baseUrl",
        "description": "The base url, without trailing slash,\n of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'."
      }
    ]
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "_baseUrl",
    "memberof": "src/api/ApplicationsAPI.js~ApplicationsAPI",
    "static": false,
    "longname": "src/api/ApplicationsAPI.js~ApplicationsAPI#_baseUrl",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "_request",
    "memberof": "src/api/ApplicationsAPI.js~ApplicationsAPI",
    "static": false,
    "longname": "src/api/ApplicationsAPI.js~ApplicationsAPI#_request",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "list",
    "memberof": "src/api/ApplicationsAPI.js~ApplicationsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ApplicationsAPI.js~ApplicationsAPI#list",
    "access": "public",
    "description": "GET /applications\n\nList all ARI applications registered in Asterisk.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Array.<Application>>} Resolves with all applications\n registered in Asterisk."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Array.<Application>>"
      ],
      "spread": false,
      "description": "Resolves with all applications\n registered in Asterisk."
    },
    "params": []
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "get",
    "memberof": "src/api/ApplicationsAPI.js~ApplicationsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ApplicationsAPI.js~ApplicationsAPI#get",
    "access": "public",
    "description": "GET /applications/{applicationName}\n\nRetrieve a single ARI application's details.",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Application>} Resolves to the application details\n matching the provided application name. Rejects if the application\n does not exist (404 status)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.applicationName",
        "description": "The name of the application to\n retrieve."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Application>"
      ],
      "spread": false,
      "description": "Resolves to the application details\n matching the provided application name. Rejects if the application\n does not exist (404 status)."
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "subscribe",
    "memberof": "src/api/ApplicationsAPI.js~ApplicationsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ApplicationsAPI.js~ApplicationsAPI#subscribe",
    "access": "public",
    "description": "POST /applications/{applicationName}/subscription\n\n*Subscribing to all endpoints for a specific endpoint technology,\ni.e. `eventSource: 'endpoint:PJSIP'`, was introduced in Asterisk 12.5*\n\n*Subscribing to all resources in an event source, i.e.\n`eventSource: 'channels:'`, was introduced in Asterisk 13.6*",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Application>} Resolves to the application details\n matching the provided application name. Rejects if the application\n does not exist (404 status) or one of the provided eventSources does\n not exist (422 status)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.applicationName",
        "description": "The name of the application to\n register 1 or more subscriptions with."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "params.eventSource",
        "description": "The uri for the event\n source[s] to subscribe to. For channels, it is the `channelId`. For\n bridges, it is the `bridgeId`. For endpoints, it is the technology\n combined with the resource with a slash, i.e. 'PJSIP/6001'. For\n deviceState, it is the `deviceName`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Application>"
      ],
      "spread": false,
      "description": "Resolves to the application details\n matching the provided application name. Rejects if the application\n does not exist (404 status) or one of the provided eventSources does\n not exist (422 status)."
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "unsubscribe",
    "memberof": "src/api/ApplicationsAPI.js~ApplicationsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ApplicationsAPI.js~ApplicationsAPI#unsubscribe",
    "access": "public",
    "description": "DELETE /applications/{applicationName}/subscription",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Application>} Resolves to the application details\n matching the provided application name. Rejects if the application\n does not exist (404 status), the application is not currently\n subscribed to one of the provided eventSources (409), or one of the\n provided eventSources does not exist (422 status)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.applicationName",
        "description": "The name of the application to\n remove 1 or more subscriptions from."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "params.eventSource",
        "description": "The uri for the event\n source[s] to unsubscribe from. For channels, it is the `channelId`. For\n bridges, it is the `bridgeId`. For endpoints, it is the technology\n combined with the resource with a slash, i.e. 'PJSIP/6001'. For\n deviceState, it is the `deviceName`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Application>"
      ],
      "spread": false,
      "description": "Resolves to the application details\n matching the provided application name. Rejects if the application\n does not exist (404 status), the application is not currently\n subscribed to one of the provided eventSources (409), or one of the\n provided eventSources does not exist (422 status)."
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "filterEvents",
    "memberof": "src/api/ApplicationsAPI.js~ApplicationsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ApplicationsAPI.js~ApplicationsAPI#filterEvents",
    "access": "public",
    "description": "PUT /applications/{applicationName}/eventFilter\n\nFilter application events types.",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Application>} Resolves to the application details\n matching the provided application name. Rejects if the application\n does not exist (404 status) or the request body is incorrect (400 status)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.applicationName",
        "description": "The name of the application to\n filter events on."
      },
      {
        "nullable": null,
        "types": [
          "FilterOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params.filter",
        "description": "Specify which event types to\n allow and/or disallow. If not provided, this method will remove all\n \"allowed\" and \"disallowed\" filters. See {@link FilterOptions} for more details."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Application>"
      ],
      "spread": false,
      "description": "Resolves to the application details\n matching the provided application name. Rejects if the application\n does not exist (404 status) or the request body is incorrect (400 status)."
    }
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "src/api/AsteriskAPI.js",
    "content": "import axios from \"axios\";\n\n/**\n * REST API Resource for interacting with Asterisk variables, modules,\n * logging, and configuration.\n */\nexport default class AsteriskAPI {\n  /**\n   * Create an instance of the Asterisk API client, providing access to the\n   * `/asterisk` endpoint.\n   *\n   * @param {object} params\n   * @param {string} params.username The username to send with the request.\n   * @param {string} params.password The password to send with the request.\n   * @param {string} params.baseUrl The base url, without trailing slash,\n   *  of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'.\n   */\n  constructor(params = {}) {\n    const { username, password } = params;\n\n    /** @private */\n    this._baseUrl = params.baseUrl;\n\n    /** @private */\n    this._request = axios.create({\n      auth: { username, password },\n    });\n  }\n\n  /**\n   * GET /asterisk/config/dynamic/{configClass}/{objectType}/{id}\n   *\n   * Retrieve a dynamic configuration object.\n   *\n   * *API available since Asterisk 13.5*\n   *\n   * @param {object} params\n   * @param {string} params.configClass The configuration class containing\n   *  dynamic configuration objects.\n   * @param {string} params.objectType The type of configuration object to\n   *  retrieve.\n   * @param {string} params.id The unique identifier of the object to retrieve.\n   * @returns {Promise.<Array.<ConfigTuple>>} Resolves with an array of key/value\n   *  pairs. Rejects if the `configClass`, `objectType`, or `id` do not exist\n   *  (404 status)\n   */\n  getObject(params = {}) {\n    const configClass = encodeURIComponent(params.configClass);\n    const objectType = encodeURIComponent(params.objectType);\n    const id = encodeURIComponent(params.id);\n\n    // prettier-ignore\n    return this._request({\n      method: 'GET',\n      url: `${this._baseUrl}/asterisk/config/dynamic/${configClass}/${objectType}/${id}`\n    });\n  }\n\n  /**\n   * PUT /asterisk/config/dynamic/{configClass}/{objectType}/{id}\n   *\n   * Create or update a dynamic configuration object.\n   *\n   * *API available since Asterisk 13.5*\n   *\n   * @param {object} params\n   * @param {string} params.configClass The configuration class containing\n   *  dynamic configuration objects.\n   * @param {string} params.objectType The type of configuration object to\n   *  update.\n   * @param {string} params.id The unique identifier of the object to update.\n   * @param {Array.<ConfigTuple>} params.fields The config key/value pairs\n   *  to update.\n   * @returns {Promise.<Array.<ConfigTuple>>} Resolves with an array of key/value\n   *  pairs. Rejects if the `configClass`, `objectType`, or `id` do not exist\n   *  (404 status), or if the `fields` param is malformed (400 status). Could\n   *  potentially also reject due to a permissions issue creating or updating\n   *  the specified object (403 status).\n   */\n  updateObject(params = {}) {\n    const { fields } = params;\n    const configClass = encodeURIComponent(params.configClass);\n    const objectType = encodeURIComponent(params.objectType);\n    const id = encodeURIComponent(params.id);\n\n    // prettier-ignore\n    return this._request({\n      method: 'PUT',\n      url: `${this._baseUrl}/asterisk/config/dynamic/${configClass}/${objectType}/${id}`,\n      data: { fields }\n    });\n  }\n\n  /**\n   * DELETE /asterisk/config/dynamic/{configClass}/{objectType}/{id}\n   *\n   * Delete a dynamic configuration object\n   *\n   * *API available since Asterisk 13.5*\n   *\n   * @param {object} params\n   * @param {string} params.configClass The configuration class containing\n   *  dynamic configuration objects.\n   * @param {string} params.objectType The type of configuration object to\n   *  delete.\n   * @param {string} params.id The unique identifier of the object to delete.\n   * @returns {Promise} Resolves if the specified dynamic configuration\n   *  object was successfully deleted. Rejects if the `configClass`,\n   *  `objectType`, or `id` do not exist (404 status), or if a permissions\n   *  issue prevented the deletion (403 status).\n   */\n  deleteObject(params = {}) {\n    const configClass = encodeURIComponent(params.configClass);\n    const objectType = encodeURIComponent(params.objectType);\n    const id = encodeURIComponent(params.id);\n\n    // prettier-ignore\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/asterisk/config/dynamic/${configClass}/${objectType}/${id}`\n    });\n  }\n\n  /**\n   * GET /asterisk/info\n   *\n   * Gets Asterisk system information.\n   *\n   * @param {object} params\n   * @param {string|Array.<string>} [params.only] Optionally limit the data\n   *  returned. Valid values are 'build', 'system', 'config', or 'status'.\n   *  Multiples may be specified as an array.\n   * @returns {Promise.<AsteriskInfo>} Resolves with the requested Asterisk\n   *  system information.\n   */\n  getInfo(params = {}) {\n    const { only } = params;\n\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/asterisk/info`,\n      params: { only: [].concat(only).join(\",\") },\n    });\n  }\n\n  /**\n   * GET /asterisk/modules\n   *\n   * List all loaded Asterisk modules.\n   *\n   * *API available since Asterisk 13.5*\n   *\n   * @returns {Promise.<Array.<Module>>} Resolves with an array of module\n   *  details.\n   */\n  listModules() {\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/asterisk/modules`,\n    });\n  }\n\n  /**\n   * GET /asterisk/modules/{moduleName}\n   *\n   * Retrieve details about a specific Asterisk module.\n   *\n   * *API available since Asterisk 13.5*\n   *\n   * @param {object} params\n   * @param {string} params.moduleName Case-sensitive module name.\n   * @returns {Promise.<Module>} Resolves with the module details. Rejects if\n   *  the module could not be found in the loaded modules (status 404) or\n   *  the module information could not be retrieved for some reason (status 409).\n   */\n  getModule(params = {}) {\n    const { moduleName } = params;\n    const name = encodeURIComponent(moduleName);\n\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/asterisk/modules/${name}`,\n    });\n  }\n\n  /**\n   * POST /asterisk/modules/{moduleName}\n   *\n   * Load an Asterisk module.\n   *\n   * *API available since Asterisk 13.5*\n   *\n   * @param {object} params\n   * @param {string} params.moduleName Case-sensitive module name.\n   * @returns {Promise} Resolves if the module was successfully loaded.\n   *  Rejects if the module could not be loaded for some reason (status 409).\n   */\n  loadModule(params = {}) {\n    const { moduleName } = params;\n    const name = encodeURIComponent(moduleName);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/asterisk/modules/${name}`,\n    });\n  }\n\n  /**\n   * DELETE /asterisk/modules/{moduleName}\n   *\n   * Unload an Asterisk module.\n   *\n   * *API available since Asterisk 13.5*\n   *\n   * @param {object} params\n   * @param {string} params.moduleName Case-sensitive module name.\n   * @returns {Promise} Resolves if the module was successfully loaded.\n   *  Rejects if the module could not be found in the loaded modules (status 404)\n   *  or the module information could not be unloaded for some reason (status 409).\n   */\n  unloadModule(params = {}) {\n    const { moduleName } = params;\n    const name = encodeURIComponent(moduleName);\n\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/asterisk/modules/${name}`,\n    });\n  }\n\n  /**\n   * PUT /asterisk/modules/{moduleName}\n   *\n   * Reload an Asterisk module.\n   *\n   * *API available since Asterisk 13.5*\n   *\n   * @param {object} params\n   * @param {string} params.moduleName Case-sensitive module name.\n   * @returns {Promise} Resolves if the module was successfully reloaded.\n   *  Rejects if the module could not be found in the loaded modules (status 404)\n   *  or the module information could not be reloaded for some reason (status 409).\n   */\n  reloadModule(params = {}) {\n    const { moduleName } = params;\n    const name = encodeURIComponent(moduleName);\n\n    return this._request({\n      method: \"PUT\",\n      url: `${this._baseUrl}/asterisk/modules/${name}`,\n    });\n  }\n\n  /**\n   * GET /asterisk/logging\n   *\n   * Retrieve Asterisk log channel information.\n   *\n   * *API available since Asterisk 13.6*\n   *\n   * @returns {Promise.<Array.<LogChannel>>} Resolves with the list of all\n   *  log channel details in Asterisk.\n   */\n  listLogChannels() {\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/asterisk/logging`,\n    });\n  }\n\n  /**\n   * POST /asterisk/logging/{logChannelName}\n   *\n   * Add a log channel.\n   *\n   * *API available since Asterisk 13.6*\n   *\n   * @param {object} params\n   * @param {string} params.logChannelName The log channel to add.\n   * @param {string} params.configuration The levels of the log channel.\n   * @returns {Promise} Resolves if the log channel was successfully added.\n   *  Rejects if the configuration data is malformed (status 400) or if the\n   *  log channel could not be added for some reason {status 409)\n   */\n  addLog(params = {}) {\n    const { logChannelName, configuration } = params;\n    const name = encodeURIComponent(logChannelName);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/asterisk/logging/${name}`,\n      params: { configuration },\n    });\n  }\n\n  /**\n   * DELETE /asterisk/logging/{logChannelName}\n   *\n   * Remove a log channel.\n   *\n   * *API available since Asterisk 13.6*\n   *\n   * @param {object} params\n   * @param {string} params.logChannelName The log channel to remove.\n   * @returns {Promise} Resolves if the log channel was successfully removed.\n   *  Rejects if the log channel could not be found (status 404).\n   */\n  deleteLog(params = {}) {\n    const { logChannelName } = params;\n    const name = encodeURIComponent(logChannelName);\n\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/asterisk/logging/${name}`,\n    });\n  }\n\n  /**\n   * PUT /asterisk/logging/{logChannelName}/rotate\n   *\n   * Rotate a log channel.\n   *\n   * *API available since Asterisk 13.6*\n   *\n   * @param {object} params\n   * @param {string} params.logChannelName The log channel to rotate.\n   * @returns {Promise} Resolves if the log channel was successfully rotated.\n   *  Rejects if the log channel could not be found (status 404).\n   */\n  rotateLog(params = {}) {\n    const { logChannelName } = params;\n    const name = encodeURIComponent(logChannelName);\n\n    return this._request({\n      method: \"PUT\",\n      url: `${this._baseUrl}/asterisk/logging/${name}/rotate`,\n    });\n  }\n\n  /**\n   * GET /asterisk/variable\n   *\n   * Retrieve the value of a global variable.\n   *\n   * @param {object} params\n   * @param {string} params.variable The name of the variable to retrieve\n   *  the value of.\n   * @returns {Promise.<Variable>} Resolves with an object containing the value\n   *  of the specified variable. Rejects if the variable name is not properly\n   *  specified (status 400).\n   */\n  getGlobalVariable(params = {}) {\n    const { variable } = params;\n\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/asterisk/variable`,\n      params: { variable },\n    });\n  }\n\n  /**\n   * POST /asterisk/variable\n   *\n   * Set the value of a global variable.\n   *\n   * @param {object} params\n   * @param {string} params.variable The name of the variable to set the value\n   *  for.\n   * @param {string} params.value The value to set to the specified variable.\n   * @returns {Promise} Resolves when the variable has successfully been set.\n   *  Rejects if the variable name is not properly set (status 400).\n   */\n  setGlobalVariable(params = {}) {\n    const { variable, value } = params;\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/asterisk/variable`,\n      params: { variable, value },\n    });\n  }\n}\n\n/**\n * @typedef {object} ConfigTuple\n * @property {string} attribute A configuration object attribute\n * @property {string} value The value for the attribute\n */\n\n/**\n * @typedef {object} BuildInfo\n * @property {string} date The date and time that Asterisk was built.\n * @property {string} kernel The kernel version Asterisk was built on.\n * @property {string} machine The machine architecture (x86_64, i686, ppc, etc.).\n * @property {string} options The compile time options, or an empty string if default.\n * @property {string} os The Operating System that Asterisk was built on.\n * @property {string} user The username that built Asterisk.\n */\n\n/**\n * @typedef {object} ConfigInfo\n * @property {string} default_language The default language for media playback.\n * @property {number} [max_channels] The maximum number of simultaneous channels.\n * @property {number} [max_load] The maximum load average on the system.\n * @property {number} [max_open_files] The maximum number of open file handles (files, sockets).\n * @property {string} name The Asterisk system name.\n * @property {object} setid The effective user/group id running Asterisk.\n * @property {string} setid.user The effective user id.\n * @property {string} setid.group The effective group id.\n */\n\n/**\n * @typedef {object} StatusInfo\n * @property {Date} last_reload_time The last time that Asterisk was reloaded.\n * @property {Date} startup_time The time that Asterisk was started.\n */\n\n/**\n * @typedef {object} SystemInfo\n * @property {string} entity_id\n * @property {string} version The Asterisk version.\n */\n\n/**\n * @typedef {object} AsteriskInfo\n * @property {BuildInfo} [build] Information about how Asterisk was built.\n * @property {ConfigInfo} [config] Information about how Asterisk is configured.\n * @property {StatusInfo} [status] Information about the current Asterisk status.\n * @property {SystemInfo} [system] Information about the system running Asterisk.\n */\n\n/**\n * @typedef {object} Module\n * @property {string} description The description of this module.\n * @property {string} name The name of this module.\n * @property {string} status The running status of this module.\n * @property {string} support_level The support state of this module.\n * @property {number} use_count The number of times this module is being used.\n */\n\n/**\n * @typedef {object} LogChannel\n * @property {string} channel The log channel path.\n * @property {string} configuration The various log levels.\n * @property {string} status Whether or not the log channel is enabled.\n * @property {string} type The types of logs for the log channel.\n */\n\n/**\n * @typedef {object} Variable\n * @property {string} value The value of the variable.\n */\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/src/api/AsteriskAPI.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "class",
    "name": "AsteriskAPI",
    "memberof": "src/api/AsteriskAPI.js",
    "static": true,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI",
    "access": "public",
    "export": true,
    "importPath": "awry/src/api/AsteriskAPI.js",
    "importStyle": "AsteriskAPI",
    "description": "REST API Resource for interacting with Asterisk variables, modules,\nlogging, and configuration.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 63,
    "kind": "typedef",
    "name": "ConfigTuple",
    "memberof": "src/api/AsteriskAPI.js",
    "static": true,
    "longname": "src/api/AsteriskAPI.js~ConfigTuple",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "attribute",
        "description": "A configuration object attribute"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value for the attribute"
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "ConfigTuple"
    }
  },
  {
    "__docId__": 64,
    "kind": "typedef",
    "name": "BuildInfo",
    "memberof": "src/api/AsteriskAPI.js",
    "static": true,
    "longname": "src/api/AsteriskAPI.js~BuildInfo",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "The date and time that Asterisk was built."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "kernel",
        "description": "The kernel version Asterisk was built on."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "machine",
        "description": "The machine architecture (x86_64, i686, ppc, etc.)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The compile time options, or an empty string if default."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "os",
        "description": "The Operating System that Asterisk was built on."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The username that built Asterisk."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "BuildInfo"
    }
  },
  {
    "__docId__": 65,
    "kind": "typedef",
    "name": "ConfigInfo",
    "memberof": "src/api/AsteriskAPI.js",
    "static": true,
    "longname": "src/api/AsteriskAPI.js~ConfigInfo",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "default_language",
        "description": "The default language for media playback."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "max_channels",
        "description": "The maximum number of simultaneous channels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "max_load",
        "description": "The maximum load average on the system."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "max_open_files",
        "description": "The maximum number of open file handles (files, sockets)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The Asterisk system name."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "setid",
        "description": "The effective user/group id running Asterisk."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "setid.user",
        "description": "The effective user id."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "setid.group",
        "description": "The effective group id."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "ConfigInfo"
    }
  },
  {
    "__docId__": 66,
    "kind": "typedef",
    "name": "StatusInfo",
    "memberof": "src/api/AsteriskAPI.js",
    "static": true,
    "longname": "src/api/AsteriskAPI.js~StatusInfo",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "last_reload_time",
        "description": "The last time that Asterisk was reloaded."
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "startup_time",
        "description": "The time that Asterisk was started."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "StatusInfo"
    }
  },
  {
    "__docId__": 67,
    "kind": "typedef",
    "name": "SystemInfo",
    "memberof": "src/api/AsteriskAPI.js",
    "static": true,
    "longname": "src/api/AsteriskAPI.js~SystemInfo",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "entity_id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "version",
        "description": "The Asterisk version."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "SystemInfo"
    }
  },
  {
    "__docId__": 68,
    "kind": "typedef",
    "name": "AsteriskInfo",
    "memberof": "src/api/AsteriskAPI.js",
    "static": true,
    "longname": "src/api/AsteriskAPI.js~AsteriskInfo",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "BuildInfo"
        ],
        "spread": false,
        "optional": true,
        "name": "build",
        "description": "Information about how Asterisk was built."
      },
      {
        "nullable": null,
        "types": [
          "ConfigInfo"
        ],
        "spread": false,
        "optional": true,
        "name": "config",
        "description": "Information about how Asterisk is configured."
      },
      {
        "nullable": null,
        "types": [
          "StatusInfo"
        ],
        "spread": false,
        "optional": true,
        "name": "status",
        "description": "Information about the current Asterisk status."
      },
      {
        "nullable": null,
        "types": [
          "SystemInfo"
        ],
        "spread": false,
        "optional": true,
        "name": "system",
        "description": "Information about the system running Asterisk."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "AsteriskInfo"
    }
  },
  {
    "__docId__": 69,
    "kind": "typedef",
    "name": "Module",
    "memberof": "src/api/AsteriskAPI.js",
    "static": true,
    "longname": "src/api/AsteriskAPI.js~Module",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "The description of this module."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of this module."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "The running status of this module."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "support_level",
        "description": "The support state of this module."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "use_count",
        "description": "The number of times this module is being used."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "Module"
    }
  },
  {
    "__docId__": 70,
    "kind": "typedef",
    "name": "LogChannel",
    "memberof": "src/api/AsteriskAPI.js",
    "static": true,
    "longname": "src/api/AsteriskAPI.js~LogChannel",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "channel",
        "description": "The log channel path."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "configuration",
        "description": "The various log levels."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "Whether or not the log channel is enabled."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The types of logs for the log channel."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "LogChannel"
    }
  },
  {
    "__docId__": 71,
    "kind": "typedef",
    "name": "Variable",
    "memberof": "src/api/AsteriskAPI.js",
    "static": true,
    "longname": "src/api/AsteriskAPI.js~Variable",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value of the variable."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "Variable"
    }
  },
  {
    "__docId__": 72,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/api/AsteriskAPI.js~AsteriskAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI#constructor",
    "access": "public",
    "description": "Create an instance of the Asterisk API client, providing access to the\n`/asterisk` endpoint.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.username",
        "description": "The username to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.password",
        "description": "The password to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.baseUrl",
        "description": "The base url, without trailing slash,\n of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'."
      }
    ]
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "_baseUrl",
    "memberof": "src/api/AsteriskAPI.js~AsteriskAPI",
    "static": false,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI#_baseUrl",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "_request",
    "memberof": "src/api/AsteriskAPI.js~AsteriskAPI",
    "static": false,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI#_request",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "getObject",
    "memberof": "src/api/AsteriskAPI.js~AsteriskAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI#getObject",
    "access": "public",
    "description": "GET /asterisk/config/dynamic/{configClass}/{objectType}/{id}\n\nRetrieve a dynamic configuration object.\n\n*API available since Asterisk 13.5*",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Array.<ConfigTuple>>} Resolves with an array of key/value\n pairs. Rejects if the `configClass`, `objectType`, or `id` do not exist\n (404 status)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.configClass",
        "description": "The configuration class containing\n dynamic configuration objects."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.objectType",
        "description": "The type of configuration object to\n retrieve."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.id",
        "description": "The unique identifier of the object to retrieve."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Array.<ConfigTuple>>"
      ],
      "spread": false,
      "description": "Resolves with an array of key/value\n pairs. Rejects if the `configClass`, `objectType`, or `id` do not exist\n (404 status)"
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "updateObject",
    "memberof": "src/api/AsteriskAPI.js~AsteriskAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI#updateObject",
    "access": "public",
    "description": "PUT /asterisk/config/dynamic/{configClass}/{objectType}/{id}\n\nCreate or update a dynamic configuration object.\n\n*API available since Asterisk 13.5*",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Array.<ConfigTuple>>} Resolves with an array of key/value\n pairs. Rejects if the `configClass`, `objectType`, or `id` do not exist\n (404 status), or if the `fields` param is malformed (400 status). Could\n potentially also reject due to a permissions issue creating or updating\n the specified object (403 status)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.configClass",
        "description": "The configuration class containing\n dynamic configuration objects."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.objectType",
        "description": "The type of configuration object to\n update."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.id",
        "description": "The unique identifier of the object to update."
      },
      {
        "nullable": null,
        "types": [
          "Array.<ConfigTuple>"
        ],
        "spread": false,
        "optional": false,
        "name": "params.fields",
        "description": "The config key/value pairs\n to update."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Array.<ConfigTuple>>"
      ],
      "spread": false,
      "description": "Resolves with an array of key/value\n pairs. Rejects if the `configClass`, `objectType`, or `id` do not exist\n (404 status), or if the `fields` param is malformed (400 status). Could\n potentially also reject due to a permissions issue creating or updating\n the specified object (403 status)."
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "deleteObject",
    "memberof": "src/api/AsteriskAPI.js~AsteriskAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI#deleteObject",
    "access": "public",
    "description": "DELETE /asterisk/config/dynamic/{configClass}/{objectType}/{id}\n\nDelete a dynamic configuration object\n\n*API available since Asterisk 13.5*",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves if the specified dynamic configuration\n object was successfully deleted. Rejects if the `configClass`,\n `objectType`, or `id` do not exist (404 status), or if a permissions\n issue prevented the deletion (403 status)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.configClass",
        "description": "The configuration class containing\n dynamic configuration objects."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.objectType",
        "description": "The type of configuration object to\n delete."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.id",
        "description": "The unique identifier of the object to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the specified dynamic configuration\n object was successfully deleted. Rejects if the `configClass`,\n `objectType`, or `id` do not exist (404 status), or if a permissions\n issue prevented the deletion (403 status)."
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "getInfo",
    "memberof": "src/api/AsteriskAPI.js~AsteriskAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI#getInfo",
    "access": "public",
    "description": "GET /asterisk/info\n\nGets Asterisk system information.",
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<AsteriskInfo>} Resolves with the requested Asterisk\n system information."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array.<string>"
        ],
        "spread": false,
        "optional": true,
        "name": "params.only",
        "description": "Optionally limit the data\n returned. Valid values are 'build', 'system', 'config', or 'status'.\n Multiples may be specified as an array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<AsteriskInfo>"
      ],
      "spread": false,
      "description": "Resolves with the requested Asterisk\n system information."
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "listModules",
    "memberof": "src/api/AsteriskAPI.js~AsteriskAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI#listModules",
    "access": "public",
    "description": "GET /asterisk/modules\n\nList all loaded Asterisk modules.\n\n*API available since Asterisk 13.5*",
    "lineNumber": 156,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Array.<Module>>} Resolves with an array of module\n details."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Array.<Module>>"
      ],
      "spread": false,
      "description": "Resolves with an array of module\n details."
    },
    "params": []
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "getModule",
    "memberof": "src/api/AsteriskAPI.js~AsteriskAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI#getModule",
    "access": "public",
    "description": "GET /asterisk/modules/{moduleName}\n\nRetrieve details about a specific Asterisk module.\n\n*API available since Asterisk 13.5*",
    "lineNumber": 176,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Module>} Resolves with the module details. Rejects if\n the module could not be found in the loaded modules (status 404) or\n the module information could not be retrieved for some reason (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.moduleName",
        "description": "Case-sensitive module name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Module>"
      ],
      "spread": false,
      "description": "Resolves with the module details. Rejects if\n the module could not be found in the loaded modules (status 404) or\n the module information could not be retrieved for some reason (status 409)."
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "loadModule",
    "memberof": "src/api/AsteriskAPI.js~AsteriskAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI#loadModule",
    "access": "public",
    "description": "POST /asterisk/modules/{moduleName}\n\nLoad an Asterisk module.\n\n*API available since Asterisk 13.5*",
    "lineNumber": 198,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves if the module was successfully loaded.\n Rejects if the module could not be loaded for some reason (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.moduleName",
        "description": "Case-sensitive module name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the module was successfully loaded.\n Rejects if the module could not be loaded for some reason (status 409)."
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "unloadModule",
    "memberof": "src/api/AsteriskAPI.js~AsteriskAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI#unloadModule",
    "access": "public",
    "description": "DELETE /asterisk/modules/{moduleName}\n\nUnload an Asterisk module.\n\n*API available since Asterisk 13.5*",
    "lineNumber": 221,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves if the module was successfully loaded.\n Rejects if the module could not be found in the loaded modules (status 404)\n or the module information could not be unloaded for some reason (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.moduleName",
        "description": "Case-sensitive module name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the module was successfully loaded.\n Rejects if the module could not be found in the loaded modules (status 404)\n or the module information could not be unloaded for some reason (status 409)."
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "reloadModule",
    "memberof": "src/api/AsteriskAPI.js~AsteriskAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI#reloadModule",
    "access": "public",
    "description": "PUT /asterisk/modules/{moduleName}\n\nReload an Asterisk module.\n\n*API available since Asterisk 13.5*",
    "lineNumber": 244,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves if the module was successfully reloaded.\n Rejects if the module could not be found in the loaded modules (status 404)\n or the module information could not be reloaded for some reason (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.moduleName",
        "description": "Case-sensitive module name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the module was successfully reloaded.\n Rejects if the module could not be found in the loaded modules (status 404)\n or the module information could not be reloaded for some reason (status 409)."
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "listLogChannels",
    "memberof": "src/api/AsteriskAPI.js~AsteriskAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI#listLogChannels",
    "access": "public",
    "description": "GET /asterisk/logging\n\nRetrieve Asterisk log channel information.\n\n*API available since Asterisk 13.6*",
    "lineNumber": 264,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Array.<LogChannel>>} Resolves with the list of all\n log channel details in Asterisk."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Array.<LogChannel>>"
      ],
      "spread": false,
      "description": "Resolves with the list of all\n log channel details in Asterisk."
    },
    "params": []
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "addLog",
    "memberof": "src/api/AsteriskAPI.js~AsteriskAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI#addLog",
    "access": "public",
    "description": "POST /asterisk/logging/{logChannelName}\n\nAdd a log channel.\n\n*API available since Asterisk 13.6*",
    "lineNumber": 285,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves if the log channel was successfully added.\n Rejects if the configuration data is malformed (status 400) or if the\n log channel could not be added for some reason {status 409)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.logChannelName",
        "description": "The log channel to add."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.configuration",
        "description": "The levels of the log channel."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the log channel was successfully added.\n Rejects if the configuration data is malformed (status 400) or if the\n log channel could not be added for some reason {status 409)"
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "deleteLog",
    "memberof": "src/api/AsteriskAPI.js~AsteriskAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI#deleteLog",
    "access": "public",
    "description": "DELETE /asterisk/logging/{logChannelName}\n\nRemove a log channel.\n\n*API available since Asterisk 13.6*",
    "lineNumber": 308,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves if the log channel was successfully removed.\n Rejects if the log channel could not be found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.logChannelName",
        "description": "The log channel to remove."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the log channel was successfully removed.\n Rejects if the log channel could not be found (status 404)."
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "rotateLog",
    "memberof": "src/api/AsteriskAPI.js~AsteriskAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI#rotateLog",
    "access": "public",
    "description": "PUT /asterisk/logging/{logChannelName}/rotate\n\nRotate a log channel.\n\n*API available since Asterisk 13.6*",
    "lineNumber": 330,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves if the log channel was successfully rotated.\n Rejects if the log channel could not be found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.logChannelName",
        "description": "The log channel to rotate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the log channel was successfully rotated.\n Rejects if the log channel could not be found (status 404)."
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "getGlobalVariable",
    "memberof": "src/api/AsteriskAPI.js~AsteriskAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI#getGlobalVariable",
    "access": "public",
    "description": "GET /asterisk/variable\n\nRetrieve the value of a global variable.",
    "lineNumber": 352,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Variable>} Resolves with an object containing the value\n of the specified variable. Rejects if the variable name is not properly\n specified (status 400)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.variable",
        "description": "The name of the variable to retrieve\n the value of."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Variable>"
      ],
      "spread": false,
      "description": "Resolves with an object containing the value\n of the specified variable. Rejects if the variable name is not properly\n specified (status 400)."
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "setGlobalVariable",
    "memberof": "src/api/AsteriskAPI.js~AsteriskAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/AsteriskAPI.js~AsteriskAPI#setGlobalVariable",
    "access": "public",
    "description": "POST /asterisk/variable\n\nSet the value of a global variable.",
    "lineNumber": 374,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the variable has successfully been set.\n Rejects if the variable name is not properly set (status 400)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.variable",
        "description": "The name of the variable to set the value\n for."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.value",
        "description": "The value to set to the specified variable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the variable has successfully been set.\n Rejects if the variable name is not properly set (status 400)."
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/api/BridgesAPI.js",
    "content": "import axios from \"axios\";\n\n/**\n * REST API Resource for interacting with Asterisk Bridges and the channels\n * within those bridges.\n */\nexport default class BridgesAPI {\n  /**\n   * Create an instance of the Bridges API client, providing access to the\n   * `/bridges` endpoint.\n   *\n   * @param {object} params\n   * @param {string} params.username The username to send with the request.\n   * @param {string} params.password The password to send with the request.\n   * @param {string} params.baseUrl The base url, without trailing slash,\n   *  of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'.\n   */\n  constructor(params = {}) {\n    const { username, password } = params;\n\n    /** @private */\n    this._baseUrl = params.baseUrl;\n\n    /** @private */\n    this._request = axios.create({\n      auth: { username, password },\n    });\n  }\n\n  /**\n   * GET /bridges\n   *\n   * List all active bridges in Asterisk.\n   *\n   * @returns {Promise.<Array.<Bridge>>} Resolves with all existing bridges\n   *  in Asterisk.\n   */\n  list() {\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/bridges`,\n    });\n  }\n\n  /**\n   * POST /bridges\n   *\n   * Create a new bridge. This bridge persists until it has been shut down,\n   * or Asterisk has been shut down.\n   *\n   * @param {object} params\n   * @param {string|Array.<string>} [params.type] The attributes to set on the\n   *  bridge that determine how the bridge mixes media between its\n   *  participants. Possible attributes are 'mixing', 'holding', 'dtmf_events',\n   *  and 'proxy_media'. 'dtmf_events' and 'proxy_media' are only valid when\n   *  also supplied with 'mixing'. 'holding' and 'mixing' are mutually\n   *  exclusive. *Allows multiple values since Asterisk 12.2*\n   * @param {string} [params.name] A name to give to the bridge being created.\n   * @param {string} [params.bridgeId] The unique identifier for the bridge.\n   *  *Param available since Asterisk 12.2*\n   * @returns {Promise.<Bridge>} Resolves to the newly created bridge.\n   */\n  create(params = {}) {\n    const { type, name, bridgeId } = params;\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/bridges`,\n      params: {\n        name,\n        bridgeId,\n        type: [].concat(type).join(\",\"),\n      },\n    });\n  }\n\n  /**\n   * POST /bridges/{bridgeId}\n   *\n   * Create a new bridge or update an existing one. This bridge persists\n   * until it has been shut down, or Asterisk has been shut down.\n   *\n   * *API available since Asterisk 12.2*\n   *\n   * @param {object} params\n   * @param {string} params.bridgeId The unique identifier for the bridge.\n   * @param {string|Array.<string>} [params.type] The attributes to set on the\n   *  bridge that determine how the bridge mixes media between its\n   *  participants. Possible attributes are 'mixing', 'holding', 'dtmf_events',\n   *  and 'proxy_media'. 'dtmf_events' and 'proxy_media' are only valid when\n   *  also supplied with 'mixing'. 'holding' and 'mixing' are mutually\n   *  exclusive.\n   * @param {string} [params.name] A name to give to the bridge being created.\n   * @returns {Promise.<Bridge>} Resolves to the newly created bridge.\n   */\n  createOrUpdate(params = {}) {\n    const { type, name, bridgeId } = params;\n    const id = encodeURIComponent(bridgeId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/bridges/${id}`,\n      params: {\n        name,\n        type: [].concat(type).join(\",\"),\n      },\n    });\n  }\n\n  /**\n   * GET /bridges/{bridgeId}\n   *\n   * Get details of a specific bridge.\n   *\n   * @param {object} params\n   * @param {string} params.bridgeId The identifier of the bridge to retrieve\n   *  details for.\n   * @returns {Promise.<Bridge>} Resolves to the details matching the specified\n   *  bridgeId. Rejects if the bridge could not be found (status 404).\n   */\n  get(params = {}) {\n    const { bridgeId } = params;\n    const id = encodeURIComponent(bridgeId);\n\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/bridges/${id}`,\n    });\n  }\n\n  /**\n   * DELETE /bridges/{bridgeId}\n   *\n   * Shut down a bridge. If any channels are in this bridge, they will be\n   * removed and resume whatever they were doing beforehand.\n   *\n   * @param {object} params\n   * @param {string} params.bridgeId The identifer of the bridge to delete.\n   * @returns {Promise} Resolves if the bridge is successfully deleted.\n   *  Rejects if the bridge could not be found (status 404).\n   */\n  destroy(params = {}) {\n    const { bridgeId } = params;\n    const id = encodeURIComponent(bridgeId);\n\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/bridges/${id}`,\n    });\n  }\n\n  /**\n   * POST /bridges/{bridgeId}/addChannel\n   *\n   * Add a channel to a bridge.\n   *\n   * @param {object} params\n   * @param {string} params.bridgeId The identifer of the bridge to add the\n   *  channels to.\n   * @param {string|Array.<string>} params.channel The channel or list of\n   *  channels to add to the bridge.\n   * @param {string} [params.role] The channels' role in the bridge.\n   * @return {Promise} Resolves if the channels are successfully added to\n   * the bridge. Rejected if one of the channels is not found (status 400),\n   * the bridge could not be found (status 404), the bridge is not in the\n   * Stasis application (status 409), one of the specified channels is\n   * currently recording (status 409), or one of the channels is not in the\n   * Stasis application (status 422).\n   */\n  addChannel(params = {}) {\n    const { channel, role, bridgeId } = params;\n    const id = encodeURIComponent(bridgeId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/bridges/${id}/addChannel`,\n      params: {\n        channel: [].concat(channel).join(\",\"),\n        role,\n      },\n    });\n  }\n\n  /**\n   * POST /bridges/{bridgeId}/removeChannel\n   *\n   * Remove a channel from a bridge.\n   *\n   * @param {object} params\n   * @param {string} params.bridgeId The identifier of the bridge to remove\n   *  the channels from.\n   * @param {string|Array.<string>} params.channel The channel or list of\n   *  channels to remove from the bridge.\n   * @return {Promise} Resolves if the channels are successfully removed from\n   * the bridge. Rejected if one of the channels is not found (status 400),\n   * the bridge could not be found (status 404), the bridge is not in the\n   * Stasis application (status 409), or one of the channels is not in the\n   * bridge (status 422).\n   */\n  removeChannel(params = {}) {\n    const { channel, bridgeId } = params;\n    const id = encodeURIComponent(bridgeId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/bridges/${id}/removeChannel`,\n      params: { channel: [].concat(channel).join(\",\") },\n    });\n  }\n\n  /**\n   * POST /bridges/{bridgeId}/moh\n   *\n   * Play music on hold to a bridge or change the music on hold class\n   * that is currently playing.\n   *\n   * @param {object} params\n   * @param {string} params.bridgeId The identifier of the bridge to play\n   *  music on hold into.\n   * @param {string} [params.mohClass] The class of music on hold to play.\n   * @returns {Promise} Resolves when the music has successfully started playing\n   *  in the bridge. Rejects if the bridge could not be found (status 404)\n   *  or the bridge is not in the Stasis application (status 409).\n   */\n  startMusicOnHold(params = {}) {\n    const { bridgeId, mohClass } = params;\n    const id = encodeURIComponent(bridgeId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/bridges/${id}/moh`,\n      params: { mohClass },\n    });\n  }\n\n  /**\n   * DELETE /bridges/{bridgeId}/moh\n   *\n   * Stop playing music on hold to a bridge. This will only stop music on hold\n   * that had been previously started via ARI.\n   *\n   * @param {object} params\n   * @param {string} params.bridgeId The identifier of the bridge to stop\n   *  playing music on hold to.\n   * @returns {Promise} Resolves when the music has successfully stopped playing\n   *  in the bridge. Rejects if the bridge could not be found (status 404)\n   *  or the bridge is not in the Stasis application (status 409).\n   */\n  stopMusicOnHold(params = {}) {\n    const { bridgeId } = params;\n    const id = encodeURIComponent(bridgeId);\n\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/bridges/${id}/moh`,\n    });\n  }\n\n  /**\n   * POST /bridges/{bridgeId}/play\n   *\n   * Start playback of media on a bridge. The media URI may be any of a number\n   * of URIs. The currently support URIs are 'sound:', 'recording:', 'number:',\n   * 'digits:', 'characters:', and 'tone:'. This operation creates a playback\n   * resource that can be used to control the playback of media (pause,\n   * rewind, fast-forward, etc.)\n   *\n   * *'tone:' playback uri added in Asterisk 12.3*\n   *\n   * @param {object} params\n   * @param {string} params.bridgeId The identifier of the bridge to play media\n   *  into.\n   * @param {string|Array.<string>} params.media The media's URI to play. *Allows\n   *  multiple media to be passed since Asterisk 14.0*\n   * @param {string} [params.playbackId] The playback identifier to attach to\n   *  the Playback instance. *Param available since Asterisk 12.2*\n   * @param {string} [params.lang] For sounds, the language of the sound to play.\n   * @param {number} [params.offsetms=0] The number of milliseconds to skip from\n   *  the beginning of the media before starting playback. Allowed range: 0+\n   * @param {number} [params.skipms=3000] The number of milliseconds to skip\n   *  for forward/reverse operations. Allowed range: 0+\n   * @returns {Promise.<Playback>} Resolved with the Playback instance when\n   *  the playback is successfully started. Rejects when the bridge is not\n   *  found (status 404) or the bridge is not in the Stasis application\n   *  (status 409).\n   */\n  play(params = {}) {\n    const {\n      bridgeId,\n      media,\n      playbackId,\n      lang,\n      offsetms = 0,\n      skipms = 3000,\n    } = params;\n\n    const id = encodeURIComponent(bridgeId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/bridges/${id}/play`,\n      params: {\n        media: [].concat(media).join(\",\"),\n        lang,\n        offsetms,\n        skipms,\n        playbackId,\n      },\n    });\n  }\n\n  /**\n   * POST /bridges/{bridgeId}/play/{playbackId}\n   *\n   * Start playback of media on a bridge. The media URI may be any of a\n   * number of URIs. The currently support URIs are 'sound:', 'recording:',\n   * 'number:', 'digits:', 'characters:', and 'tone:'. This operation creates\n   * a playback resource that can be used to control the playback of media\n   * (pause, rewind, fast-forward, etc.)\n   *\n   * *API available since Asterisk 12.2*\n   * *'tone:' playback uri added in Asterisk 12.3*\n   *\n   * @param {object} params\n   * @param {string} params.bridgeId The identifier of the bridge to play media\n   *  into.\n   * @param {string|Array.<string>} params.media The media's URI to play.\n   *  *Allows multiple media to be passed since Asterisk 14.0*\n   * @param {string} params.playbackId The playback identifier to attach to\n   *  the Playback instance.\n   * @param {string} [params.lang] For sounds, the language of the sound to play.\n   * @param {number} [params.offsetms=0] The number of milliseconds to skip from\n   *  the beginning of the media before starting playback. Allowed range: 0+\n   * @param {number} [params.skipms=3000] The number of milliseconds to skip\n   *  for forward/reverse operations. Allowed range: 0+\n   * @returns {Promise.<Playback>} Resolved with the Playback instance when\n   *  the playback is successfully started. Rejects when the bridge is not\n   *  found (status 404) or the bridge is not in the Stasis application\n   *  (status 409).\n   */\n  playWithId(params = {}) {\n    const {\n      bridgeId,\n      media,\n      playbackId,\n      lang,\n      offsetms = 0,\n      skipms = 3000,\n    } = params;\n    const id = encodeURIComponent(bridgeId);\n    const playId = encodeURIComponent(playbackId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/bridges/${id}/play/${playId}`,\n      params: {\n        media: [].concat(media).join(\",\"),\n        lang,\n        offsetms,\n        skipms,\n      },\n    });\n  }\n\n  /**\n   * POST /bridges/{bridgeId}/record\n   *\n   * Start a recording. This records the mixed audio from all channels\n   * participating in this bridge.\n   *\n   * @param {object} params\n   * @param {string} params.bridgeId The identifier of the bridge to record.\n   * @param {string} params.name The recordings filename.\n   * @param {string} [params.format=wav] The format to encode the audio in.\n   * @param {number} [params.maxDurationSeconds=0] The maximum duration of\n   *  the recording, in seconds. Pass 0 for no limit. Allowed range: 0+\n   * @param {number} [params.maxSilenceSeconds=0] The maximum duration of\n   *  silence, in seconds. Pass 0 for no limit. Allowed range: 0+\n   * @param {string} [params.ifExists=fail] The action to take if a recording\n   *  with the same name already exists. Allowed values: 'fail', 'overwrite',\n   *  or 'append'.\n   * @param {boolean} [params.beep=true] Play a beep when recording begins.\n   * @param {string} [params.terminateOn=none] DTMF input to terminate\n   *  recording. Allowed values: 'none', 'any', '*', or '#'.\n   * @returns {Promise.<LiveRecording>} Resolves with the created LiveRecording\n   *  instance if the recording is successfully started. Rejects if invalid\n   *  parameters are passed (status 400), the bridge is not found (status 404),\n   *  the bridge is not in the Stasis application (status 409), a recording\n   *  with the same name already exists on the system and cannot be overwritten\n   *  because it is already in progress or the `ifExists` param is set to 'fail'\n   *  (status 409), or the specified format is unknown (status 422).\n   */\n  record(params = {}) {\n    const {\n      bridgeId,\n      name,\n      format = \"wav\",\n      maxDurationSeconds = 0,\n      maxSilentSeconds = 0,\n      ifExists = \"fail\",\n      beep = true,\n      terminateOn = \"none\",\n    } = params;\n    const id = encodeURIComponent(bridgeId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/bridges/${id}/record`,\n      params: {\n        name,\n        format,\n        maxDurationSeconds,\n        maxSilentSeconds,\n        ifExists,\n        beep,\n        terminateOn,\n      },\n    });\n  }\n}\n\n/**\n * The merging of media from one or more channels.\n *\n * @typedef {object} Bridge\n * @property {string} bridge_class The bridging class.\n * @property {string} bridge_type The type of bridge technology.\n * @property {Array.<string>} channels The Ids of channels participating in this bridge.\n * @property {string} id The unique identifier for this bridge.\n * @property {string} technology The name of the current bridging technology.\n * @property {string} name The name the creator gave to this bridge. *Property available since Asterisk 12.1*\n * @property {string} creator The entity that created the bridge. *Property available since Asterisk 12.1*\n */\n\n/**\n * A recording that is in progress.\n *\n * @typedef {object} LiveRecording\n * @property {string} [cause] The cause for the recording failure if it failed.\n * @property {string} format The recording format (wav, gsm, etc.)\n * @property {string} name The base name for the recording.\n * @property {string} state The state the recording is currently in.\n * @property {string} target_uri The uri for the channel or bridge being recorded. *Property available since Asterisk 12.2*\n * @property {number} [duration] The duration in seconds of the recording. *Property available since Asterisk 12.5*\n * @property {number} [talking_duration] The duration of talkin, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds. *Property available since Asterisk 12.5*\n * @property {number} [silence_duration] The duration of silence, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds. *Property available since Asterisk 12.5*\n */\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/src/api/BridgesAPI.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "BridgesAPI",
    "memberof": "src/api/BridgesAPI.js",
    "static": true,
    "longname": "src/api/BridgesAPI.js~BridgesAPI",
    "access": "public",
    "export": true,
    "importPath": "awry/src/api/BridgesAPI.js",
    "importStyle": "BridgesAPI",
    "description": "REST API Resource for interacting with Asterisk Bridges and the channels\nwithin those bridges.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 92,
    "kind": "typedef",
    "name": "Bridge",
    "memberof": "src/api/BridgesAPI.js",
    "static": true,
    "longname": "src/api/BridgesAPI.js~Bridge",
    "access": "public",
    "description": "The merging of media from one or more channels.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bridge_class",
        "description": "The bridging class."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bridge_type",
        "description": "The type of bridge technology."
      },
      {
        "nullable": null,
        "types": [
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "channels",
        "description": "The Ids of channels participating in this bridge."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The unique identifier for this bridge."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "technology",
        "description": "The name of the current bridging technology."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name the creator gave to this bridge. *Property available since Asterisk 12.1*"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "creator",
        "description": "The entity that created the bridge. *Property available since Asterisk 12.1*"
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "Bridge"
    }
  },
  {
    "__docId__": 93,
    "kind": "typedef",
    "name": "LiveRecording",
    "memberof": "src/api/BridgesAPI.js",
    "static": true,
    "longname": "src/api/BridgesAPI.js~LiveRecording",
    "access": "public",
    "description": "A recording that is in progress.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "cause",
        "description": "The cause for the recording failure if it failed."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "The recording format (wav, gsm, etc.)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The base name for the recording."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The state the recording is currently in."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target_uri",
        "description": "The uri for the channel or bridge being recorded. *Property available since Asterisk 12.2*"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "duration",
        "description": "The duration in seconds of the recording. *Property available since Asterisk 12.5*"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "talking_duration",
        "description": "The duration of talkin, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds. *Property available since Asterisk 12.5*"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "silence_duration",
        "description": "The duration of silence, in seconds, detected in the recording. This is only available if the recording was initiated with a non-zero maxSilenceSeconds. *Property available since Asterisk 12.5*"
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "LiveRecording"
    }
  },
  {
    "__docId__": 94,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/api/BridgesAPI.js~BridgesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/BridgesAPI.js~BridgesAPI#constructor",
    "access": "public",
    "description": "Create an instance of the Bridges API client, providing access to the\n`/bridges` endpoint.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.username",
        "description": "The username to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.password",
        "description": "The password to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.baseUrl",
        "description": "The base url, without trailing slash,\n of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'."
      }
    ]
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "_baseUrl",
    "memberof": "src/api/BridgesAPI.js~BridgesAPI",
    "static": false,
    "longname": "src/api/BridgesAPI.js~BridgesAPI#_baseUrl",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "_request",
    "memberof": "src/api/BridgesAPI.js~BridgesAPI",
    "static": false,
    "longname": "src/api/BridgesAPI.js~BridgesAPI#_request",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "list",
    "memberof": "src/api/BridgesAPI.js~BridgesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/BridgesAPI.js~BridgesAPI#list",
    "access": "public",
    "description": "GET /bridges\n\nList all active bridges in Asterisk.",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Array.<Bridge>>} Resolves with all existing bridges\n in Asterisk."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Array.<Bridge>>"
      ],
      "spread": false,
      "description": "Resolves with all existing bridges\n in Asterisk."
    },
    "params": []
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "create",
    "memberof": "src/api/BridgesAPI.js~BridgesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/BridgesAPI.js~BridgesAPI#create",
    "access": "public",
    "description": "POST /bridges\n\nCreate a new bridge. This bridge persists until it has been shut down,\nor Asterisk has been shut down.",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Bridge>} Resolves to the newly created bridge."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array.<string>"
        ],
        "spread": false,
        "optional": true,
        "name": "params.type",
        "description": "The attributes to set on the\n bridge that determine how the bridge mixes media between its\n participants. Possible attributes are 'mixing', 'holding', 'dtmf_events',\n and 'proxy_media'. 'dtmf_events' and 'proxy_media' are only valid when\n also supplied with 'mixing'. 'holding' and 'mixing' are mutually\n exclusive. *Allows multiple values since Asterisk 12.2*"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.name",
        "description": "A name to give to the bridge being created."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.bridgeId",
        "description": "The unique identifier for the bridge.\n *Param available since Asterisk 12.2*"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Bridge>"
      ],
      "spread": false,
      "description": "Resolves to the newly created bridge."
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "createOrUpdate",
    "memberof": "src/api/BridgesAPI.js~BridgesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/BridgesAPI.js~BridgesAPI#createOrUpdate",
    "access": "public",
    "description": "POST /bridges/{bridgeId}\n\nCreate a new bridge or update an existing one. This bridge persists\nuntil it has been shut down, or Asterisk has been shut down.\n\n*API available since Asterisk 12.2*",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Bridge>} Resolves to the newly created bridge."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.bridgeId",
        "description": "The unique identifier for the bridge."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array.<string>"
        ],
        "spread": false,
        "optional": true,
        "name": "params.type",
        "description": "The attributes to set on the\n bridge that determine how the bridge mixes media between its\n participants. Possible attributes are 'mixing', 'holding', 'dtmf_events',\n and 'proxy_media'. 'dtmf_events' and 'proxy_media' are only valid when\n also supplied with 'mixing'. 'holding' and 'mixing' are mutually\n exclusive."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.name",
        "description": "A name to give to the bridge being created."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Bridge>"
      ],
      "spread": false,
      "description": "Resolves to the newly created bridge."
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "get",
    "memberof": "src/api/BridgesAPI.js~BridgesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/BridgesAPI.js~BridgesAPI#get",
    "access": "public",
    "description": "GET /bridges/{bridgeId}\n\nGet details of a specific bridge.",
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Bridge>} Resolves to the details matching the specified\n bridgeId. Rejects if the bridge could not be found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.bridgeId",
        "description": "The identifier of the bridge to retrieve\n details for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Bridge>"
      ],
      "spread": false,
      "description": "Resolves to the details matching the specified\n bridgeId. Rejects if the bridge could not be found (status 404)."
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/api/BridgesAPI.js~BridgesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/BridgesAPI.js~BridgesAPI#destroy",
    "access": "public",
    "description": "DELETE /bridges/{bridgeId}\n\nShut down a bridge. If any channels are in this bridge, they will be\nremoved and resume whatever they were doing beforehand.",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves if the bridge is successfully deleted.\n Rejects if the bridge could not be found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.bridgeId",
        "description": "The identifer of the bridge to delete."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the bridge is successfully deleted.\n Rejects if the bridge could not be found (status 404)."
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "addChannel",
    "memberof": "src/api/BridgesAPI.js~BridgesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/BridgesAPI.js~BridgesAPI#addChannel",
    "access": "public",
    "description": "POST /bridges/{bridgeId}/addChannel\n\nAdd a channel to a bridge.",
    "lineNumber": 170,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.bridgeId",
        "description": "The identifer of the bridge to add the\n channels to."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channel",
        "description": "The channel or list of\n channels to add to the bridge."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.role",
        "description": "The channels' role in the bridge."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the channels are successfully added to\nthe bridge. Rejected if one of the channels is not found (status 400),\nthe bridge could not be found (status 404), the bridge is not in the\nStasis application (status 409), one of the specified channels is\ncurrently recording (status 409), or one of the channels is not in the\nStasis application (status 422)."
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "removeChannel",
    "memberof": "src/api/BridgesAPI.js~BridgesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/BridgesAPI.js~BridgesAPI#removeChannel",
    "access": "public",
    "description": "POST /bridges/{bridgeId}/removeChannel\n\nRemove a channel from a bridge.",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.bridgeId",
        "description": "The identifier of the bridge to remove\n the channels from."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channel",
        "description": "The channel or list of\n channels to remove from the bridge."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the channels are successfully removed from\nthe bridge. Rejected if one of the channels is not found (status 400),\nthe bridge could not be found (status 404), the bridge is not in the\nStasis application (status 409), or one of the channels is not in the\nbridge (status 422)."
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "startMusicOnHold",
    "memberof": "src/api/BridgesAPI.js~BridgesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/BridgesAPI.js~BridgesAPI#startMusicOnHold",
    "access": "public",
    "description": "POST /bridges/{bridgeId}/moh\n\nPlay music on hold to a bridge or change the music on hold class\nthat is currently playing.",
    "lineNumber": 225,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the music has successfully started playing\n in the bridge. Rejects if the bridge could not be found (status 404)\n or the bridge is not in the Stasis application (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.bridgeId",
        "description": "The identifier of the bridge to play\n music on hold into."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.mohClass",
        "description": "The class of music on hold to play."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the music has successfully started playing\n in the bridge. Rejects if the bridge could not be found (status 404)\n or the bridge is not in the Stasis application (status 409)."
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "stopMusicOnHold",
    "memberof": "src/api/BridgesAPI.js~BridgesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/BridgesAPI.js~BridgesAPI#stopMusicOnHold",
    "access": "public",
    "description": "DELETE /bridges/{bridgeId}/moh\n\nStop playing music on hold to a bridge. This will only stop music on hold\nthat had been previously started via ARI.",
    "lineNumber": 249,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the music has successfully stopped playing\n in the bridge. Rejects if the bridge could not be found (status 404)\n or the bridge is not in the Stasis application (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.bridgeId",
        "description": "The identifier of the bridge to stop\n playing music on hold to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the music has successfully stopped playing\n in the bridge. Rejects if the bridge could not be found (status 404)\n or the bridge is not in the Stasis application (status 409)."
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "play",
    "memberof": "src/api/BridgesAPI.js~BridgesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/BridgesAPI.js~BridgesAPI#play",
    "access": "public",
    "description": "POST /bridges/{bridgeId}/play\n\nStart playback of media on a bridge. The media URI may be any of a number\nof URIs. The currently support URIs are 'sound:', 'recording:', 'number:',\n'digits:', 'characters:', and 'tone:'. This operation creates a playback\nresource that can be used to control the playback of media (pause,\nrewind, fast-forward, etc.)\n\n*'tone:' playback uri added in Asterisk 12.3*",
    "lineNumber": 287,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Playback>} Resolved with the Playback instance when\n the playback is successfully started. Rejects when the bridge is not\n found (status 404) or the bridge is not in the Stasis application\n (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.bridgeId",
        "description": "The identifier of the bridge to play media\n into."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "params.media",
        "description": "The media's URI to play. *Allows\n multiple media to be passed since Asterisk 14.0*"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.playbackId",
        "description": "The playback identifier to attach to\n the Playback instance. *Param available since Asterisk 12.2*"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.lang",
        "description": "For sounds, the language of the sound to play."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "params.offsetms",
        "description": "The number of milliseconds to skip from\n the beginning of the media before starting playback. Allowed range: 0+"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "3000",
        "defaultRaw": 3000,
        "name": "params.skipms",
        "description": "The number of milliseconds to skip\n for forward/reverse operations. Allowed range: 0+"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Playback>"
      ],
      "spread": false,
      "description": "Resolved with the Playback instance when\n the playback is successfully started. Rejects when the bridge is not\n found (status 404) or the bridge is not in the Stasis application\n (status 409)."
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "playWithId",
    "memberof": "src/api/BridgesAPI.js~BridgesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/BridgesAPI.js~BridgesAPI#playWithId",
    "access": "public",
    "description": "POST /bridges/{bridgeId}/play/{playbackId}\n\nStart playback of media on a bridge. The media URI may be any of a\nnumber of URIs. The currently support URIs are 'sound:', 'recording:',\n'number:', 'digits:', 'characters:', and 'tone:'. This operation creates\na playback resource that can be used to control the playback of media\n(pause, rewind, fast-forward, etc.)\n\n*API available since Asterisk 12.2*\n*'tone:' playback uri added in Asterisk 12.3*",
    "lineNumber": 341,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Playback>} Resolved with the Playback instance when\n the playback is successfully started. Rejects when the bridge is not\n found (status 404) or the bridge is not in the Stasis application\n (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.bridgeId",
        "description": "The identifier of the bridge to play media\n into."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "params.media",
        "description": "The media's URI to play.\n *Allows multiple media to be passed since Asterisk 14.0*"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.playbackId",
        "description": "The playback identifier to attach to\n the Playback instance."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.lang",
        "description": "For sounds, the language of the sound to play."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "params.offsetms",
        "description": "The number of milliseconds to skip from\n the beginning of the media before starting playback. Allowed range: 0+"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "3000",
        "defaultRaw": 3000,
        "name": "params.skipms",
        "description": "The number of milliseconds to skip\n for forward/reverse operations. Allowed range: 0+"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Playback>"
      ],
      "spread": false,
      "description": "Resolved with the Playback instance when\n the playback is successfully started. Rejects when the bridge is not\n found (status 404) or the bridge is not in the Stasis application\n (status 409)."
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "record",
    "memberof": "src/api/BridgesAPI.js~BridgesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/BridgesAPI.js~BridgesAPI#record",
    "access": "public",
    "description": "POST /bridges/{bridgeId}/record\n\nStart a recording. This records the mixed audio from all channels\nparticipating in this bridge.",
    "lineNumber": 393,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<LiveRecording>} Resolves with the created LiveRecording\n instance if the recording is successfully started. Rejects if invalid\n parameters are passed (status 400), the bridge is not found (status 404),\n the bridge is not in the Stasis application (status 409), a recording\n with the same name already exists on the system and cannot be overwritten\n because it is already in progress or the `ifExists` param is set to 'fail'\n (status 409), or the specified format is unknown (status 422)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.bridgeId",
        "description": "The identifier of the bridge to record."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.name",
        "description": "The recordings filename."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "wav",
        "defaultRaw": "wav",
        "name": "params.format",
        "description": "The format to encode the audio in."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "params.maxDurationSeconds",
        "description": "The maximum duration of\n the recording, in seconds. Pass 0 for no limit. Allowed range: 0+"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "params.maxSilenceSeconds",
        "description": "The maximum duration of\n silence, in seconds. Pass 0 for no limit. Allowed range: 0+"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "fail",
        "defaultRaw": "fail",
        "name": "params.ifExists",
        "description": "The action to take if a recording\n with the same name already exists. Allowed values: 'fail', 'overwrite',\n or 'append'."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.beep",
        "description": "Play a beep when recording begins."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "none",
        "defaultRaw": "none",
        "name": "params.terminateOn",
        "description": "DTMF input to terminate\n recording. Allowed values: 'none', 'any', '*', or '#'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<LiveRecording>"
      ],
      "spread": false,
      "description": "Resolves with the created LiveRecording\n instance if the recording is successfully started. Rejects if invalid\n parameters are passed (status 400), the bridge is not found (status 404),\n the bridge is not in the Stasis application (status 409), a recording\n with the same name already exists on the system and cannot be overwritten\n because it is already in progress or the `ifExists` param is set to 'fail'\n (status 409), or the specified format is unknown (status 422)."
    }
  },
  {
    "__docId__": 109,
    "kind": "file",
    "name": "src/api/ChannelsAPI.js",
    "content": "import axios from \"axios\";\n\n/**\n * REST API Resource for interacting with Asterisk Channels.\n */\nexport default class ChannelsAPI {\n  /**\n   * Create an instance of the Bridges API client, providing access to the\n   * `/channels` endpoint.\n   *\n   * @param {object} params\n   * @param {string} params.username The username to send with the request.\n   * @param {string} params.password The password to send with the request.\n   * @param {string} params.baseUrl The base url, without trailing slash,\n   *  of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'.\n   */\n  constructor(params) {\n    const { username, password } = params;\n\n    /** @private */\n    this._baseUrl = params.baseUrl;\n\n    /** @private */\n    this._request = axios.create({\n      auth: { username, password },\n    });\n  }\n\n  /**\n   * GET /channels\n   *\n   * List all active channels in Asterisk.\n   *\n   * @returns {Promise.<Array.<Channel>>} Resolves with the list of all active\n   *  channels in Asterisk.\n   */\n  list() {\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/channels`,\n    });\n  }\n\n  /**\n   * POST /channels\n   *\n   * Create a new channel (originate). The new channel is created immediately\n   * and a snapshot of it is returned. If a stasis application is provided,\n   * that application will be automatically subscribed to the originated\n   * channel for further events and updates.\n   *\n   * @param {object} params\n   * @param {string} params.endpoint The endpoint to call\n   * @param {string} [params.extension] The extension to dial after the endpoint\n   *  answers. Mutually exclusive with `app`.\n   * @param {string} [params.context] The context to dial after the endpoint\n   *  answers. If omitted, uses 'default'. Mutually exclusive with `app`.\n   * @param {number} [params.priority] The priority to dial after the endpoint\n   *  answers. If omitted, uses 1. Mutually exclusive with `app`.\n   * @param {string} [params.label] The label to dial after the endpoint\n   *  answers. Will supersede `params.priority` if both are provided. Mutually\n   *  exclusive with `app`. *Param available since Asterisk 13.2*\n   * @param {string} [params.app] The application that is subscribed to the\n   *  originated channel. When the channel is answered, it will be passed to\n   *  this stasis application. Mutually exclusive with `context`, `extension`,\n   *  `priority`, and `label`.\n   * @param {string} [params.appArgs] The application arguments to pass to\n   *  the stasis application provided by `app`. Mutually exclusive with\n   *  `context`, `extension`, `priority`, and `label`.\n   * @param {string} [params.callerId] CallerID to use when dialing the\n   *  endpoint or extension.\n   * @param {number} [params.timeout=30] The timeout in seconds before giving\n   *  up dialing, or -1 for no timeout.\n   * @param {string} [params.channelId] The unique id to assign the channel\n   *  on creation. *Param available since Asterisk 12.2*\n   * @param {string} [params.otherChannelId] The unique id to assign the\n   *  second channel when using local channels.\n   * @param {string} [params.originator] The unique id of the channel which\n   *  is originating this one. *Param available since Asterisk 13.2*\n   * @param {string|Array.<string>} [params.formats] The format name\n   *  capability list to use if originator is not specified. For example,\n   *  ['ulaw', 'slin16']. Format names can be found by executing the\n   *  `core show codecs` command in the Asterisk console. *Param available\n   *  since Asterisk 13.10*\n   * @param {object} [params.variables] An object of key/value pairs that\n   *  should be set on the channel on creation. *Param available since\n   *  Asterisk 12.1*\n   * @returns {Promise.<Channel>} Resolves with the newly created channel.\n   *  Rejects when invalid params are passed (status 400).\n   */\n  originate(params) {\n    const {\n      endpoint,\n      extension,\n      context,\n      priority,\n      label,\n      app,\n      appArgs,\n      callerId,\n      timeout = 30,\n      channelId,\n      otherChannelId,\n      originator,\n      formats,\n      variables,\n    } = params;\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels`,\n      params: {\n        endpoint,\n        extension,\n        context,\n        priority,\n        label,\n        app,\n        appArgs,\n        callerId,\n        timeout,\n        channelId,\n        otherChannelId,\n        originator,\n        formats: [].concat(formats).join(\",\"),\n      },\n      data: { variables },\n    });\n  }\n\n  /**\n   * POST /channels/create\n   *\n   * Create a channel and place it into a stasis application. This is similiar\n   * to originate except the created channel is not dialed. This allows for an\n   * application writer to create a channel and perform manipulations to it\n   * prior to performing dial on the channel.\n   *\n   * *API available since Asterisk 14.0*\n   *\n   * @param {object} params\n   * @param {string} params.endpoint The endpoint for channel communication.\n   * @param {string} params.app The stasis application to place the channel into.\n   * @param {string} [params.appArgs] The application arguments to pass to the\n   *  stasis application.\n   * @param {string} [params.channelId] The unique id to assign the channel on\n   *  creation.\n   * @param {string} [params.otherChannelId] The unique id to assign the second\n   *  channel when using local channels.\n   * @param {string} [params.originator] The unique ID of the calling channel.\n   * @param {string|Array.<string>} [params.formats] The format name\n   *  capability list to use if originator is not specified. For example,\n   *  ['ulaw', 'slin16']. Format names can be found by executing the\n   *  `core show codecs` command in the Asterisk console.\n   * @returns {Promise.<Channel>} Resolves with the newly created channel.\n   *  Rejects when invalid params are passed (status 400).\n   */\n  create(params) {\n    const {\n      endpoint,\n      app,\n      appArgs,\n      channelId,\n      otherChannelId,\n      originator,\n      formats,\n    } = params;\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels/create`,\n      params: {\n        endpoint,\n        app,\n        appArgs,\n        channelId,\n        otherChannelId,\n        originator,\n        formats: [].concat(formats).join(\",\"),\n      },\n    });\n  }\n\n  /**\n   * GET /channels/{channelId}\n   *\n   * Retrieve details about the specified channel.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to retrieve.\n   * @returns {Promise.<Channel>} Resolves with the details of the specified\n   *  channel. Rejects when a channel matching the provided channelId cannot\n   *  be found (status 404).\n   */\n  get(params) {\n    const { channelId } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/channels/${id}`,\n    });\n  }\n\n  /**\n   * POST /channels/{channelId}\n   *\n   * Create a new channel (originate with id). The new channel is created\n   * immediately and a snapshot of it is returned. If a stasis application\n   * is provided, that application will be automatically subscribed to the\n   * originated channel for further events and updates.\n   *\n   * *API available since Asterisk 12.2*\n   *\n   * @param {object} params\n   * @param {string} params.channelId The unique id to assign the channel\n   *  on creation.\n   * @param {string} params.endpoint The endpoint to call\n   * @param {string} [params.extension] The extension to dial after the endpoint\n   *  answers. Mutually exclusive with `app`.\n   * @param {string} [params.context] The context to dial after the endpoint\n   *  answers. If omitted, uses 'default'. Mutually exclusive with `app`.\n   * @param {number} [params.priority] The priority to dial after the endpoint\n   *  answers. If omitted, uses 1. Mutually exclusive with `app`.\n   * @param {string} [params.label] The label to dial after the endpoint\n   *  answers. Will supersede `params.priority` if both are provided. Mutually\n   *  exclusive with `app`. *Param available since Asterisk 13.2*\n   * @param {string} [params.app] The application that is subscribed to the\n   *  originated channel. When the channel is answered, it will be passed to\n   *  this stasis application. Mutually exclusive with `context`, `extension`,\n   *  `priority`, and `label`.\n   * @param {string} [params.appArgs] The application arguments to pass to\n   *  the stasis application provided by `app`. Mutually exclusive with\n   *  `context`, `extension`, `priority`, and `label`.\n   * @param {string} [params.callerId] CallerID to use when dialing the\n   *  endpoint or extension.\n   * @param {number} [params.timeout=30] The timeout in seconds before giving\n   *  up dialing, or -1 for no timeout.\n   * @param {string} [params.otherChannelId] The unique id to assign the\n   *  second channel when using local channels.\n   * @param {string} [params.originator] The unique id of the channel which\n   *  is originating this one. *Param available since Asterisk 13.2*\n   * @param {string|Array.<string>} [params.formats] The format name\n   *  capability list to use if originator is not specified. For example,\n   *  ['ulaw', 'slin16']. Format names can be found by executing the\n   *  `core show codecs` command in the Asterisk console. *Param available\n   *  since Asterisk 13.10*\n   * @param {object} [params.variables] An object of key/value pairs that\n   *  should be set on the channel on creation.\n   * @returns {Promise.<Channel>} Resolves with the newly created channel.\n   *  Rejects when invalid params are passed (status 400).\n   */\n  originateWithId(params) {\n    const {\n      channelId,\n      endpoint,\n      extension,\n      context,\n      priority,\n      label,\n      app,\n      appArgs,\n      callerId,\n      timeout = 30,\n      otherChannelId,\n      originator,\n      formats,\n      variables,\n    } = params;\n\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels/${id}`,\n      params: {\n        endpoint,\n        extension,\n        context,\n        priority,\n        label,\n        app,\n        appArgs,\n        callerId,\n        timeout,\n        otherChannelId,\n        originator,\n        formats: [].concat(formats).join(\",\"),\n      },\n      data: { variables },\n    });\n  }\n\n  /**\n   * DELETE /channels/{channelId}\n   *\n   * Delete (i.e. hangup) a channel.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to hangup.\n   * @param {string} [params.reason] The reason for hanging up the channel.\n   *  Allowed values: 'normal', 'busy', 'congestion', or 'no_answer'.\n   * @returns {Promise} Resolves when the hangup is successful. Rejects when\n   *  an invalid reason for hangup is provided (status 400) or the specified\n   *  channel cannot be found (status 404).\n   */\n  hangup(params) {\n    const { channelId, reason } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/channels/${id}`,\n      params: { reason },\n    });\n  }\n\n  /**\n   * POST /channels/{channelId}/continue\n   *\n   * Exit the ARI application; Continue execution in the dialplan.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to continue in\n   *  dialplan.\n   * @param {string} [params.context] The context to continue to.\n   * @param {string} [params.extension] The extension to continue to.\n   * @param {number} [params.priority] The priority to continue to.\n   * @param {string} [params.label] The label to continue to. Will supersede\n   *  `priority` if both are provided. *Param available since Asterisk 13.2*\n   * @returns {Promise} Resolves when the operation is successful. Rejects\n   *  when the specified channel cannot be found (status 404) or the specified\n   *  channel is not in a stasis application (status 409).\n   */\n  continueInDialplan(params) {\n    const { channelId, context, extension, priority, label } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels/${id}/continue`,\n      params: { context, extension, priority, label },\n    });\n  }\n\n  /**\n   * POST /channels/{channelId}/redirect\n   *\n   * Redirect the channel to a different location.\n   *\n   * *API available since Asterisk 13.3*\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to redirect.\n   * @param {string} params.endpoint The endpoint to redirect the channel to.\n   * @returns {Promise} Resolves when the redirect is successful. Rejects when\n   *  the endpoint param is not provided (status 400), the specified channel\n   *  or endpoint is not found (status 404), the specified channel is not in\n   *  a stasis application (status 409), or the specified endpoint is not the\n   *  same type as the channel (status 422).\n   */\n  redirect(params) {\n    const { channelId, endpoint } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels/${id}/redirect`,\n      params: { endpoint },\n    });\n  }\n\n  /**\n   * POST /channels/{channelId}/answer\n   *\n   * Answer the channel.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to answer.\n   * @returns {Promise} Resolves when the channel is successfully answered.\n   *  Rejects when the specified channel cannot be found (status 404) or\n   *  the specified channel is not in a stasis application (status 409).\n   */\n  answer(params) {\n    const { channelId } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels/${id}/answer`,\n    });\n  }\n\n  /**\n   * POST /channels/{channelId}/ring\n   *\n   * Indicate ringing on the channel.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to indicate\n   *  ringing to.\n   * @returns {Promise} Resolves when the ringing has begun. Rejects when the\n   *  specified channel cannot be found (status 404) or the specified channel\n   *  is not in a stasis application (status 409).\n   */\n  ring(params) {\n    const { channelId } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels/${id}/ring`,\n    });\n  }\n\n  /**\n   * DELETE /channels/{channelId}/ring\n   *\n   * Stop ringing indication on the channel if locally generated.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to stop indicating\n   *  ringing to.\n   * @returns {Promise} Resolves when the ringing has successfully stopped.\n   *  Rejects when the specified channel cannot be found (status 404) or the\n   *  specified channel is not in a stasis application (status 409).\n   */\n  ringStop(params) {\n    const { channelId } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/channels/${id}/ring`,\n    });\n  }\n\n  /**\n   * POST /channels/{channelId}/dtmf\n   *\n   * Send the provided DTMF to the channel.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to send DTMF to.\n   * @param {string} params.dtmf The DTMF to send to the channel.\n   * @param {number} [params.before=0] The amount of time to wait before DTMF\n   *  digits are started (specified in milliseconds).\n   * @param {number} [params.between=100] The amount of time in between DTMF\n   *  digits (specified in milliseconds).\n   * @param {number} [params.duration=100] The length of each DTMF digit\n   *  (specified in milliseconds).\n   * @param {number} [params.after=0] The amount of time to wait after the DTMF\n   *  digits end (specified in milliseconds).\n   * @returns {Promise} Resolves when the specified DTMF have been successfully\n   *  played. Rejects when the DTMF is not specified (status 400), the specified\n   *  channel is not found (status 404), or when the specified channel is not\n   *  in a stasis application (status 409).\n   */\n  sendDTMF(params) {\n    const {\n      channelId,\n      dtmf,\n      before = 0,\n      between = 100,\n      duration = 100,\n      after = 0,\n    } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels/${id}/dtmf`,\n      params: { dtmf, before, between, duration, after },\n    });\n  }\n\n  /**\n   * POST /channels/{channelId}/mute\n   *\n   * Mute the channel.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to mute.\n   * @param {string} [params.direction=both] The direction in which to mute\n   *  audio. Valid values: 'both', 'in', or 'out'.\n   * @returns {Promise} Resolves when the channel is successfully muted.\n   *  Rejects when the channel is not found (status 404) or when the channel\n   *  is not in a stasis application (status 409).\n   */\n  mute(params) {\n    const { channelId, direction = \"both\" } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels/${id}/mute`,\n      params: { direction },\n    });\n  }\n\n  /**\n   * DELETE /channels/{channelId}/mute\n   *\n   * Unmute the channel.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to unmute.\n   * @param {string} [params.direction=both] The direction in which to unmute\n   *  audio. Valid values: 'both', 'in', or 'out'.\n   * @returns {Promise} Resolves when the channel is successfully unmuted.\n   *  Rejects when the channel is not found (status 404) or when the channel\n   *  is not in a stasis application (status 409).\n   */\n  unmute(params) {\n    const { channelId, direction = \"both\" } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/channels/${id}/mute`,\n      params: { direction },\n    });\n  }\n\n  /**\n   * POST /channels/{channelId}/hold\n   *\n   * Hold the channel.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to hold.\n   * @returns {Promise} Resolves when the channel is successfully held.\n   *  Rejects when the channel is not found (status 404) or when the channel\n   *  is not in a stasis application (status 409).\n   */\n  hold(params) {\n    const { channelId } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels/${id}/hold`,\n    });\n  }\n\n  /**\n   * DELETE /channels/{channelId}/hold\n   *\n   * Remove the channel from hold.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to unhold.\n   * @returns {Promise} Resolves when the channel is successfully unheld.\n   *  Rejects when the channel is not found (status 404) or when the channel\n   *  is not in a stasis application (status 409).\n   */\n  unhold(params) {\n    const { channelId } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/channels/${id}/hold`,\n    });\n  }\n\n  /**\n   * POST /channels/{channelId}/moh\n   *\n   * Play music on hold to the channel. Using media operations such as /play\n   * on a channel playing music on hold in this manner will suspend music on\n   * hold without resuming automatically. If continuing music on hold is desired,\n   * the stasis application must re-initiate it.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to play music on\n   *  hold to.\n   * @param {string} [params.mohClass] The class of music on hold to play.\n   * @returns {Promise} Resolves when the music has successfully started\n   *  playing. Rejects when the channel is not found (status 404) or the\n   *  channel is not in a stasis application (status 409).\n   */\n  startMusicOnHold(params) {\n    const { channelId, mohClass } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels/${id}/moh`,\n      params: { mohClass },\n    });\n  }\n\n  /**\n   * DELETE /channels/{channelId}/moh\n   *\n   * Stop playing music on hold to the channel.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to stop music on hold.\n   * @returns {Promise} Resolves when the music on hold has successfully stopped.\n   *  Rejects when the channel is not found (status 404) or the channel is\n   *  not in a stasis application (status 409).\n   */\n  stopMusicOnHold(params) {\n    const { channelId } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/channels/${id}/moh`,\n    });\n  }\n\n  /**\n   * POST /channels/{channelId}/silence\n   *\n   * Play silence to a channel. Using media operations such as /play on a\n   * channel playing silence in this manner will suspend silence without\n   * resuming it automatically.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to play silence to.\n   * @returns {Promise} Resolves when the silence is successfully playing to\n   *  the channel. Rejects when the channel is not found (status 404) or the\n   *  channel is not in a stasis application (status 409).\n   */\n  startSilence(params) {\n    const { channelId } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels/${id}/silence`,\n    });\n  }\n\n  /**\n   * DELETE /channels/{channelId}/silence\n   *\n   * Stop playing silence to the channel.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to stop playing\n   *  silence to.\n   * @returns {Promise} Resolves when the silence is successfully stopped in\n   *  the channel. Rejects when the channel is not found (status 404) or the\n   *  channel is not in a stasis application (status 409).\n   */\n  stopSilence(params) {\n    const { channelId } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/channels/${id}/silence`,\n    });\n  }\n\n  /**\n   * POST /channels/{channelId}/play\n   *\n   * Start playback of media. The media URI may be any of a number of URIs.\n   * `sound:`, `recording:`, `number:`, `digits:`, `characters:`, and `tone:`\n   * URIs are supported. This operation creates a playback resource that can\n   * be used to control the playback of media (pause, rewind, fast forward, etc.)\n   *\n   * *'tone:' playback URI added in Asterisk 12.3*\n   *\n   * @param {object} params\n   * @param {string} params.channelId the id of the channel to play the media\n   *  to.\n   * @param {string|Array.<string>} params.media The media's URI to play.\n   *  *Allows multiple media to be passed since Asterisk 14.0*\n   * @param {string} [params.lang] For sounds, the language for the sound.\n   * @param {number} [params.offsetms=0] The number of milliseconds to skip\n   *  before playing the media URI. Allowed range: 0+\n   * @param {number} [params.skipms=3000] The number of milliseconds to\n   *  skip for forward/reverse operations. Allowed range: 0+\n   * @param {string} [params.playbackId] The identifier of the playback that\n   *  is started. *Param available since Asterisk 12.2*\n   * @returns {Promise.<Playback>} Resolves with the details of the started\n   *  playback.\n   */\n  play(params) {\n    const {\n      channelId,\n      media,\n      lang,\n      offsetms = 0,\n      skipms = 3000,\n      playbackId,\n    } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels/${id}/play`,\n      params: {\n        media: [].concat(media).join(\",\"),\n        lang,\n        offsetms,\n        skipms,\n        playbackId,\n      },\n    });\n  }\n\n  /**\n   * POST /channels/{channelId}/play/{playbackId}\n   *\n   * Start playback of media and specify the playbackId. The media URI may\n   * be any of a number of URIs. `sound:`, `recording:`, `number:`, `digits:`,\n   * `characters:`, and `tone:` URIs are supported. This operation creates\n   * a playback resource that can be used to control the playback of media\n   * (pause, rewind, fast forward, etc.)\n   *\n   * *API available since Asterisk 12.2*\n   * *'tone:' playback uri added in Asterisk 12.3*\n   *\n   * @param {object} params\n   * @param {string} params.channelId the id of the channel to play the media\n   *  to.\n   * @param {string} params.playbackId The identifier of the playback that\n   *  is started.\n   * @param {string|Array.<string>} params.media The media's URI to play.\n   *  *Allows multiple media to be passed since Asterisk 14.0*\n   * @param {string} [params.lang] For sounds, the language for the sound.\n   * @param {number} [params.offsetms] The number of milliseconds to skip\n   *  before playing the media URI. Allowed range: 0+\n   * @param {number} [params.skipms=3000] The number of milliseconds to\n   *  skip for forward/reverse operations. Allowed range: 0+\n\n   * @returns {Promise.<Playback>} Resolves with the details of the started\n   *  playback.\n   */\n  playWithId(params) {\n    const {\n      channelId,\n      playbackId,\n      media,\n      lang,\n      offsetms = 0,\n      skipms = 3000,\n    } = params;\n    const id = encodeURIComponent(channelId);\n    const playId = encodeURIComponent(playbackId);\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels/${id}/play/${playId}`,\n      params: {\n        media: [].concat(media).join(\",\"),\n        lang,\n        offsetms,\n        skipms,\n      },\n    });\n  }\n\n  /**\n   * POST /channels/{channelId}/record\n   *\n   * Start a recording. Record audio from the channel. Note that this will\n   * not capture audio send to the channel. The bridge itself has a record\n   * feature if that's what you want.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to record.\n   * @param {string} params.name The recording's filename.\n   * @param {string} params.format The format to record the audio in.\n   * @param {number} [params.maxDurationSeconds=0] The maximum duration of\n   *  the recording, in seconds. 0 for no limit. Allowed range: 0+\n   * @param {number} [params.maxSilenceSeconds=0] The maximum duration of\n   *  silence, in seconds. o for no limit. Allowed range: 0+\n   * @param {string} [params.ifExists=fail] The action to take if a recording\n   *  with the same name already exists. Allowed values: 'fail', 'overwrite',\n   *  or 'append'.\n   * @param {boolean} [params.beep=true] Play beep when recording begins.\n   * @param {string} [params.terminateOn=none] DTMF input to terminate\n   *  recording. Allowed values: 'none', 'any', '*', or '#'.\n   * @returns {Promise.<LiveRecording>} Resolves with the details of the\n   *  ongoing recording. Rejects if invalid parameters are provided (status 400),\n   *  if the channel is not found (status 404); if the channel is not in\n   *  a stasis application (status 409); if the channel is currently bridged\n   *  with other channels (status 409); if a recording of the same name\n   *  already exists on the system and cannot be overwritten because it is\n   *  in progress or ifExists was set to 'fail' (status 409); or if the format\n   *  specified is unknown on the system (status 422).\n   */\n  record(params) {\n    const {\n      channelId,\n      name,\n      format,\n      maxDurationSeconds = 0,\n      maxSilenceSeconds = 0,\n      ifExists = \"fail\",\n      beep = true,\n      terminateOn = \"none\",\n    } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels/${id}/record`,\n      params: {\n        name,\n        format,\n        maxDurationSeconds,\n        maxSilenceSeconds,\n        ifExists,\n        beep,\n        terminateOn,\n      },\n    });\n  }\n\n  /**\n   * GET /channels/{channelId}/variable\n   *\n   * Retrieve the value of a channel variable or function.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to get a variable\n   *  from.\n   * @param {string} params.variable The channel variable or function to retrieve.\n   * @returns {Promise.<Variable>} Resolves with the specified variable. Rejects\n   *  if the variable parameter is not provided (status 400), if the channel\n   *  or variable is not found (status 404), or if the channel is not in a\n   *  stasis application (status 409).\n   */\n  getChannelVariable(params) {\n    const { channelId, variable } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/channels/${id}/variable`,\n      params: { variable },\n    });\n  }\n\n  /**\n   * POST /channels/{channelId}/variable\n   *\n   * Set the value of a channel variable or function.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to set the variable\n   *  on.\n   * @param {string} params.variable The channel variable or function to set.\n   * @param {string} params.value The value to set the variable to.\n   * @returns {Promise} Resolves when the specified variable is set on the\n   *  channel. Rejects if the variable parameter is not provided (status 400),\n   *  if the channel or variable is not found (status 404), or if the channel\n   *  is not in a stasis application (status 409).\n   */\n  setChannelVariable(params) {\n    const { channelId, variable, value } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels/${id}/variable`,\n      params: { variable, value },\n    });\n  }\n\n  /**\n   * POST /channels/{channelId}/snoop\n   *\n   * Snoop (spy/whisper) on the specified channel.\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to snoop on.\n   * @param {string} params.app the application the snooping channel is\n   *  placed into.\n   * @param {string} [params.spy=none] The direction of audio to spy on.\n   *  Allowed values: 'none', 'both', 'out', or 'in'.\n   * @param {string} [params.whisper=none] The direction of audio to whisper\n   *  into. Allowed values: 'none', 'both', 'out', or 'in'.\n   * @param {string} [params.appArgs] The application arguments to pass to\n   *  the stasis application.\n   * @param {string} [params.snoopId] The id to assign to the snooping channel.\n   *  *Param available since Asterisk 12.2*\n   * @returns {Promise.<Channel>} Resolves with the newly created snoop channel.\n   *  Rejects if invalid parameters are passed (status 400) or if the channel\n   *  cannot be found (status 404).\n   */\n  snoopChannel(params) {\n    const {\n      channelId,\n      app,\n      spy = \"none\",\n      whisper = \"none\",\n      appArgs,\n      snoopId,\n    } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels/${id}/snoop`,\n      params: { app, spy, whisper, appArgs, snoopId },\n    });\n  }\n\n  /**\n   * POST /channels/{channelId}/snoop/{snoopId}\n   *\n   * Snoop (spy/whisper) on the specified channel.\n   *\n   * *API available since Asterisk 12.2*\n   *\n   * @param {object} params\n   * @param {string} params.channelId The id of the channel to snoop on.\n   * @param {string} params.snoopId The id to assign to the snooping channel.\n   * @param {string} params.app the application the snooping channel is\n   *  placed into.\n   * @param {string} [params.spy=none] The direction of audio to spy on.\n   *  Allowed values: 'none', 'both', 'out', or 'in'.\n   * @param {string} [params.whisper=none] The direction of audio to whisper\n   *  into. Allowed values: 'none', 'both', 'out', or 'in'.\n   * @param {string} [params.appArgs] The application arguments to pass to\n   *  the stasis application.\n   * @returns {Promise.<Channel>} Resolves with the newly created snoop channel.\n   *  Rejects if invalid parameters are passed (status 400) or if the channel\n   *  cannot be found (status 404).\n   */\n  snoopChannelWithId(params) {\n    const {\n      channelId,\n      snoopId,\n      app,\n      spy = \"none\",\n      whisper = \"none\",\n      appArgs,\n    } = params;\n    const id = encodeURIComponent(channelId);\n    const sid = encodeURIComponent(snoopId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels/${id}/snoop/${sid}`,\n      params: { app, spy, whisper, appArgs },\n    });\n  }\n\n  /**\n   * POST /channels/{channelId}/dial\n   *\n   * Dial a created channel.\n   *\n   * *API available since Asterisk 14.0*\n   *\n   * @param {object} params\n   * @param {string} params.channelId The channel's id.\n   * @param {string} [params.caller] The channelId of the caller.\n   * @param {number} [params.timeout] The dial timeout. Allowed range: 0+\n   * @returns {Promise} Resolves when the channel is successfully dialed.\n   *  Rejects when the channel cannot be found (status 404) or the channel\n   *  cannot be dialed (status 409).\n   */\n  dial(params) {\n    const { channelId, caller, timeout } = params;\n    const id = encodeURIComponent(channelId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/channels/${id}/dial`,\n      params: { caller, timeout },\n    });\n  }\n}\n\n/**\n * A specific communication connection between Asterisk and an Endpoint.\n *\n * @typedef {object} Channel\n * @property {string} accountcode\n * @property {object} caller\n * @property {string} caller.name\n * @property {string} caller.number\n * @property {object} connected\n * @property {string} connected.name\n * @property {string} creationtime The timestamp when the channel was created.\n * @property {object} dialplan The current location in the dialplan.\n * @property {string} dialplan.context The context in the dialplan.\n * @property {string} dialplan.exten The extension in the dialplan.\n * @property {number} dialplan.priority The priority in the dialplan.\n * @property {string} id The unique identifier of the channel. This is the same as the Uniqueid field in AMI.\n * @property {string} language The default spoken language. *Property available since Asterisk 13.2*\n * @property {string} name The name of the channel (i.e. SIP/foo-0000a7e3).\n * @property {string} state\n */\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/src/api/ChannelsAPI.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 110,
    "kind": "class",
    "name": "ChannelsAPI",
    "memberof": "src/api/ChannelsAPI.js",
    "static": true,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI",
    "access": "public",
    "export": true,
    "importPath": "awry/src/api/ChannelsAPI.js",
    "importStyle": "ChannelsAPI",
    "description": "REST API Resource for interacting with Asterisk Channels.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 111,
    "kind": "typedef",
    "name": "Channel",
    "memberof": "src/api/ChannelsAPI.js",
    "static": true,
    "longname": "src/api/ChannelsAPI.js~Channel",
    "access": "public",
    "description": "A specific communication connection between Asterisk and an Endpoint.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountcode",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "caller",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "caller.name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "caller.number",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "connected",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "connected.name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "creationtime",
        "description": "The timestamp when the channel was created."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "dialplan",
        "description": "The current location in the dialplan."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dialplan.context",
        "description": "The context in the dialplan."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dialplan.exten",
        "description": "The extension in the dialplan."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dialplan.priority",
        "description": "The priority in the dialplan."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The unique identifier of the channel. This is the same as the Uniqueid field in AMI."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "language",
        "description": "The default spoken language. *Property available since Asterisk 13.2*"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the channel (i.e. SIP/foo-0000a7e3)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "Channel"
    }
  },
  {
    "__docId__": 112,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#constructor",
    "access": "public",
    "description": "Create an instance of the Bridges API client, providing access to the\n`/channels` endpoint.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.username",
        "description": "The username to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.password",
        "description": "The password to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.baseUrl",
        "description": "The base url, without trailing slash,\n of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'."
      }
    ]
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "_baseUrl",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#_baseUrl",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "_request",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#_request",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "list",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#list",
    "access": "public",
    "description": "GET /channels\n\nList all active channels in Asterisk.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Array.<Channel>>} Resolves with the list of all active\n channels in Asterisk."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Array.<Channel>>"
      ],
      "spread": false,
      "description": "Resolves with the list of all active\n channels in Asterisk."
    },
    "params": []
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "originate",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#originate",
    "access": "public",
    "description": "POST /channels\n\nCreate a new channel (originate). The new channel is created immediately\nand a snapshot of it is returned. If a stasis application is provided,\nthat application will be automatically subscribed to the originated\nchannel for further events and updates.",
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Channel>} Resolves with the newly created channel.\n Rejects when invalid params are passed (status 400)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endpoint",
        "description": "The endpoint to call"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.extension",
        "description": "The extension to dial after the endpoint\n answers. Mutually exclusive with `app`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.context",
        "description": "The context to dial after the endpoint\n answers. If omitted, uses 'default'. Mutually exclusive with `app`."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "params.priority",
        "description": "The priority to dial after the endpoint\n answers. If omitted, uses 1. Mutually exclusive with `app`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.label",
        "description": "The label to dial after the endpoint\n answers. Will supersede `params.priority` if both are provided. Mutually\n exclusive with `app`. *Param available since Asterisk 13.2*"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.app",
        "description": "The application that is subscribed to the\n originated channel. When the channel is answered, it will be passed to\n this stasis application. Mutually exclusive with `context`, `extension`,\n `priority`, and `label`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.appArgs",
        "description": "The application arguments to pass to\n the stasis application provided by `app`. Mutually exclusive with\n `context`, `extension`, `priority`, and `label`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.callerId",
        "description": "CallerID to use when dialing the\n endpoint or extension."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "30",
        "defaultRaw": 30,
        "name": "params.timeout",
        "description": "The timeout in seconds before giving\n up dialing, or -1 for no timeout."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.channelId",
        "description": "The unique id to assign the channel\n on creation. *Param available since Asterisk 12.2*"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.otherChannelId",
        "description": "The unique id to assign the\n second channel when using local channels."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.originator",
        "description": "The unique id of the channel which\n is originating this one. *Param available since Asterisk 13.2*"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array.<string>"
        ],
        "spread": false,
        "optional": true,
        "name": "params.formats",
        "description": "The format name\n capability list to use if originator is not specified. For example,\n ['ulaw', 'slin16']. Format names can be found by executing the\n `core show codecs` command in the Asterisk console. *Param available\n since Asterisk 13.10*"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "params.variables",
        "description": "An object of key/value pairs that\n should be set on the channel on creation. *Param available since\n Asterisk 12.1*"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Channel>"
      ],
      "spread": false,
      "description": "Resolves with the newly created channel.\n Rejects when invalid params are passed (status 400)."
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "create",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#create",
    "access": "public",
    "description": "POST /channels/create\n\nCreate a channel and place it into a stasis application. This is similiar\nto originate except the created channel is not dialed. This allows for an\napplication writer to create a channel and perform manipulations to it\nprior to performing dial on the channel.\n\n*API available since Asterisk 14.0*",
    "lineNumber": 158,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Channel>} Resolves with the newly created channel.\n Rejects when invalid params are passed (status 400)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endpoint",
        "description": "The endpoint for channel communication."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.app",
        "description": "The stasis application to place the channel into."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.appArgs",
        "description": "The application arguments to pass to the\n stasis application."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.channelId",
        "description": "The unique id to assign the channel on\n creation."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.otherChannelId",
        "description": "The unique id to assign the second\n channel when using local channels."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.originator",
        "description": "The unique ID of the calling channel."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array.<string>"
        ],
        "spread": false,
        "optional": true,
        "name": "params.formats",
        "description": "The format name\n capability list to use if originator is not specified. For example,\n ['ulaw', 'slin16']. Format names can be found by executing the\n `core show codecs` command in the Asterisk console."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Channel>"
      ],
      "spread": false,
      "description": "Resolves with the newly created channel.\n Rejects when invalid params are passed (status 400)."
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "get",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#get",
    "access": "public",
    "description": "GET /channels/{channelId}\n\nRetrieve details about the specified channel.",
    "lineNumber": 195,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Channel>} Resolves with the details of the specified\n channel. Rejects when a channel matching the provided channelId cannot\n be found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to retrieve."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Channel>"
      ],
      "spread": false,
      "description": "Resolves with the details of the specified\n channel. Rejects when a channel matching the provided channelId cannot\n be found (status 404)."
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "originateWithId",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#originateWithId",
    "access": "public",
    "description": "POST /channels/{channelId}\n\nCreate a new channel (originate with id). The new channel is created\nimmediately and a snapshot of it is returned. If a stasis application\nis provided, that application will be automatically subscribed to the\noriginated channel for further events and updates.\n\n*API available since Asterisk 12.2*",
    "lineNumber": 253,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Channel>} Resolves with the newly created channel.\n Rejects when invalid params are passed (status 400)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The unique id to assign the channel\n on creation."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endpoint",
        "description": "The endpoint to call"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.extension",
        "description": "The extension to dial after the endpoint\n answers. Mutually exclusive with `app`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.context",
        "description": "The context to dial after the endpoint\n answers. If omitted, uses 'default'. Mutually exclusive with `app`."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "params.priority",
        "description": "The priority to dial after the endpoint\n answers. If omitted, uses 1. Mutually exclusive with `app`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.label",
        "description": "The label to dial after the endpoint\n answers. Will supersede `params.priority` if both are provided. Mutually\n exclusive with `app`. *Param available since Asterisk 13.2*"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.app",
        "description": "The application that is subscribed to the\n originated channel. When the channel is answered, it will be passed to\n this stasis application. Mutually exclusive with `context`, `extension`,\n `priority`, and `label`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.appArgs",
        "description": "The application arguments to pass to\n the stasis application provided by `app`. Mutually exclusive with\n `context`, `extension`, `priority`, and `label`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.callerId",
        "description": "CallerID to use when dialing the\n endpoint or extension."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "30",
        "defaultRaw": 30,
        "name": "params.timeout",
        "description": "The timeout in seconds before giving\n up dialing, or -1 for no timeout."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.otherChannelId",
        "description": "The unique id to assign the\n second channel when using local channels."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.originator",
        "description": "The unique id of the channel which\n is originating this one. *Param available since Asterisk 13.2*"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array.<string>"
        ],
        "spread": false,
        "optional": true,
        "name": "params.formats",
        "description": "The format name\n capability list to use if originator is not specified. For example,\n ['ulaw', 'slin16']. Format names can be found by executing the\n `core show codecs` command in the Asterisk console. *Param available\n since Asterisk 13.10*"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "params.variables",
        "description": "An object of key/value pairs that\n should be set on the channel on creation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Channel>"
      ],
      "spread": false,
      "description": "Resolves with the newly created channel.\n Rejects when invalid params are passed (status 400)."
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "hangup",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#hangup",
    "access": "public",
    "description": "DELETE /channels/{channelId}\n\nDelete (i.e. hangup) a channel.",
    "lineNumber": 307,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the hangup is successful. Rejects when\n an invalid reason for hangup is provided (status 400) or the specified\n channel cannot be found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to hangup."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.reason",
        "description": "The reason for hanging up the channel.\n Allowed values: 'normal', 'busy', 'congestion', or 'no_answer'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the hangup is successful. Rejects when\n an invalid reason for hangup is provided (status 400) or the specified\n channel cannot be found (status 404)."
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "continueInDialplan",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#continueInDialplan",
    "access": "public",
    "description": "POST /channels/{channelId}/continue\n\nExit the ARI application; Continue execution in the dialplan.",
    "lineNumber": 335,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the operation is successful. Rejects\n when the specified channel cannot be found (status 404) or the specified\n channel is not in a stasis application (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to continue in\n dialplan."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.context",
        "description": "The context to continue to."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.extension",
        "description": "The extension to continue to."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "params.priority",
        "description": "The priority to continue to."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.label",
        "description": "The label to continue to. Will supersede\n `priority` if both are provided. *Param available since Asterisk 13.2*"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the operation is successful. Rejects\n when the specified channel cannot be found (status 404) or the specified\n channel is not in a stasis application (status 409)."
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "redirect",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#redirect",
    "access": "public",
    "description": "POST /channels/{channelId}/redirect\n\nRedirect the channel to a different location.\n\n*API available since Asterisk 13.3*",
    "lineNumber": 362,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the redirect is successful. Rejects when\n the endpoint param is not provided (status 400), the specified channel\n or endpoint is not found (status 404), the specified channel is not in\n a stasis application (status 409), or the specified endpoint is not the\n same type as the channel (status 422)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to redirect."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.endpoint",
        "description": "The endpoint to redirect the channel to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the redirect is successful. Rejects when\n the endpoint param is not provided (status 400), the specified channel\n or endpoint is not found (status 404), the specified channel is not in\n a stasis application (status 409), or the specified endpoint is not the\n same type as the channel (status 422)."
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "answer",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#answer",
    "access": "public",
    "description": "POST /channels/{channelId}/answer\n\nAnswer the channel.",
    "lineNumber": 384,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the channel is successfully answered.\n Rejects when the specified channel cannot be found (status 404) or\n the specified channel is not in a stasis application (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to answer."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the channel is successfully answered.\n Rejects when the specified channel cannot be found (status 404) or\n the specified channel is not in a stasis application (status 409)."
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "ring",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#ring",
    "access": "public",
    "description": "POST /channels/{channelId}/ring\n\nIndicate ringing on the channel.",
    "lineNumber": 406,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the ringing has begun. Rejects when the\n specified channel cannot be found (status 404) or the specified channel\n is not in a stasis application (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to indicate\n ringing to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the ringing has begun. Rejects when the\n specified channel cannot be found (status 404) or the specified channel\n is not in a stasis application (status 409)."
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "ringStop",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#ringStop",
    "access": "public",
    "description": "DELETE /channels/{channelId}/ring\n\nStop ringing indication on the channel if locally generated.",
    "lineNumber": 428,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the ringing has successfully stopped.\n Rejects when the specified channel cannot be found (status 404) or the\n specified channel is not in a stasis application (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to stop indicating\n ringing to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the ringing has successfully stopped.\n Rejects when the specified channel cannot be found (status 404) or the\n specified channel is not in a stasis application (status 409)."
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "sendDTMF",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#sendDTMF",
    "access": "public",
    "description": "POST /channels/{channelId}/dtmf\n\nSend the provided DTMF to the channel.",
    "lineNumber": 459,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the specified DTMF have been successfully\n played. Rejects when the DTMF is not specified (status 400), the specified\n channel is not found (status 404), or when the specified channel is not\n in a stasis application (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to send DTMF to."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.dtmf",
        "description": "The DTMF to send to the channel."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "params.before",
        "description": "The amount of time to wait before DTMF\n digits are started (specified in milliseconds)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "params.between",
        "description": "The amount of time in between DTMF\n digits (specified in milliseconds)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "params.duration",
        "description": "The length of each DTMF digit\n (specified in milliseconds)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "params.after",
        "description": "The amount of time to wait after the DTMF\n digits end (specified in milliseconds)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the specified DTMF have been successfully\n played. Rejects when the DTMF is not specified (status 400), the specified\n channel is not found (status 404), or when the specified channel is not\n in a stasis application (status 409)."
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "mute",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#mute",
    "access": "public",
    "description": "POST /channels/{channelId}/mute\n\nMute the channel.",
    "lineNumber": 490,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the channel is successfully muted.\n Rejects when the channel is not found (status 404) or when the channel\n is not in a stasis application (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to mute."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "both",
        "defaultRaw": "both",
        "name": "params.direction",
        "description": "The direction in which to mute\n audio. Valid values: 'both', 'in', or 'out'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the channel is successfully muted.\n Rejects when the channel is not found (status 404) or when the channel\n is not in a stasis application (status 409)."
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "unmute",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#unmute",
    "access": "public",
    "description": "DELETE /channels/{channelId}/mute\n\nUnmute the channel.",
    "lineNumber": 514,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the channel is successfully unmuted.\n Rejects when the channel is not found (status 404) or when the channel\n is not in a stasis application (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to unmute."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "both",
        "defaultRaw": "both",
        "name": "params.direction",
        "description": "The direction in which to unmute\n audio. Valid values: 'both', 'in', or 'out'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the channel is successfully unmuted.\n Rejects when the channel is not found (status 404) or when the channel\n is not in a stasis application (status 409)."
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "hold",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#hold",
    "access": "public",
    "description": "POST /channels/{channelId}/hold\n\nHold the channel.",
    "lineNumber": 536,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the channel is successfully held.\n Rejects when the channel is not found (status 404) or when the channel\n is not in a stasis application (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to hold."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the channel is successfully held.\n Rejects when the channel is not found (status 404) or when the channel\n is not in a stasis application (status 409)."
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "unhold",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#unhold",
    "access": "public",
    "description": "DELETE /channels/{channelId}/hold\n\nRemove the channel from hold.",
    "lineNumber": 557,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the channel is successfully unheld.\n Rejects when the channel is not found (status 404) or when the channel\n is not in a stasis application (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to unhold."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the channel is successfully unheld.\n Rejects when the channel is not found (status 404) or when the channel\n is not in a stasis application (status 409)."
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "startMusicOnHold",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#startMusicOnHold",
    "access": "public",
    "description": "POST /channels/{channelId}/moh\n\nPlay music on hold to the channel. Using media operations such as /play\non a channel playing music on hold in this manner will suspend music on\nhold without resuming automatically. If continuing music on hold is desired,\nthe stasis application must re-initiate it.",
    "lineNumber": 583,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the music has successfully started\n playing. Rejects when the channel is not found (status 404) or the\n channel is not in a stasis application (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to play music on\n hold to."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.mohClass",
        "description": "The class of music on hold to play."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the music has successfully started\n playing. Rejects when the channel is not found (status 404) or the\n channel is not in a stasis application (status 409)."
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "stopMusicOnHold",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#stopMusicOnHold",
    "access": "public",
    "description": "DELETE /channels/{channelId}/moh\n\nStop playing music on hold to the channel.",
    "lineNumber": 605,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the music on hold has successfully stopped.\n Rejects when the channel is not found (status 404) or the channel is\n not in a stasis application (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to stop music on hold."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the music on hold has successfully stopped.\n Rejects when the channel is not found (status 404) or the channel is\n not in a stasis application (status 409)."
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "startSilence",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#startSilence",
    "access": "public",
    "description": "POST /channels/{channelId}/silence\n\nPlay silence to a channel. Using media operations such as /play on a\nchannel playing silence in this manner will suspend silence without\nresuming it automatically.",
    "lineNumber": 628,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the silence is successfully playing to\n the channel. Rejects when the channel is not found (status 404) or the\n channel is not in a stasis application (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to play silence to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the silence is successfully playing to\n the channel. Rejects when the channel is not found (status 404) or the\n channel is not in a stasis application (status 409)."
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "stopSilence",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#stopSilence",
    "access": "public",
    "description": "DELETE /channels/{channelId}/silence\n\nStop playing silence to the channel.",
    "lineNumber": 650,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the silence is successfully stopped in\n the channel. Rejects when the channel is not found (status 404) or the\n channel is not in a stasis application (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to stop playing\n silence to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the silence is successfully stopped in\n the channel. Rejects when the channel is not found (status 404) or the\n channel is not in a stasis application (status 409)."
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "play",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#play",
    "access": "public",
    "description": "POST /channels/{channelId}/play\n\nStart playback of media. The media URI may be any of a number of URIs.\n`sound:`, `recording:`, `number:`, `digits:`, `characters:`, and `tone:`\nURIs are supported. This operation creates a playback resource that can\nbe used to control the playback of media (pause, rewind, fast forward, etc.)\n\n*'tone:' playback URI added in Asterisk 12.3*",
    "lineNumber": 685,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Playback>} Resolves with the details of the started\n playback."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "the id of the channel to play the media\n to."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "params.media",
        "description": "The media's URI to play.\n *Allows multiple media to be passed since Asterisk 14.0*"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.lang",
        "description": "For sounds, the language for the sound."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "params.offsetms",
        "description": "The number of milliseconds to skip\n before playing the media URI. Allowed range: 0+"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "3000",
        "defaultRaw": 3000,
        "name": "params.skipms",
        "description": "The number of milliseconds to\n skip for forward/reverse operations. Allowed range: 0+"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.playbackId",
        "description": "The identifier of the playback that\n is started. *Param available since Asterisk 12.2*"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Playback>"
      ],
      "spread": false,
      "description": "Resolves with the details of the started\n playback."
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "playWithId",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#playWithId",
    "access": "public",
    "description": "POST /channels/{channelId}/play/{playbackId}\n\nStart playback of media and specify the playbackId. The media URI may\nbe any of a number of URIs. `sound:`, `recording:`, `number:`, `digits:`,\n`characters:`, and `tone:` URIs are supported. This operation creates\na playback resource that can be used to control the playback of media\n(pause, rewind, fast forward, etc.)\n\n*API available since Asterisk 12.2*\n*'tone:' playback uri added in Asterisk 12.3*",
    "lineNumber": 737,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Playback>} Resolves with the details of the started\n playback."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "the id of the channel to play the media\n to."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.playbackId",
        "description": "The identifier of the playback that\n is started."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "params.media",
        "description": "The media's URI to play.\n *Allows multiple media to be passed since Asterisk 14.0*"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.lang",
        "description": "For sounds, the language for the sound."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "params.offsetms",
        "description": "The number of milliseconds to skip\n before playing the media URI. Allowed range: 0+"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "3000",
        "defaultRaw": 3000,
        "name": "params.skipms",
        "description": "The number of milliseconds to\n skip for forward/reverse operations. Allowed range: 0+"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Playback>"
      ],
      "spread": false,
      "description": "Resolves with the details of the started\n playback."
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "record",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#record",
    "access": "public",
    "description": "POST /channels/{channelId}/record\n\nStart a recording. Record audio from the channel. Note that this will\nnot capture audio send to the channel. The bridge itself has a record\nfeature if that's what you want.",
    "lineNumber": 790,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<LiveRecording>} Resolves with the details of the\n ongoing recording. Rejects if invalid parameters are provided (status 400),\n if the channel is not found (status 404); if the channel is not in\n a stasis application (status 409); if the channel is currently bridged\n with other channels (status 409); if a recording of the same name\n already exists on the system and cannot be overwritten because it is\n in progress or ifExists was set to 'fail' (status 409); or if the format\n specified is unknown on the system (status 422)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to record."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.name",
        "description": "The recording's filename."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.format",
        "description": "The format to record the audio in."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "params.maxDurationSeconds",
        "description": "The maximum duration of\n the recording, in seconds. 0 for no limit. Allowed range: 0+"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "params.maxSilenceSeconds",
        "description": "The maximum duration of\n silence, in seconds. o for no limit. Allowed range: 0+"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "fail",
        "defaultRaw": "fail",
        "name": "params.ifExists",
        "description": "The action to take if a recording\n with the same name already exists. Allowed values: 'fail', 'overwrite',\n or 'append'."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.beep",
        "description": "Play beep when recording begins."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "none",
        "defaultRaw": "none",
        "name": "params.terminateOn",
        "description": "DTMF input to terminate\n recording. Allowed values: 'none', 'any', '*', or '#'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<LiveRecording>"
      ],
      "spread": false,
      "description": "Resolves with the details of the\n ongoing recording. Rejects if invalid parameters are provided (status 400),\n if the channel is not found (status 404); if the channel is not in\n a stasis application (status 409); if the channel is currently bridged\n with other channels (status 409); if a recording of the same name\n already exists on the system and cannot be overwritten because it is\n in progress or ifExists was set to 'fail' (status 409); or if the format\n specified is unknown on the system (status 422)."
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "getChannelVariable",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#getChannelVariable",
    "access": "public",
    "description": "GET /channels/{channelId}/variable\n\nRetrieve the value of a channel variable or function.",
    "lineNumber": 832,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Variable>} Resolves with the specified variable. Rejects\n if the variable parameter is not provided (status 400), if the channel\n or variable is not found (status 404), or if the channel is not in a\n stasis application (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to get a variable\n from."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.variable",
        "description": "The channel variable or function to retrieve."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Variable>"
      ],
      "spread": false,
      "description": "Resolves with the specified variable. Rejects\n if the variable parameter is not provided (status 400), if the channel\n or variable is not found (status 404), or if the channel is not in a\n stasis application (status 409)."
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "setChannelVariable",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#setChannelVariable",
    "access": "public",
    "description": "POST /channels/{channelId}/variable\n\nSet the value of a channel variable or function.",
    "lineNumber": 858,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the specified variable is set on the\n channel. Rejects if the variable parameter is not provided (status 400),\n if the channel or variable is not found (status 404), or if the channel\n is not in a stasis application (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to set the variable\n on."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.variable",
        "description": "The channel variable or function to set."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.value",
        "description": "The value to set the variable to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the specified variable is set on the\n channel. Rejects if the variable parameter is not provided (status 400),\n if the channel or variable is not found (status 404), or if the channel\n is not in a stasis application (status 409)."
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "snoopChannel",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#snoopChannel",
    "access": "public",
    "description": "POST /channels/{channelId}/snoop\n\nSnoop (spy/whisper) on the specified channel.",
    "lineNumber": 890,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Channel>} Resolves with the newly created snoop channel.\n Rejects if invalid parameters are passed (status 400) or if the channel\n cannot be found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to snoop on."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.app",
        "description": "the application the snooping channel is\n placed into."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "none",
        "defaultRaw": "none",
        "name": "params.spy",
        "description": "The direction of audio to spy on.\n Allowed values: 'none', 'both', 'out', or 'in'."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "none",
        "defaultRaw": "none",
        "name": "params.whisper",
        "description": "The direction of audio to whisper\n into. Allowed values: 'none', 'both', 'out', or 'in'."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.appArgs",
        "description": "The application arguments to pass to\n the stasis application."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.snoopId",
        "description": "The id to assign to the snooping channel.\n *Param available since Asterisk 12.2*"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Channel>"
      ],
      "spread": false,
      "description": "Resolves with the newly created snoop channel.\n Rejects if invalid parameters are passed (status 400) or if the channel\n cannot be found (status 404)."
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "snoopChannelWithId",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#snoopChannelWithId",
    "access": "public",
    "description": "POST /channels/{channelId}/snoop/{snoopId}\n\nSnoop (spy/whisper) on the specified channel.\n\n*API available since Asterisk 12.2*",
    "lineNumber": 930,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Channel>} Resolves with the newly created snoop channel.\n Rejects if invalid parameters are passed (status 400) or if the channel\n cannot be found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The id of the channel to snoop on."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.snoopId",
        "description": "The id to assign to the snooping channel."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.app",
        "description": "the application the snooping channel is\n placed into."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "none",
        "defaultRaw": "none",
        "name": "params.spy",
        "description": "The direction of audio to spy on.\n Allowed values: 'none', 'both', 'out', or 'in'."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "none",
        "defaultRaw": "none",
        "name": "params.whisper",
        "description": "The direction of audio to whisper\n into. Allowed values: 'none', 'both', 'out', or 'in'."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.appArgs",
        "description": "The application arguments to pass to\n the stasis application."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Channel>"
      ],
      "spread": false,
      "description": "Resolves with the newly created snoop channel.\n Rejects if invalid parameters are passed (status 400) or if the channel\n cannot be found (status 404)."
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "dial",
    "memberof": "src/api/ChannelsAPI.js~ChannelsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/ChannelsAPI.js~ChannelsAPI#dial",
    "access": "public",
    "description": "POST /channels/{channelId}/dial\n\nDial a created channel.\n\n*API available since Asterisk 14.0*",
    "lineNumber": 964,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the channel is successfully dialed.\n Rejects when the channel cannot be found (status 404) or the channel\n cannot be dialed (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.channelId",
        "description": "The channel's id."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.caller",
        "description": "The channelId of the caller."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "params.timeout",
        "description": "The dial timeout. Allowed range: 0+"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the channel is successfully dialed.\n Rejects when the channel cannot be found (status 404) or the channel\n cannot be dialed (status 409)."
    }
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "src/api/DeviceStatesAPI.js",
    "content": "import axios from \"axios\";\n\n/**\n * REST API Resource for interacting with device states controlled by ARI.\n */\nexport default class DeviceStatesAPI {\n  /**\n   * Create an instance of the DeviceStates API client, providing access\n   * to the `/deviceStates` endpoint.\n   *\n   * @param {object} params\n   * @param {string} params.username The username to send with the request.\n   * @param {string} params.password The password to send with the request.\n   * @param {string} params.baseUrl The base url, without trailing slash,\n   *  of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'.\n   */\n  constructor(params = {}) {\n    const { username, password } = params;\n\n    /** @private */\n    this._baseUrl = params.baseUrl;\n\n    /** @private */\n    this._request = axios.create({\n      auth: { username, password },\n    });\n  }\n\n  /**\n   * GET /deviceStates\n   *\n   * List all ARI controlled device states.\n   *\n   * @returns {Promise.<Array.<DeviceState>>} Resolves with all device states\n   *  controlled by ARI.\n   */\n  list() {\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/deviceStates`,\n    });\n  }\n\n  /**\n   * GET /deviceStates/{deviceName}\n   *\n   * Retrieve the current state of a device controlled by ARI.\n   *\n   * @param {object} params\n   * @param {string} params.deviceName The name of the device to retrieve the\n   *  current state of.\n   * @returns {Promise.<DeviceState>} Resolves with the state of the specified\n   *  device.\n   */\n  get(params) {\n    const { deviceName } = params;\n    const name = encodeURIComponent(deviceName);\n\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/deviceStates/${name}`,\n    });\n  }\n\n  /**\n   * PUT /deviceStates/{deviceName}\n   *\n   * Change the state of a device controlled by ARI. This implicitly creates\n   * the device state.\n   *\n   * @param {object} params\n   * @param {string} params.deviceName The name of the device to change the\n   *  state of.\n   * @param {string} params.deviceState The value to set the device's state to.\n   *  Allowed values are 'NOT_INUSE', 'INUSE', 'BUSY', 'INVALID', 'UNAVAILABLE',\n   *  'RINGING', 'RINGINUSE', and 'ONHOLD'.\n   * @returns {Promise} Resolves when The device state has been successfully\n   *  set. Rejects if the provided device name does not match a device\n   *  (status 404) or if the device specified is not controlled by ARI\n   *  (status 409).\n   */\n  update(params) {\n    const { deviceName, deviceState } = params;\n    const name = encodeURIComponent(deviceName);\n\n    return this._request({\n      method: \"PUT\",\n      url: `${this._baseUrl}/deviceStates/${name}`,\n      params: { deviceState },\n    });\n  }\n\n  /**\n   * DELETE /deviceStates/{deviceName}\n   *\n   * Delete the state of a device controlled by ARI.\n   *\n   * @param {object} params\n   * @param {string} params.deviceName The name of the device to remove the\n   *  state of.\n   * @returns {Promise} Resolves when The device state has been successfully\n   *  removed. Rejects if the provided device name does not match a device\n   *  (status 404) or if the device specified is not controlled by ARI\n   *  (status 409).\n   */\n  destroy(params) {\n    const { deviceName } = params;\n    const name = encodeURIComponent(deviceName);\n\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/deviceStates/${name}`,\n    });\n  }\n}\n\n/**\n * @name DeviceState\n * @typedef DeviceState\n * @property {string} name The name of the device.\n * @property {string} state The device's state.\n */\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/src/api/DeviceStatesAPI.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "class",
    "name": "DeviceStatesAPI",
    "memberof": "src/api/DeviceStatesAPI.js",
    "static": true,
    "longname": "src/api/DeviceStatesAPI.js~DeviceStatesAPI",
    "access": "public",
    "export": true,
    "importPath": "awry/src/api/DeviceStatesAPI.js",
    "importStyle": "DeviceStatesAPI",
    "description": "REST API Resource for interacting with device states controlled by ARI.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 145,
    "kind": "typedef",
    "name": "DeviceState",
    "memberof": "src/api/DeviceStatesAPI.js",
    "static": true,
    "longname": "src/api/DeviceStatesAPI.js~DeviceState",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the device."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The device's state."
      }
    ],
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "DeviceState"
    }
  },
  {
    "__docId__": 146,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/api/DeviceStatesAPI.js~DeviceStatesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/DeviceStatesAPI.js~DeviceStatesAPI#constructor",
    "access": "public",
    "description": "Create an instance of the DeviceStates API client, providing access\nto the `/deviceStates` endpoint.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.username",
        "description": "The username to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.password",
        "description": "The password to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.baseUrl",
        "description": "The base url, without trailing slash,\n of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'."
      }
    ]
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "_baseUrl",
    "memberof": "src/api/DeviceStatesAPI.js~DeviceStatesAPI",
    "static": false,
    "longname": "src/api/DeviceStatesAPI.js~DeviceStatesAPI#_baseUrl",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "_request",
    "memberof": "src/api/DeviceStatesAPI.js~DeviceStatesAPI",
    "static": false,
    "longname": "src/api/DeviceStatesAPI.js~DeviceStatesAPI#_request",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "list",
    "memberof": "src/api/DeviceStatesAPI.js~DeviceStatesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/DeviceStatesAPI.js~DeviceStatesAPI#list",
    "access": "public",
    "description": "GET /deviceStates\n\nList all ARI controlled device states.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Array.<DeviceState>>} Resolves with all device states\n controlled by ARI."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Array.<DeviceState>>"
      ],
      "spread": false,
      "description": "Resolves with all device states\n controlled by ARI."
    },
    "params": []
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "get",
    "memberof": "src/api/DeviceStatesAPI.js~DeviceStatesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/DeviceStatesAPI.js~DeviceStatesAPI#get",
    "access": "public",
    "description": "GET /deviceStates/{deviceName}\n\nRetrieve the current state of a device controlled by ARI.",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<DeviceState>} Resolves with the state of the specified\n device."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.deviceName",
        "description": "The name of the device to retrieve the\n current state of."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<DeviceState>"
      ],
      "spread": false,
      "description": "Resolves with the state of the specified\n device."
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "update",
    "memberof": "src/api/DeviceStatesAPI.js~DeviceStatesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/DeviceStatesAPI.js~DeviceStatesAPI#update",
    "access": "public",
    "description": "PUT /deviceStates/{deviceName}\n\nChange the state of a device controlled by ARI. This implicitly creates\nthe device state.",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when The device state has been successfully\n set. Rejects if the provided device name does not match a device\n (status 404) or if the device specified is not controlled by ARI\n (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.deviceName",
        "description": "The name of the device to change the\n state of."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.deviceState",
        "description": "The value to set the device's state to.\n Allowed values are 'NOT_INUSE', 'INUSE', 'BUSY', 'INVALID', 'UNAVAILABLE',\n 'RINGING', 'RINGINUSE', and 'ONHOLD'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when The device state has been successfully\n set. Rejects if the provided device name does not match a device\n (status 404) or if the device specified is not controlled by ARI\n (status 409)."
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/api/DeviceStatesAPI.js~DeviceStatesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/DeviceStatesAPI.js~DeviceStatesAPI#destroy",
    "access": "public",
    "description": "DELETE /deviceStates/{deviceName}\n\nDelete the state of a device controlled by ARI.",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when The device state has been successfully\n removed. Rejects if the provided device name does not match a device\n (status 404) or if the device specified is not controlled by ARI\n (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.deviceName",
        "description": "The name of the device to remove the\n state of."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when The device state has been successfully\n removed. Rejects if the provided device name does not match a device\n (status 404) or if the device specified is not controlled by ARI\n (status 409)."
    }
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "src/api/EndpointsAPI.js",
    "content": "import axios from \"axios\";\n\n/**\n * REST API Resource for interacting with Asterisk endpoints.\n */\nexport default class EndpointsAPI {\n  /**\n   * Create an instance of the Endpoints API client, providing access\n   * to the `/endpoints` endpoint.\n   *\n   * @param {object} params\n   * @param {string} params.username The username to send with the request.\n   * @param {string} params.password The password to send with the request.\n   * @param {string} params.baseUrl The base url, without trailing slash,\n   *  of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'.\n   */\n  constructor(params) {\n    const { username, password } = params;\n\n    /** @private */\n    this._baseUrl = params.baseUrl;\n\n    /** @private */\n    this._request = axios.create({\n      auth: { username, password },\n    });\n  }\n\n  /**\n   * GET /endpoints\n   *\n   * List all endpoints in Asterisk.\n   *\n   * @returns {Promise.<Array.<Endpoint>>} Resolves to all endpoints in Asterisk.\n   */\n  list() {\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/endpoints`,\n    });\n  }\n\n  /**\n   * PUT /endpoints/sendMessage\n   *\n   * Send a message to some technology URI or endpoint.\n   *\n   * *API available since Asterisk 12.5*\n   *\n   * @param {object} params\n   * @param {string} params.to The endpoint resource or technology specific\n   *  URI to send the message to. Valid resources are 'sip', 'pjsip', and\n   *  'xmpp'.\n   * @param {string} params.from The endpoint resource or technology specific\n   *  identity to send this message from. Valid resources are 'sip', 'pjsip',\n   *  and 'xmpp'.\n   * @param {string} params.body The body of the message.\n   * @param {object} [params.variables] An object of key/value pairs that\n   *  should be sent to set variables for the sendMessage request.\n   * @returns {Promise} Resolves if the message has been successfully sent.\n   *  Rejects if invalid params are provided for sending the message (status\n   *  400) or the specified destination could not be found (status 404).\n   */\n  sendMessage(params) {\n    const { to, from, body, variables } = params;\n\n    return this._request({\n      method: \"PUT\",\n      url: `${this._baseUrl}/endpoints/sendMessage`,\n      params: { to, from, body },\n      data: { variables },\n    });\n  }\n\n  /**\n   * GET /endpoints/{technology}\n   *\n   * List available endpoints for a given endpoint technology.\n   *\n   * @param {object} params\n   * @param {string} params.technology The technology of the endpoints (sip,\n   *  iax2, etc.)\n   * @returns {Promise.<Array.<Endpoint>>} Resolves to a list of endpoints\n   *  that match the specified technology.\n   */\n  listByTechnology(params) {\n    const { technology } = params;\n    const tech = encodeURIComponent(technology);\n\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/endpoints/${tech}`,\n    });\n  }\n\n  /**\n   * GET /endpoints/{technology}/{resource}\n   *\n   * Retrieve the details for a specific Asterisk endpoint.\n   *\n   * @param {object} params\n   * @param {string} params.technology The technology of the endpoints (sip,\n   *  iax2, etc.)\n   * @param {string} params.resource The technology-specific identifier for\n   *  the endpoint.\n   * @returns {Promise.<Endpoint>} Resolves to the endpoint that matches the\n   *  specified technology and resource. Rejects if invalid parameters are\n   *  provided (status 400) or the specified endpoint is not found (status 404).\n   */\n  get(params) {\n    const { technology, resource } = params;\n    const tech = encodeURIComponent(technology);\n    const res = encodeURIComponent(resource);\n\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/endpoints/${tech}/${res}`,\n    });\n  }\n\n  /**\n   * PUT /endpoints/{technology}/{resource}/sendMessage\n   *\n   * Send a message to a specific endpoint.\n   *\n   * *API available since Asterisk 12.5*\n   *\n   * @param {object} params\n   * @param {string} params.technology The technology of the endpoints (sip,\n   *  iax2, etc.)\n   * @param {string} params.resource The technology-specific identifier for\n   *  the endpoint.\n   * @param {string} params.from The endpoint resource or technology specific\n   *  identity to send this message from. Valid resources are 'sip', 'pjsip',\n   *  and 'xmpp'.\n   * @param {string} params.body The body of the message\n   * @param {object} [params.variables] An object of key/value pairs that\n   *  should be sent to set variables for the sendMessage request.\n   * @returns {Promise} Resolves when the message is successfully sent. Rejects\n   *  when invalid parameters are provided for sending a message (status 400)\n   *  or when the specified endpoint is not found (status 404).\n   */\n  sendMessageToEndpoint(params) {\n    const { technology, resource, from, body, variables } = params;\n    const tech = encodeURIComponent(technology);\n    const res = encodeURIComponent(resource);\n\n    return this._request({\n      method: \"PUT\",\n      url: `${this._baseUrl}/endpoints/${tech}/${res}/sendMessage`,\n      params: { from, body },\n      data: { variables },\n    });\n  }\n}\n\n/**\n * @typedef {object} Endpoint\n * @property {Array.<string>} channel_ids Ids of channels associated with this endpoint.\n * @property {string} resource The idenfier of the endpoint, specific to the given technology.\n * @property {string} technology The technology of the endpoint.\n * @property {string} [state] The endpoint's current state.\n */\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/src/api/EndpointsAPI.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "class",
    "name": "EndpointsAPI",
    "memberof": "src/api/EndpointsAPI.js",
    "static": true,
    "longname": "src/api/EndpointsAPI.js~EndpointsAPI",
    "access": "public",
    "export": true,
    "importPath": "awry/src/api/EndpointsAPI.js",
    "importStyle": "EndpointsAPI",
    "description": "REST API Resource for interacting with Asterisk endpoints.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 155,
    "kind": "typedef",
    "name": "Endpoint",
    "memberof": "src/api/EndpointsAPI.js",
    "static": true,
    "longname": "src/api/EndpointsAPI.js~Endpoint",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "channel_ids",
        "description": "Ids of channels associated with this endpoint."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "resource",
        "description": "The idenfier of the endpoint, specific to the given technology."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "technology",
        "description": "The technology of the endpoint."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "state",
        "description": "The endpoint's current state."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "Endpoint"
    }
  },
  {
    "__docId__": 156,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/api/EndpointsAPI.js~EndpointsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/EndpointsAPI.js~EndpointsAPI#constructor",
    "access": "public",
    "description": "Create an instance of the Endpoints API client, providing access\nto the `/endpoints` endpoint.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.username",
        "description": "The username to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.password",
        "description": "The password to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.baseUrl",
        "description": "The base url, without trailing slash,\n of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'."
      }
    ]
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "_baseUrl",
    "memberof": "src/api/EndpointsAPI.js~EndpointsAPI",
    "static": false,
    "longname": "src/api/EndpointsAPI.js~EndpointsAPI#_baseUrl",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "_request",
    "memberof": "src/api/EndpointsAPI.js~EndpointsAPI",
    "static": false,
    "longname": "src/api/EndpointsAPI.js~EndpointsAPI#_request",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "list",
    "memberof": "src/api/EndpointsAPI.js~EndpointsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/EndpointsAPI.js~EndpointsAPI#list",
    "access": "public",
    "description": "GET /endpoints\n\nList all endpoints in Asterisk.",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Array.<Endpoint>>} Resolves to all endpoints in Asterisk."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Array.<Endpoint>>"
      ],
      "spread": false,
      "description": "Resolves to all endpoints in Asterisk."
    },
    "params": []
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "sendMessage",
    "memberof": "src/api/EndpointsAPI.js~EndpointsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/EndpointsAPI.js~EndpointsAPI#sendMessage",
    "access": "public",
    "description": "PUT /endpoints/sendMessage\n\nSend a message to some technology URI or endpoint.\n\n*API available since Asterisk 12.5*",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves if the message has been successfully sent.\n Rejects if invalid params are provided for sending the message (status\n 400) or the specified destination could not be found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.to",
        "description": "The endpoint resource or technology specific\n URI to send the message to. Valid resources are 'sip', 'pjsip', and\n 'xmpp'."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.from",
        "description": "The endpoint resource or technology specific\n identity to send this message from. Valid resources are 'sip', 'pjsip',\n and 'xmpp'."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.body",
        "description": "The body of the message."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "params.variables",
        "description": "An object of key/value pairs that\n should be sent to set variables for the sendMessage request."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the message has been successfully sent.\n Rejects if invalid params are provided for sending the message (status\n 400) or the specified destination could not be found (status 404)."
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "listByTechnology",
    "memberof": "src/api/EndpointsAPI.js~EndpointsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/EndpointsAPI.js~EndpointsAPI#listByTechnology",
    "access": "public",
    "description": "GET /endpoints/{technology}\n\nList available endpoints for a given endpoint technology.",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Array.<Endpoint>>} Resolves to a list of endpoints\n that match the specified technology."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.technology",
        "description": "The technology of the endpoints (sip,\n iax2, etc.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Array.<Endpoint>>"
      ],
      "spread": false,
      "description": "Resolves to a list of endpoints\n that match the specified technology."
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "get",
    "memberof": "src/api/EndpointsAPI.js~EndpointsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/EndpointsAPI.js~EndpointsAPI#get",
    "access": "public",
    "description": "GET /endpoints/{technology}/{resource}\n\nRetrieve the details for a specific Asterisk endpoint.",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Endpoint>} Resolves to the endpoint that matches the\n specified technology and resource. Rejects if invalid parameters are\n provided (status 400) or the specified endpoint is not found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.technology",
        "description": "The technology of the endpoints (sip,\n iax2, etc.)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.resource",
        "description": "The technology-specific identifier for\n the endpoint."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Endpoint>"
      ],
      "spread": false,
      "description": "Resolves to the endpoint that matches the\n specified technology and resource. Rejects if invalid parameters are\n provided (status 400) or the specified endpoint is not found (status 404)."
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "sendMessageToEndpoint",
    "memberof": "src/api/EndpointsAPI.js~EndpointsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/EndpointsAPI.js~EndpointsAPI#sendMessageToEndpoint",
    "access": "public",
    "description": "PUT /endpoints/{technology}/{resource}/sendMessage\n\nSend a message to a specific endpoint.\n\n*API available since Asterisk 12.5*",
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the message is successfully sent. Rejects\n when invalid parameters are provided for sending a message (status 400)\n or when the specified endpoint is not found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.technology",
        "description": "The technology of the endpoints (sip,\n iax2, etc.)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.resource",
        "description": "The technology-specific identifier for\n the endpoint."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.from",
        "description": "The endpoint resource or technology specific\n identity to send this message from. Valid resources are 'sip', 'pjsip',\n and 'xmpp'."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.body",
        "description": "The body of the message"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "params.variables",
        "description": "An object of key/value pairs that\n should be sent to set variables for the sendMessage request."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the message is successfully sent. Rejects\n when invalid parameters are provided for sending a message (status 400)\n or when the specified endpoint is not found (status 404)."
    }
  },
  {
    "__docId__": 164,
    "kind": "file",
    "name": "src/api/EventsAPI.js",
    "content": "import axios from \"axios\";\n\n/**\n * REST API Resource for creating an Asterisk user event.\n */\nexport default class EventsAPI {\n  /**\n   * Create an instance of the Events API client, providing access\n   * to the `/events` endpoint.\n   *\n   * @param {object} params\n   * @param {string} params.username The username to send with the request.\n   * @param {string} params.password The password to send with the request.\n   * @param {string} params.baseUrl The base url, without trailing slash,\n   *  of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'.\n   */\n  constructor(params) {\n    const { username, password } = params;\n\n    /** @private */\n    this._baseUrl = params.baseUrl;\n\n    /** @private */\n    this._request = axios.create({\n      auth: { username, password },\n    });\n  }\n\n  /**\n   * POST /events/user/{eventName}\n   *\n   * Generate a user event.\n   *\n   * *API available since Asterisk 12.3*\n   *\n   * @param {object} params\n   * @param {string} params.eventName The event name to generate.\n   * @param {string} params.application The name of the application that will\n   *  receive this event.\n   * @param {string|Array.<string>} [params.source] The URI(s) for the event\n   *  source. Valid sources are: 'channel:{channelId}', 'bridge:{bridgeId}',\n   *  'endpoint:{technology}/{resource}', 'deviceState:{deviceName}'. For example,\n   *  'endpoint:pjsip/6001'.\n   * @param {object} [params.variables] An object of key/value pairs that should\n   *  be sent to set variables in the user event.\n   * @returns {Promise} Resolves when the event is successfully dispatched.\n   *  Rejects when the specified application does not exist (status 404),\n   *  one of the specified event sources cannot be found (status 422), or\n   *  either the event data or one of the source URIs are invalid (status 400).\n   */\n  generateUserEvent(params) {\n    const { eventName, application, source, variables } = params;\n    const evt = encodeURIComponent(eventName);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/events/user/${evt}`,\n      params: {\n        application,\n        source: [].concat(source).join(\",\"),\n      },\n      data: { variables },\n    });\n  }\n}\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/src/api/EventsAPI.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "class",
    "name": "EventsAPI",
    "memberof": "src/api/EventsAPI.js",
    "static": true,
    "longname": "src/api/EventsAPI.js~EventsAPI",
    "access": "public",
    "export": true,
    "importPath": "awry/src/api/EventsAPI.js",
    "importStyle": "EventsAPI",
    "description": "REST API Resource for creating an Asterisk user event.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 166,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/api/EventsAPI.js~EventsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/EventsAPI.js~EventsAPI#constructor",
    "access": "public",
    "description": "Create an instance of the Events API client, providing access\nto the `/events` endpoint.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.username",
        "description": "The username to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.password",
        "description": "The password to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.baseUrl",
        "description": "The base url, without trailing slash,\n of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'."
      }
    ]
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "_baseUrl",
    "memberof": "src/api/EventsAPI.js~EventsAPI",
    "static": false,
    "longname": "src/api/EventsAPI.js~EventsAPI#_baseUrl",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "_request",
    "memberof": "src/api/EventsAPI.js~EventsAPI",
    "static": false,
    "longname": "src/api/EventsAPI.js~EventsAPI#_request",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "generateUserEvent",
    "memberof": "src/api/EventsAPI.js~EventsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/EventsAPI.js~EventsAPI#generateUserEvent",
    "access": "public",
    "description": "POST /events/user/{eventName}\n\nGenerate a user event.\n\n*API available since Asterisk 12.3*",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the event is successfully dispatched.\n Rejects when the specified application does not exist (status 404),\n one of the specified event sources cannot be found (status 422), or\n either the event data or one of the source URIs are invalid (status 400)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.eventName",
        "description": "The event name to generate."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.application",
        "description": "The name of the application that will\n receive this event."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array.<string>"
        ],
        "spread": false,
        "optional": true,
        "name": "params.source",
        "description": "The URI(s) for the event\n source. Valid sources are: 'channel:{channelId}', 'bridge:{bridgeId}',\n 'endpoint:{technology}/{resource}', 'deviceState:{deviceName}'. For example,\n 'endpoint:pjsip/6001'."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "params.variables",
        "description": "An object of key/value pairs that should\n be sent to set variables in the user event."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the event is successfully dispatched.\n Rejects when the specified application does not exist (status 404),\n one of the specified event sources cannot be found (status 422), or\n either the event data or one of the source URIs are invalid (status 400)."
    }
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "src/api/MailboxesAPI.js",
    "content": "import axios from \"axios\";\n\n/**\n * REST API Resource for interacting with Asterisk mailboxes.\n *\n * *APIs available since Asterisk 12.1*\n */\nexport default class MailboxesAPI {\n  /**\n   * Create an instance of the Mailboxes API client, providing access\n   * to the `/mailboxes` endpoint.\n   *\n   * @param {object} params\n   * @param {string} params.username The username to send with the request.\n   * @param {string} params.password The password to send with the request.\n   * @param {string} params.baseUrl The base url, without trailing slash,\n   *  of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'.\n   */\n  constructor(params) {\n    const { username, password } = params;\n\n    /** @private */\n    this._baseUrl = params.baseUrl;\n\n    /** @private */\n    this._request = axios.create({\n      auth: { username, password },\n    });\n  }\n\n  /**\n   * GET /mailboxes\n   *\n   * List all mailboxes.\n   *\n   * *API available since Asterisk 12.1*\n   *\n   * @returns {Promise.<Array.<Mailbox>>} Resolves with all mailboxes in\n   *  Asterisk.\n   */\n  list() {\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/mailboxes`,\n    });\n  }\n\n  /**\n   * GET /mailboxes/{mailboxName}\n   *\n   * Retrieve the current state of a mailbox.\n   *\n   * *API available since Asterisk 12.1*\n   *\n   * @param {object} params\n   * @param {string} params.mailboxName The name of the mailbox to retrieve\n   *  details of.\n   * @returns {Promise.<Mailbox>} Resolves to the current state of the\n   *  specified mailbox. Rejects if the mailbox cannot be found (status 404).\n   */\n  get(params) {\n    const { mailboxName } = params;\n    const name = encodeURIComponent(mailboxName);\n\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/mailboxes/${name}`,\n    });\n  }\n\n  /**\n   * PUT /mailboxes/{mailboxName}\n   *\n   * Change the state of a mailbox. This will implicitly create the mailbox\n   * if it does not already exist.\n   *\n   * *API available since Asterisk 12.1*\n   *\n   * @param {object} params\n   * @param {string} params.mailboxName The name of the mailbox to update.\n   * @param {number} params.oldMessages The count of old messages in the mailbox.\n   * @param {number} params.newMessages The count of new messages in the mailbox.\n   * @returns {Promise} Resolves if the operation completed successfully.\n   */\n  update(params) {\n    const { mailboxName, oldMessages, newMessages } = params;\n    const name = encodeURIComponent(mailboxName);\n\n    return this._request({\n      method: \"PUT\",\n      url: `${this._baseUrl}/mailboxes/${name}`,\n      params: { oldMessages, newMessages },\n    });\n  }\n\n  /**\n   * DELETE /mailboxes/{mailboxName}\n   *\n   * Destroy the specified mailbox.\n   *\n   * *API available since Asterisk 12.1*\n   *\n   * @param {object} params\n   * @param {string} params.mailboxName The name of the mailbox to destroy.\n   * @returns {Promise} Resolves if the specified mailbox is successfully\n   *  destroyed. Rejets if the specified mailbox cannot be found (status 404).\n   */\n  destroy(params) {\n    const { mailboxName } = params;\n    const name = encodeURIComponent(mailboxName);\n\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/mailboxes/${name}`,\n    });\n  }\n}\n\n/**\n * @typedef {object} Mailbox\n * @property {string} name The name of the mailbox\n * @property {number} new_messages The count of new messages in the mailbox.\n * @property {number} old_messages The count of old messages in the mailbox.\n */\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/src/api/MailboxesAPI.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "class",
    "name": "MailboxesAPI",
    "memberof": "src/api/MailboxesAPI.js",
    "static": true,
    "longname": "src/api/MailboxesAPI.js~MailboxesAPI",
    "access": "public",
    "export": true,
    "importPath": "awry/src/api/MailboxesAPI.js",
    "importStyle": "MailboxesAPI",
    "description": "REST API Resource for interacting with Asterisk mailboxes.\n\n*APIs available since Asterisk 12.1*",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 172,
    "kind": "typedef",
    "name": "Mailbox",
    "memberof": "src/api/MailboxesAPI.js",
    "static": true,
    "longname": "src/api/MailboxesAPI.js~Mailbox",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the mailbox"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "new_messages",
        "description": "The count of new messages in the mailbox."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "old_messages",
        "description": "The count of old messages in the mailbox."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "Mailbox"
    }
  },
  {
    "__docId__": 173,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/api/MailboxesAPI.js~MailboxesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/MailboxesAPI.js~MailboxesAPI#constructor",
    "access": "public",
    "description": "Create an instance of the Mailboxes API client, providing access\nto the `/mailboxes` endpoint.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.username",
        "description": "The username to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.password",
        "description": "The password to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.baseUrl",
        "description": "The base url, without trailing slash,\n of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'."
      }
    ]
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "_baseUrl",
    "memberof": "src/api/MailboxesAPI.js~MailboxesAPI",
    "static": false,
    "longname": "src/api/MailboxesAPI.js~MailboxesAPI#_baseUrl",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "_request",
    "memberof": "src/api/MailboxesAPI.js~MailboxesAPI",
    "static": false,
    "longname": "src/api/MailboxesAPI.js~MailboxesAPI#_request",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "list",
    "memberof": "src/api/MailboxesAPI.js~MailboxesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/MailboxesAPI.js~MailboxesAPI#list",
    "access": "public",
    "description": "GET /mailboxes\n\nList all mailboxes.\n\n*API available since Asterisk 12.1*",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Array.<Mailbox>>} Resolves with all mailboxes in\n Asterisk."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Array.<Mailbox>>"
      ],
      "spread": false,
      "description": "Resolves with all mailboxes in\n Asterisk."
    },
    "params": []
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "get",
    "memberof": "src/api/MailboxesAPI.js~MailboxesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/MailboxesAPI.js~MailboxesAPI#get",
    "access": "public",
    "description": "GET /mailboxes/{mailboxName}\n\nRetrieve the current state of a mailbox.\n\n*API available since Asterisk 12.1*",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Mailbox>} Resolves to the current state of the\n specified mailbox. Rejects if the mailbox cannot be found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.mailboxName",
        "description": "The name of the mailbox to retrieve\n details of."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Mailbox>"
      ],
      "spread": false,
      "description": "Resolves to the current state of the\n specified mailbox. Rejects if the mailbox cannot be found (status 404)."
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "update",
    "memberof": "src/api/MailboxesAPI.js~MailboxesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/MailboxesAPI.js~MailboxesAPI#update",
    "access": "public",
    "description": "PUT /mailboxes/{mailboxName}\n\nChange the state of a mailbox. This will implicitly create the mailbox\nif it does not already exist.\n\n*API available since Asterisk 12.1*",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves if the operation completed successfully."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.mailboxName",
        "description": "The name of the mailbox to update."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.oldMessages",
        "description": "The count of old messages in the mailbox."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "params.newMessages",
        "description": "The count of new messages in the mailbox."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the operation completed successfully."
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/api/MailboxesAPI.js~MailboxesAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/MailboxesAPI.js~MailboxesAPI#destroy",
    "access": "public",
    "description": "DELETE /mailboxes/{mailboxName}\n\nDestroy the specified mailbox.\n\n*API available since Asterisk 12.1*",
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves if the specified mailbox is successfully\n destroyed. Rejets if the specified mailbox cannot be found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.mailboxName",
        "description": "The name of the mailbox to destroy."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the specified mailbox is successfully\n destroyed. Rejets if the specified mailbox cannot be found (status 404)."
    }
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/api/PlaybacksAPI.js",
    "content": "import axios from \"axios\";\n\n/**\n * REST API Resource for interacting with Asterisk playbacks.\n */\nexport default class PlaybacksAPI {\n  /**\n   * Create an instance of the Playbacks API client, providing access\n   * to the `/playbacks` endpoint.\n   *\n   * @param {object} params\n   * @param {string} params.username The username to send with the request.\n   * @param {string} params.password The password to send with the request.\n   * @param {string} params.baseUrl The base url, without trailing slash,\n   *  of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'.\n   */\n  constructor(params) {\n    const { username, password } = params;\n\n    /** @private */\n    this._baseUrl = params.baseUrl;\n\n    /** @private */\n    this._request = axios.create({\n      auth: { username, password },\n    });\n  }\n\n  /**\n   * GET /playbacks/{playbackId}\n   *\n   * Retrieve a playback's details.\n   *\n   * @param {object} params\n   * @param {string} params.playbackId the unique identifier of the playback\n   *  to retrieve details of.\n   * @returns {Promise.<Playback>} Resolves with the details of the specified\n   *  playback. Rejects if the playback cannot be found (status 404).\n   */\n  get(params) {\n    const { playbackId } = params;\n    const id = encodeURIComponent(playbackId);\n\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/playbacks/${id}`,\n    });\n  }\n\n  /**\n   * DELETE /playbacks/{playbackId}\n   *\n   * Stop a playback.\n   *\n   * @param {object} params\n   * @param {string} params.playbackId The unique identifier of the playback\n   *  to stop playback of.\n   * @returns {Promise} Resolves when the playback is successfully\n   *  stopped. Rejects if the specified playback cannot be found (status 404).\n   */\n  stop(params) {\n    const { playbackId } = params;\n    const id = encodeURIComponent(playbackId);\n\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/playbacks/${id}`,\n    });\n  }\n\n  /**\n   * POST /playbacks/{playbackId}/control\n   *\n   * Perform an operation on the specified playback.\n   *\n   * @param {object} params\n   * @param {string} params.playbackId The unique identifier of the playback\n   *  to perform an operation on.\n   * @param {string} params.operation The operation to perform on the playback.\n   *  Allowed values: 'restart', 'pause', 'unpause', 'reverse', 'forward'\n   * @returns {Promise} Resolves when the operation is completedly successfully.\n   *  Rejects if the provided operation parameter is invalid (status 400), the\n   *  specified playback cannot be found (status 404), or when the operation\n   *  cannot be performed on the playback in it's current state (status 409).\n   */\n  control(params) {\n    const { playbackId, operation } = params;\n    const id = encodeURIComponent(playbackId);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/playbacks/${id}/control`,\n      params: { operation },\n    });\n  }\n}\n\n/**\n * @typedef {object} Playback\n * @property {string} id The unique identifier for this playback operation.\n * @property {string} [language] The language requested for playback. Applicable for media types that support multiple languages.\n * @property {string} media_uri The URI for the media to play back.\n * @property {string} state The current state of the playback operation.\n * @property {string} target_uri The URI for the channel or bridge to play the media on.\n * @property {string} next_media_uri The next media URI in the list to be played back to the resource. *Property available since Asterisk 14.0*\n */\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/src/api/PlaybacksAPI.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "class",
    "name": "PlaybacksAPI",
    "memberof": "src/api/PlaybacksAPI.js",
    "static": true,
    "longname": "src/api/PlaybacksAPI.js~PlaybacksAPI",
    "access": "public",
    "export": true,
    "importPath": "awry/src/api/PlaybacksAPI.js",
    "importStyle": "PlaybacksAPI",
    "description": "REST API Resource for interacting with Asterisk playbacks.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 182,
    "kind": "typedef",
    "name": "Playback",
    "memberof": "src/api/PlaybacksAPI.js",
    "static": true,
    "longname": "src/api/PlaybacksAPI.js~Playback",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The unique identifier for this playback operation."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "language",
        "description": "The language requested for playback. Applicable for media types that support multiple languages."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "media_uri",
        "description": "The URI for the media to play back."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The current state of the playback operation."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target_uri",
        "description": "The URI for the channel or bridge to play the media on."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "next_media_uri",
        "description": "The next media URI in the list to be played back to the resource. *Property available since Asterisk 14.0*"
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "Playback"
    }
  },
  {
    "__docId__": 183,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/api/PlaybacksAPI.js~PlaybacksAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/PlaybacksAPI.js~PlaybacksAPI#constructor",
    "access": "public",
    "description": "Create an instance of the Playbacks API client, providing access\nto the `/playbacks` endpoint.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.username",
        "description": "The username to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.password",
        "description": "The password to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.baseUrl",
        "description": "The base url, without trailing slash,\n of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'."
      }
    ]
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "_baseUrl",
    "memberof": "src/api/PlaybacksAPI.js~PlaybacksAPI",
    "static": false,
    "longname": "src/api/PlaybacksAPI.js~PlaybacksAPI#_baseUrl",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "_request",
    "memberof": "src/api/PlaybacksAPI.js~PlaybacksAPI",
    "static": false,
    "longname": "src/api/PlaybacksAPI.js~PlaybacksAPI#_request",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "get",
    "memberof": "src/api/PlaybacksAPI.js~PlaybacksAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/PlaybacksAPI.js~PlaybacksAPI#get",
    "access": "public",
    "description": "GET /playbacks/{playbackId}\n\nRetrieve a playback's details.",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Playback>} Resolves with the details of the specified\n playback. Rejects if the playback cannot be found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.playbackId",
        "description": "the unique identifier of the playback\n to retrieve details of."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Playback>"
      ],
      "spread": false,
      "description": "Resolves with the details of the specified\n playback. Rejects if the playback cannot be found (status 404)."
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "stop",
    "memberof": "src/api/PlaybacksAPI.js~PlaybacksAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/PlaybacksAPI.js~PlaybacksAPI#stop",
    "access": "public",
    "description": "DELETE /playbacks/{playbackId}\n\nStop a playback.",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the playback is successfully\n stopped. Rejects if the specified playback cannot be found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.playbackId",
        "description": "The unique identifier of the playback\n to stop playback of."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the playback is successfully\n stopped. Rejects if the specified playback cannot be found (status 404)."
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "control",
    "memberof": "src/api/PlaybacksAPI.js~PlaybacksAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/PlaybacksAPI.js~PlaybacksAPI#control",
    "access": "public",
    "description": "POST /playbacks/{playbackId}/control\n\nPerform an operation on the specified playback.",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the operation is completedly successfully.\n Rejects if the provided operation parameter is invalid (status 400), the\n specified playback cannot be found (status 404), or when the operation\n cannot be performed on the playback in it's current state (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.playbackId",
        "description": "The unique identifier of the playback\n to perform an operation on."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.operation",
        "description": "The operation to perform on the playback.\n Allowed values: 'restart', 'pause', 'unpause', 'reverse', 'forward'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the operation is completedly successfully.\n Rejects if the provided operation parameter is invalid (status 400), the\n specified playback cannot be found (status 404), or when the operation\n cannot be performed on the playback in it's current state (status 409)."
    }
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "src/api/RecordingsAPI.js",
    "content": "import axios from \"axios\";\n\n/**\n * REST API Resource for interacting with both live and stored recordings.\n */\nexport default class RecordingsAPI {\n  /**\n   * Create an instance of the Recordings API client, providing access\n   * to the `/recordings` endpoint.\n   *\n   * @param {object} params\n   * @param {string} params.username The username to send with the request.\n   * @param {string} params.password The password to send with the request.\n   * @param {string} params.baseUrl The base url, without trailing slash,\n   *  of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'.\n   */\n  constructor(params) {\n    const { username, password } = params;\n\n    /** @private */\n    this._baseUrl = params.baseUrl;\n\n    /** @private */\n    this._request = axios.create({\n      auth: { username, password },\n    });\n  }\n\n  /**\n   * GET /recordings/stored\n   *\n   * List all completed recordings.\n   *\n   * @returns {Promise.<Array.<StoredRecording>>}\n   */\n  listStored() {\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/recordings/stored`,\n    });\n  }\n\n  /**\n   * GET /recordings/stored/{recordingName}\n   *\n   * Retrieve the details of a specific stored recording.\n   *\n   * @param {object} params\n   * @param {string} params.recordingName The case-sensitive name of the\n   *  recording to retrieve details about.\n   * @returns {Promise.<StoredRecording>} Resolves if the recording is sucessfully\n   *  retrieved. Rejects if the specified  recording cannot be found (status 404).\n   */\n  getStored(params) {\n    const { recordingName } = params;\n    const name = encodeURIComponent(recordingName);\n\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/recordings/stored/${name}`,\n    });\n  }\n\n  /**\n   * DELETE /recordings/stored/{recordingName}\n   *\n   * Destroy the specified stored recording.\n   *\n   * @param {object} params\n   * @param {string} params.recordingName The case-sensitive name of the\n   *  recording to destroy.\n   * @returns {Promise} Resolves when the specified recording is destroyed.\n   *  Rejects if the specified recording cannot be found (status 404).\n   */\n  destroyStored(params) {\n    const { recordingName } = params;\n    const name = encodeURIComponent(recordingName);\n\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/recordings/stored/${name}`,\n    });\n  }\n\n  /**\n   * GET /recordings/stored/{recordingName}/file\n   *\n   * Retrieve the file associated with the stored recording.\n   *\n   * *API available since Asterisk 14.0*\n   *\n   * @param {object} params\n   * @param {string} params.recordingName\n   * @returns {Promise.<Buffer>} Resolves with the content of the stored\n   *  recording. Rejects when the recording file could not be opened\n   *  (status 403) or when the recording cannot be found (status 404).\n   */\n  getStoredFile(params) {\n    const { recordingName } = params;\n    const name = encodeURIComponent(recordingName);\n\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/recordings/stored/${name}/file`,\n    });\n  }\n\n  /**\n   * POST /recordings/stored/{recordingName}/copy\n   *\n   * Create a copy of the specified stored recording.\n   *\n   * *API available since Asterisk 12.5*\n   *\n   * @param {object} params\n   * @param {string} params.recordingName The case-sensitive name of the\n   *  recording to create a copy of.\n   * @param {string} params.destinationRecordingName The name for the new copy\n   *  of the recording.\n   * @returns {Promise.<StoredRecording>} Resolves with the newly copied\n   *  recording when successful. Rejects if the specified recording cannot\n   *  be found (status 404) or if a recording of the same name already exists\n   *  on the system (status 409).\n   */\n  copyStored(params) {\n    const { recordingName, destinationRecordingName } = params;\n    const name = encodeURIComponent(recordingName);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/recordings/stored/${name}/copy`,\n      params: { destinationRecordingName },\n    });\n  }\n\n  /**\n   * GET /recordings/live/{recordingName}\n   *\n   * Retrieve the details of the specified live recording.\n   *\n   * @param {object} params\n   * @param {string} params.recordingName The case-sensitive name of the\n   *  live recording to retrieve details about.\n   * @returns {Promise.<LiveRecording>} Resolves with the specified live\n   *  recording details. Rejects if the live recording cannot be found\n   *  (status 404).\n   */\n  getLive(params) {\n    const { recordingName } = params;\n    const name = encodeURIComponent(recordingName);\n\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/recordings/live/${name}`,\n    });\n  }\n\n  /**\n   * DELETE /recordings/live/{recordingName}\n   *\n   * Stop the specified live recording and discard it.\n   *\n   * @param {object} params\n   * @param {string} params.recordingName The case-sensitive name of the\n   *  live recording to act upon.\n   * @returns {Promise} Resolves if the recording is successfully cancelled.\n   *  Rejects if the recording cannot be found (status 404).\n   */\n  cancel(params) {\n    const { recordingName } = params;\n    const name = encodeURIComponent(recordingName);\n\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/recordings/live/${name}`,\n    });\n  }\n\n  /**\n   * POST /recordings/live/{recordingName}/stop\n   *\n   * Stop the specified live recording and store it.\n   *\n   * @param {object} params\n   * @param {string} params.recordingName The case-sensitive name of the\n   *  live recording to act upon.\n   * @returns {Promise} Resolves if the recording is successfully stopped.\n   *  Rejects if the recording cannot be found (status 404).\n   */\n  stop(params) {\n    const { recordingName } = params;\n    const name = encodeURIComponent(recordingName);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/recordings/live/${name}/stop`,\n    });\n  }\n\n  /**\n   * POST /recordings/live/{recordingName}/pause\n   *\n   * Pause the specified live recording. Pausing a recording suspends silence\n   * detection, which will be restarted when the recording is unpaused. Paused\n   * time is not included in the accounting for maxDurationSeconds.\n   *\n   * @param {object} params\n   * @param {string} params.recordingName The case-sensitive name of the\n   *  live recording to act upon.\n   * @returns {Promise} Resolves if the recording is successfully paused.\n   *  Rejects if the recording cannot be found (status 404) or if the specified\n   *  recording is not in session. TODO: what does \"not in session\" mean?\n   */\n  pause(params) {\n    const { recordingName } = params;\n    const name = encodeURIComponent(recordingName);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/recordings/live/${name}/pause`,\n    });\n  }\n\n  /**\n   * DELETE /recordings/live/{recordingName}/pause\n   *\n   * Unpause the specified live recording.\n   *\n   * @param {object} params\n   * @param {string} params.recordingName The case-sensitive name of the\n   *  live recording to act upon.\n   * @returns {Promise} Resolves if the recording is successfully unpaused.\n   *  Rejects if the recording cannot be found (status 404) or if the specified\n   *  recording is not in session. TODO: what does \"not in session\" mean?\n   */\n  unpause(params) {\n    const { recordingName } = params;\n    const name = encodeURIComponent(recordingName);\n\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/recordings/live/${name}/pause`,\n    });\n  }\n\n  /**\n   * POST /recordings/live/{recordingName}/mute\n   *\n   * Mute the specified live recording. Muting a recording suspends silence\n   * detection, which will be restarted when the recording is unmuted.\n   *\n   * @param {object} params\n   * @param {string} params.recordingName The case-sensitive name of the\n   *  live recording to act upon.\n   * @returns {Promise} Resolves if the recording is successfully muted.\n   *  Rejects if the recording cannot be found (status 404) or if the specified\n   *  recording is not in session. TODO: what does \"not in session\" mean?\n   */\n  mute(params) {\n    const { recordingName } = params;\n    const name = encodeURIComponent(recordingName);\n\n    return this._request({\n      method: \"POST\",\n      url: `${this._baseUrl}/recordings/live/${name}/mute`,\n    });\n  }\n\n  /**\n   * DELETE /recordings/live/{recordingName}/mute\n   *\n   * Unmute the specified live recording.\n   *\n   * @param {object} params\n   * @param {string} params.recordingName The case-sensitive name of the\n   *  live recording to act upon.\n   * @returns {Promise} Resolves if the recording is successfully unmuted.\n   *  Rejects if the recording cannot be found (status 404) or if the specified\n   *  recording is not in session. TODO: what does \"not in session\" mean?\n   */\n  unmute(params) {\n    const { recordingName } = params;\n    const name = encodeURIComponent(recordingName);\n\n    return this._request({\n      method: \"DELETE\",\n      url: `${this._baseUrl}/recordings/live/${name}/mute`,\n    });\n  }\n}\n\n/**\n * A past recording that may be played back.\n *\n * @typedef {object} StoredRecording\n * @property {string} format The format of the stored recording.\n * @property {string} name The name of the stored recording.\n */\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/src/api/RecordingsAPI.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "class",
    "name": "RecordingsAPI",
    "memberof": "src/api/RecordingsAPI.js",
    "static": true,
    "longname": "src/api/RecordingsAPI.js~RecordingsAPI",
    "access": "public",
    "export": true,
    "importPath": "awry/src/api/RecordingsAPI.js",
    "importStyle": "RecordingsAPI",
    "description": "REST API Resource for interacting with both live and stored recordings.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 191,
    "kind": "typedef",
    "name": "StoredRecording",
    "memberof": "src/api/RecordingsAPI.js",
    "static": true,
    "longname": "src/api/RecordingsAPI.js~StoredRecording",
    "access": "public",
    "description": "A past recording that may be played back.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "The format of the stored recording."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the stored recording."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "StoredRecording"
    }
  },
  {
    "__docId__": 192,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/api/RecordingsAPI.js~RecordingsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/RecordingsAPI.js~RecordingsAPI#constructor",
    "access": "public",
    "description": "Create an instance of the Recordings API client, providing access\nto the `/recordings` endpoint.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.username",
        "description": "The username to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.password",
        "description": "The password to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.baseUrl",
        "description": "The base url, without trailing slash,\n of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'."
      }
    ]
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "_baseUrl",
    "memberof": "src/api/RecordingsAPI.js~RecordingsAPI",
    "static": false,
    "longname": "src/api/RecordingsAPI.js~RecordingsAPI#_baseUrl",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "_request",
    "memberof": "src/api/RecordingsAPI.js~RecordingsAPI",
    "static": false,
    "longname": "src/api/RecordingsAPI.js~RecordingsAPI#_request",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "listStored",
    "memberof": "src/api/RecordingsAPI.js~RecordingsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/RecordingsAPI.js~RecordingsAPI#listStored",
    "access": "public",
    "description": "GET /recordings/stored\n\nList all completed recordings.",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Array.<StoredRecording>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Array.<StoredRecording>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "getStored",
    "memberof": "src/api/RecordingsAPI.js~RecordingsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/RecordingsAPI.js~RecordingsAPI#getStored",
    "access": "public",
    "description": "GET /recordings/stored/{recordingName}\n\nRetrieve the details of a specific stored recording.",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<StoredRecording>} Resolves if the recording is sucessfully\n retrieved. Rejects if the specified  recording cannot be found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.recordingName",
        "description": "The case-sensitive name of the\n recording to retrieve details about."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<StoredRecording>"
      ],
      "spread": false,
      "description": "Resolves if the recording is sucessfully\n retrieved. Rejects if the specified  recording cannot be found (status 404)."
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "destroyStored",
    "memberof": "src/api/RecordingsAPI.js~RecordingsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/RecordingsAPI.js~RecordingsAPI#destroyStored",
    "access": "public",
    "description": "DELETE /recordings/stored/{recordingName}\n\nDestroy the specified stored recording.",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the specified recording is destroyed.\n Rejects if the specified recording cannot be found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.recordingName",
        "description": "The case-sensitive name of the\n recording to destroy."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the specified recording is destroyed.\n Rejects if the specified recording cannot be found (status 404)."
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "getStoredFile",
    "memberof": "src/api/RecordingsAPI.js~RecordingsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/RecordingsAPI.js~RecordingsAPI#getStoredFile",
    "access": "public",
    "description": "GET /recordings/stored/{recordingName}/file\n\nRetrieve the file associated with the stored recording.\n\n*API available since Asterisk 14.0*",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Buffer>} Resolves with the content of the stored\n recording. Rejects when the recording file could not be opened\n (status 403) or when the recording cannot be found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.recordingName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Buffer>"
      ],
      "spread": false,
      "description": "Resolves with the content of the stored\n recording. Rejects when the recording file could not be opened\n (status 403) or when the recording cannot be found (status 404)."
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "copyStored",
    "memberof": "src/api/RecordingsAPI.js~RecordingsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/RecordingsAPI.js~RecordingsAPI#copyStored",
    "access": "public",
    "description": "POST /recordings/stored/{recordingName}/copy\n\nCreate a copy of the specified stored recording.\n\n*API available since Asterisk 12.5*",
    "lineNumber": 125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<StoredRecording>} Resolves with the newly copied\n recording when successful. Rejects if the specified recording cannot\n be found (status 404) or if a recording of the same name already exists\n on the system (status 409)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.recordingName",
        "description": "The case-sensitive name of the\n recording to create a copy of."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.destinationRecordingName",
        "description": "The name for the new copy\n of the recording."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<StoredRecording>"
      ],
      "spread": false,
      "description": "Resolves with the newly copied\n recording when successful. Rejects if the specified recording cannot\n be found (status 404) or if a recording of the same name already exists\n on the system (status 409)."
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "getLive",
    "memberof": "src/api/RecordingsAPI.js~RecordingsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/RecordingsAPI.js~RecordingsAPI#getLive",
    "access": "public",
    "description": "GET /recordings/live/{recordingName}\n\nRetrieve the details of the specified live recording.",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<LiveRecording>} Resolves with the specified live\n recording details. Rejects if the live recording cannot be found\n (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.recordingName",
        "description": "The case-sensitive name of the\n live recording to retrieve details about."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<LiveRecording>"
      ],
      "spread": false,
      "description": "Resolves with the specified live\n recording details. Rejects if the live recording cannot be found\n (status 404)."
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "cancel",
    "memberof": "src/api/RecordingsAPI.js~RecordingsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/RecordingsAPI.js~RecordingsAPI#cancel",
    "access": "public",
    "description": "DELETE /recordings/live/{recordingName}\n\nStop the specified live recording and discard it.",
    "lineNumber": 169,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves if the recording is successfully cancelled.\n Rejects if the recording cannot be found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.recordingName",
        "description": "The case-sensitive name of the\n live recording to act upon."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the recording is successfully cancelled.\n Rejects if the recording cannot be found (status 404)."
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "stop",
    "memberof": "src/api/RecordingsAPI.js~RecordingsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/RecordingsAPI.js~RecordingsAPI#stop",
    "access": "public",
    "description": "POST /recordings/live/{recordingName}/stop\n\nStop the specified live recording and store it.",
    "lineNumber": 190,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves if the recording is successfully stopped.\n Rejects if the recording cannot be found (status 404)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.recordingName",
        "description": "The case-sensitive name of the\n live recording to act upon."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the recording is successfully stopped.\n Rejects if the recording cannot be found (status 404)."
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "pause",
    "memberof": "src/api/RecordingsAPI.js~RecordingsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/RecordingsAPI.js~RecordingsAPI#pause",
    "access": "public",
    "description": "POST /recordings/live/{recordingName}/pause\n\nPause the specified live recording. Pausing a recording suspends silence\ndetection, which will be restarted when the recording is unpaused. Paused\ntime is not included in the accounting for maxDurationSeconds.",
    "lineNumber": 214,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves if the recording is successfully paused.\n Rejects if the recording cannot be found (status 404) or if the specified\n recording is not in session. TODO: what does \"not in session\" mean?"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.recordingName",
        "description": "The case-sensitive name of the\n live recording to act upon."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the recording is successfully paused.\n Rejects if the recording cannot be found (status 404) or if the specified\n recording is not in session. TODO: what does \"not in session\" mean?"
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "unpause",
    "memberof": "src/api/RecordingsAPI.js~RecordingsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/RecordingsAPI.js~RecordingsAPI#unpause",
    "access": "public",
    "description": "DELETE /recordings/live/{recordingName}/pause\n\nUnpause the specified live recording.",
    "lineNumber": 236,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves if the recording is successfully unpaused.\n Rejects if the recording cannot be found (status 404) or if the specified\n recording is not in session. TODO: what does \"not in session\" mean?"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.recordingName",
        "description": "The case-sensitive name of the\n live recording to act upon."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the recording is successfully unpaused.\n Rejects if the recording cannot be found (status 404) or if the specified\n recording is not in session. TODO: what does \"not in session\" mean?"
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "mute",
    "memberof": "src/api/RecordingsAPI.js~RecordingsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/RecordingsAPI.js~RecordingsAPI#mute",
    "access": "public",
    "description": "POST /recordings/live/{recordingName}/mute\n\nMute the specified live recording. Muting a recording suspends silence\ndetection, which will be restarted when the recording is unmuted.",
    "lineNumber": 259,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves if the recording is successfully muted.\n Rejects if the recording cannot be found (status 404) or if the specified\n recording is not in session. TODO: what does \"not in session\" mean?"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.recordingName",
        "description": "The case-sensitive name of the\n live recording to act upon."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the recording is successfully muted.\n Rejects if the recording cannot be found (status 404) or if the specified\n recording is not in session. TODO: what does \"not in session\" mean?"
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "unmute",
    "memberof": "src/api/RecordingsAPI.js~RecordingsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/RecordingsAPI.js~RecordingsAPI#unmute",
    "access": "public",
    "description": "DELETE /recordings/live/{recordingName}/mute\n\nUnmute the specified live recording.",
    "lineNumber": 281,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves if the recording is successfully unmuted.\n Rejects if the recording cannot be found (status 404) or if the specified\n recording is not in session. TODO: what does \"not in session\" mean?"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.recordingName",
        "description": "The case-sensitive name of the\n live recording to act upon."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves if the recording is successfully unmuted.\n Rejects if the recording cannot be found (status 404) or if the specified\n recording is not in session. TODO: what does \"not in session\" mean?"
    }
  },
  {
    "__docId__": 207,
    "kind": "file",
    "name": "src/api/SoundsAPI.js",
    "content": "import axios from \"axios\";\n\n/**\n * REST API Resource for interacting with Asterisk sounds.\n */\nexport default class SoundsAPI {\n  /**\n   * Create an instance of the Sounds API client, providing access\n   * to the `/sounds` endpoint.\n   *\n   * @param {object} params\n   * @param {string} params.username The username to send with the request.\n   * @param {string} params.password The password to send with the request.\n   * @param {string} params.baseUrl The base url, without trailing slash,\n   *  of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'.\n   */\n  constructor(params) {\n    const { username, password } = params;\n\n    /** @private */\n    this._baseUrl = params.baseUrl;\n\n    /** @private */\n    this._request = axios.create({\n      auth: { username, password },\n    });\n  }\n\n  /**\n   * GET /sounds\n   *\n   * List all the sounds in Asterisk.\n   *\n   * @param {object} params\n   * @param {string} [params.lang] Retrieve sounds in a specific language.\n   * @param {string} [params.format] Retrieve sounds in a specific format.\n   * @returns {Promise.<Array.<Sound>>} Resolves when the request completes\n   *  successfully.\n   */\n  list(params = {}) {\n    const { lang, format } = params;\n\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/sounds`,\n      params: { lang, format },\n    });\n  }\n\n  /**\n   * GET /sounds/{soundId}\n   *\n   * Retrieve the details about a specific sound.\n   *\n   * @param {object} params\n   * @param {string} params.soundId The sound's unique id.\n   * @returns {Promise.<Sound>} Resolves when the request completes\n   *  successfully.\n   */\n  get(params) {\n    const { soundId } = params;\n    const id = encodeURIComponent(soundId);\n\n    return this._request({\n      method: \"GET\",\n      url: `${this._baseUrl}/sounds/${id}`,\n    });\n  }\n}\n\n/**\n * A media file that may be played back.\n *\n * @typedef {object} Sound\n * @property {Array.<FormatLangPair>} formats The formats and languages in\n *  which the sound is available.\n * @property {string} id The sound's identifier\n * @property {string} [text] The text description of the sound, usually\n *  indicating the words spoken.\n *\n */\n\n/**\n * Identifies the format and language of a sound file.\n *\n * @typedef {object} FormatLangPair\n * @property {string} format\n * @property {string} language\n */\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/src/api/SoundsAPI.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 208,
    "kind": "class",
    "name": "SoundsAPI",
    "memberof": "src/api/SoundsAPI.js",
    "static": true,
    "longname": "src/api/SoundsAPI.js~SoundsAPI",
    "access": "public",
    "export": true,
    "importPath": "awry/src/api/SoundsAPI.js",
    "importStyle": "SoundsAPI",
    "description": "REST API Resource for interacting with Asterisk sounds.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 209,
    "kind": "typedef",
    "name": "Sound",
    "memberof": "src/api/SoundsAPI.js",
    "static": true,
    "longname": "src/api/SoundsAPI.js~Sound",
    "access": "public",
    "description": "A media file that may be played back.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array.<FormatLangPair>"
        ],
        "spread": false,
        "optional": false,
        "name": "formats",
        "description": "The formats and languages in\n which the sound is available."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The sound's identifier"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "text",
        "description": "The text description of the sound, usually\n indicating the words spoken."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "Sound"
    }
  },
  {
    "__docId__": 210,
    "kind": "typedef",
    "name": "FormatLangPair",
    "memberof": "src/api/SoundsAPI.js",
    "static": true,
    "longname": "src/api/SoundsAPI.js~FormatLangPair",
    "access": "public",
    "description": "Identifies the format and language of a sound file.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "language",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "FormatLangPair"
    }
  },
  {
    "__docId__": 211,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/api/SoundsAPI.js~SoundsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/SoundsAPI.js~SoundsAPI#constructor",
    "access": "public",
    "description": "Create an instance of the Sounds API client, providing access\nto the `/sounds` endpoint.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.username",
        "description": "The username to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.password",
        "description": "The password to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.baseUrl",
        "description": "The base url, without trailing slash,\n of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'."
      }
    ]
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "_baseUrl",
    "memberof": "src/api/SoundsAPI.js~SoundsAPI",
    "static": false,
    "longname": "src/api/SoundsAPI.js~SoundsAPI#_baseUrl",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "_request",
    "memberof": "src/api/SoundsAPI.js~SoundsAPI",
    "static": false,
    "longname": "src/api/SoundsAPI.js~SoundsAPI#_request",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "list",
    "memberof": "src/api/SoundsAPI.js~SoundsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/SoundsAPI.js~SoundsAPI#list",
    "access": "public",
    "description": "GET /sounds\n\nList all the sounds in Asterisk.",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Array.<Sound>>} Resolves when the request completes\n successfully."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.lang",
        "description": "Retrieve sounds in a specific language."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "params.format",
        "description": "Retrieve sounds in a specific format."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Array.<Sound>>"
      ],
      "spread": false,
      "description": "Resolves when the request completes\n successfully."
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "get",
    "memberof": "src/api/SoundsAPI.js~SoundsAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/SoundsAPI.js~SoundsAPI#get",
    "access": "public",
    "description": "GET /sounds/{soundId}\n\nRetrieve the details about a specific sound.",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Sound>} Resolves when the request completes\n successfully."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.soundId",
        "description": "The sound's unique id."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Sound>"
      ],
      "spread": false,
      "description": "Resolves when the request completes\n successfully."
    }
  },
  {
    "__docId__": 216,
    "kind": "file",
    "name": "src/api/index.js",
    "content": "import ApplicationsAPI from \"./ApplicationsAPI\";\nimport AsteriskAPI from \"./AsteriskAPI\";\nimport BridgesAPI from \"./BridgesAPI\";\nimport DeviceStatesAPI from \"./DeviceStatesAPI\";\nimport EndpointsAPI from \"./EndpointsAPI\";\nimport EventsAPI from \"./EventsAPI\";\nimport MailboxesAPI from \"./MailboxesAPI\";\nimport PlaybacksAPI from \"./PlaybacksAPI\";\nimport RecordingsAPI from \"./RecordingsAPI\";\nimport SoundsAPI from \"./SoundsAPI\";\nimport ChannelsAPI from \"./ChannelsAPI\";\n\n/**\n * Client for interacting with the Asterisk Rest Interface.\n */\nexport default class API {\n  /**\n   * Creates a new awry API instance, providing clients for all available\n   * Asterisk ARI endpoints.\n   *\n   * @param {object} params\n   * @param {string} params.username The username to send with the request.\n   * @param {string} params.password The password to send with the request.\n   * @param {string} params.baseUrl The base url, without trailing slash,\n   *  of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'.\n   */\n  constructor(params) {\n    /** @type {ApplicationsAPI} */\n    this.applications = new ApplicationsAPI(params);\n\n    /** @type {AsteriskAPI} */\n    this.asterisk = new AsteriskAPI(params);\n\n    /** @type {BridgesAPI} */\n    this.bridges = new BridgesAPI(params);\n\n    /** @type {DeviceStatesAPI} */\n    this.deviceStates = new DeviceStatesAPI(params);\n\n    /** @type {EndpointsAPI} */\n    this.endpoints = new EndpointsAPI(params);\n\n    /** @type {EventsAPI} */\n    this.events = new EventsAPI(params);\n\n    /** @type {MailboxesAPI} */\n    this.mailboxes = new MailboxesAPI(params);\n\n    /** @type {PlaybacksAPI} */\n    this.playbacks = new PlaybacksAPI(params);\n\n    /** @type {RecordingsAPI} */\n    this.recordings = new RecordingsAPI(params);\n\n    /** @type {SoundsAPI} */\n    this.sounds = new SoundsAPI(params);\n\n    /** @type {ChannelsAPI} */\n    this.channels = new ChannelsAPI(params);\n  }\n}\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/src/api/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 217,
    "kind": "class",
    "name": "API",
    "memberof": "src/api/index.js",
    "static": true,
    "longname": "src/api/index.js~API",
    "access": "public",
    "export": true,
    "importPath": "awry/src/api/index.js",
    "importStyle": "API",
    "description": "Client for interacting with the Asterisk Rest Interface.",
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 218,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/api/index.js~API",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/api/index.js~API#constructor",
    "access": "public",
    "description": "Creates a new awry API instance, providing clients for all available\nAsterisk ARI endpoints.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.username",
        "description": "The username to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.password",
        "description": "The password to send with the request."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.baseUrl",
        "description": "The base url, without trailing slash,\n of the root Asterisk ARI endpoint. i.e. 'http://myserver.local:8088/ari'."
      }
    ]
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "applications",
    "memberof": "src/api/index.js~API",
    "static": false,
    "longname": "src/api/index.js~API#applications",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "ApplicationsAPI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "asterisk",
    "memberof": "src/api/index.js~API",
    "static": false,
    "longname": "src/api/index.js~API#asterisk",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "AsteriskAPI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "bridges",
    "memberof": "src/api/index.js~API",
    "static": false,
    "longname": "src/api/index.js~API#bridges",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "BridgesAPI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "deviceStates",
    "memberof": "src/api/index.js~API",
    "static": false,
    "longname": "src/api/index.js~API#deviceStates",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "DeviceStatesAPI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "endpoints",
    "memberof": "src/api/index.js~API",
    "static": false,
    "longname": "src/api/index.js~API#endpoints",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "EndpointsAPI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "events",
    "memberof": "src/api/index.js~API",
    "static": false,
    "longname": "src/api/index.js~API#events",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "EventsAPI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "mailboxes",
    "memberof": "src/api/index.js~API",
    "static": false,
    "longname": "src/api/index.js~API#mailboxes",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "MailboxesAPI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 226,
    "kind": "member",
    "name": "playbacks",
    "memberof": "src/api/index.js~API",
    "static": false,
    "longname": "src/api/index.js~API#playbacks",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "PlaybacksAPI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 227,
    "kind": "member",
    "name": "recordings",
    "memberof": "src/api/index.js~API",
    "static": false,
    "longname": "src/api/index.js~API#recordings",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "RecordingsAPI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 228,
    "kind": "member",
    "name": "sounds",
    "memberof": "src/api/index.js~API",
    "static": false,
    "longname": "src/api/index.js~API#sounds",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "SoundsAPI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "channels",
    "memberof": "src/api/index.js~API",
    "static": false,
    "longname": "src/api/index.js~API#channels",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "ChannelsAPI"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 230,
    "kind": "file",
    "name": "src/events/ARIWebSocket.js",
    "content": "import ReconnectingWebSocket from \"./ReconnectingWebSocket\";\nimport debugModule from \"debug\";\nconst debug = debugModule(\"awry:ARIWebSocket\");\n\n/**\n * Convenience wrapper around {@link ReconnectingWebSocket}\n */\nexport default class ARIWebSocket extends ReconnectingWebSocket {\n  /**\n   * Wrapper around the {@link ReconnectingWebSocket}'s `emit` method to provide\n   * automatic JSON parsing of 'message' events, falling back to the original\n   * payload if it cannot be parsed.\n   *\n   * @param {...*} args The original arguments passed\n   */\n  emit(...args) {\n    const eventIsMessage = args[0] === \"message\";\n    const payloadIsString = args[1] && typeof args[1] === \"string\";\n\n    if (!eventIsMessage || !payloadIsString) {\n      super.emit(...args);\n      return;\n    }\n\n    try {\n      args[1] = JSON.parse(args[1]);\n    } catch (e) {\n      debug(\"error parsing data as JSON\", `'${args[1]}'`, e);\n    }\n\n    super.emit(...args);\n  }\n}\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/src/events/ARIWebSocket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 231,
    "kind": "variable",
    "name": "debug",
    "memberof": "src/events/ARIWebSocket.js",
    "static": true,
    "longname": "src/events/ARIWebSocket.js~debug",
    "access": "public",
    "export": false,
    "importPath": "awry/src/events/ARIWebSocket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 232,
    "kind": "class",
    "name": "ARIWebSocket",
    "memberof": "src/events/ARIWebSocket.js",
    "static": true,
    "longname": "src/events/ARIWebSocket.js~ARIWebSocket",
    "access": "public",
    "export": true,
    "importPath": "awry/src/events/ARIWebSocket.js",
    "importStyle": "ARIWebSocket",
    "description": "Convenience wrapper around {@link ReconnectingWebSocket}",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket"
    ]
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "emit",
    "memberof": "src/events/ARIWebSocket.js~ARIWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ARIWebSocket.js~ARIWebSocket#emit",
    "access": "public",
    "description": "Wrapper around the {@link ReconnectingWebSocket}'s `emit` method to provide\nautomatic JSON parsing of 'message' events, falling back to the original\npayload if it cannot be parsed.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "...*"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "The original arguments passed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 234,
    "kind": "file",
    "name": "src/events/ReconnectingWebSocket.js",
    "content": "import WebSocket from \"ws\";\nimport events from \"events\";\nimport retry from \"retry\";\nimport debugModule from \"debug\";\nconst debug = debugModule(\"awry:ReconnectingWebSocket\");\n\n/**\n * A wrapper over the normal WebSocket object exported from the `ws`\n * library that automatically performs reconnection attempts when it\n * receives an 'error' or 'close' event from the underlying websocket.\n *\n * Events:\n *\n * - 'open' - fired when the websocket successfully connects to the\n *   provided url. Can fire multiple times if the socket disconnects and\n *   reconnects. signature ()\n *\n * - 'message' - fired when data is received on the underlying WebSocket.\n *   signature (data: any, flags: { binary, masked })\n *\n * - 'disconnected' - fired when the websocket disconnects, but reconnect\n *   attempts are about to be made.\n *   signature (details: { reason, err, code, message })\n *\n * - 'reconnected' - fired when the websocket was previously disconnected\n *   but has been reconnected automatically. signature ()\n *\n * - 'error' - fired directly before a 'close' event when the websocket has\n *   been disconnected for some reason and has exhaused its reconnection\n *   attempts. This event indicates why the websocket could not be reconnected.\n *   signature (mainError: Error)\n *\n * - 'close' - fired when the websocket disconnects and will not be\n *   reconnected, due to either having exhaused all reconnect attempts or\n *   reconnects being disabled. signature ()\n */\nexport default class ReconnectingWebSocket extends events.EventEmitter {\n  /**\n   * Create a websocket connection that can automatically reconnect upon\n   * disconnect.\n   *\n   * @param {object} params\n   * @param {string} params.url The url to connect to\n   * @param {boolean} [params.reconnect=true] Whether to attempt a reconnect\n   *  upon being disconnected either by an error or by having the socket close\n   * @param {object} [params.retryOptions={ maxTimeout: 60000 }] Any\n   *  advanced options to pass to the 'node-retry' retry.operation() method.\n   * @param {object} [params.wsOptions={}] Any advanced options to pass\n   *  directly to the 'ws' library constructor.\n   */\n  constructor(params = {}) {\n    super();\n    const {\n      url,\n      reconnect = true,\n      retryOptions = { maxTimeout: 60000 },\n      wsOptions = {},\n    } = params;\n\n    /** @private */\n    this._url = url;\n\n    /** @private */\n    this._wsOptions = wsOptions;\n\n    /** @private */\n    this._retryOptions = retryOptions;\n\n    /** @private */\n    this._reconnect = reconnect;\n\n    debug(\"attempting initial connection\", { url });\n    this.connect((err) => {\n      if (err) {\n        this.emit(\"error\", err);\n        this.close();\n        return;\n      }\n\n      this.emit(\"open\");\n    });\n  }\n\n  /**\n   * Connect to the websocket server, using an exponential backoff\n   * algorithm if an error occurs while connecting.\n   *\n   * @param {function} callback function with signature (err). Called upon\n   *  successful connection to the server, or when the maxRetries has\n   *  been exceeded.\n   */\n  connect(callback) {\n    const operation = retry.operation(this._retryOptions);\n\n    operation.attempt((attemptNumber) => {\n      const numRetries = attemptNumber - 1;\n\n      // cleanup any existing instance\n      if (this._ws) {\n        this._ws.removeAllListeners();\n        this._ws.close();\n      }\n\n      /** @private */\n      this._ws = new WebSocket(this._url, this._wsOptions);\n\n      const handleConnectError = (err) => {\n        debug(\"connection attempt failed\", err);\n\n        if (!this._reconnect) {\n          callback(err);\n          return;\n        }\n\n        if (operation.retry(err)) {\n          return;\n        }\n\n        // prettier-ignore\n        debug('connection attempts exhaused',\n          { err, reconnect: this._reconnect, numRetries });\n\n        callback(operation.mainError());\n      };\n\n      this._ws.once(\"error\", handleConnectError);\n      this._ws.once(\"open\", () => {\n        debug(\"connected\", { numRetries });\n        this._ws.removeListener(\"error\", handleConnectError);\n        this._ws.on(\"message\", this.emit.bind(this, \"message\"));\n        this._ws.once(\"error\", this.handleError.bind(this));\n        this._ws.once(\"close\", this.handleClose.bind(this));\n        callback();\n      });\n    });\n  }\n\n  /**\n   * Websocket 'error' handler that attempts to reconnect if reconnect is\n   * enabled. Otherwise, it only feeds the 'error' that occurred back up\n   * the chain and closes the connection.\n   *\n   * @private\n   */\n  handleError(err) {\n    debug(\"an error occurred.\", err);\n\n    if (!this._reconnect) {\n      this.emit(\"error\", err);\n      this.close();\n      return;\n    }\n\n    this.emit(\"disconnected\", { reason: \"error\", err });\n    debug(\"attempting to reconnect\");\n\n    this.connect((err) => {\n      if (err) {\n        this.emit(\"error\", err);\n        this.close();\n        return;\n      }\n\n      this.emit(\"reconnected\");\n    });\n  }\n\n  /**\n   * Websocket 'close' handler that attempts to reconnect if reconnect is\n   * enabled. Otherwise, it only feeds the 'close' event back up the chain.\n   *\n   * @private\n   */\n  handleClose(code, message) {\n    debug(\"connection closed\", code, message);\n\n    if (!this._reconnect) {\n      this.close();\n      return;\n    }\n\n    this.emit(\"disconnected\", { reason: \"close\", code, message });\n    debug(\"attempting to reconnect\");\n\n    this.connect((err) => {\n      if (err) {\n        this.emit(\"error\", err);\n        this.close();\n        return;\n      }\n\n      this.emit(\"reconnected\");\n    });\n  }\n\n  /**\n   * Closes the underlying websocket instance and removes all event\n   * listeners from this object.\n   */\n  close() {\n    if (this._ws) {\n      this._ws.removeAllListeners();\n      this._ws.close();\n      this._ws = null;\n      this.emit(\"close\");\n    }\n\n    this.removeAllListeners();\n  }\n\n  /**\n   * Wrapper around the underlying EventEmitter's `emit()`\n   * to provide some visibility into the events being emitted\n   * when debugging is enabled.\n   *\n   * @param {...*} args The originally emitted arguments\n   */\n  emit(...args) {\n    debug(\"emitting event\", ...args);\n    super.emit(...args);\n  }\n}\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/src/events/ReconnectingWebSocket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 235,
    "kind": "variable",
    "name": "debug",
    "memberof": "src/events/ReconnectingWebSocket.js",
    "static": true,
    "longname": "src/events/ReconnectingWebSocket.js~debug",
    "access": "public",
    "export": false,
    "importPath": "awry/src/events/ReconnectingWebSocket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 236,
    "kind": "class",
    "name": "ReconnectingWebSocket",
    "memberof": "src/events/ReconnectingWebSocket.js",
    "static": true,
    "longname": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket",
    "access": "public",
    "export": true,
    "importPath": "awry/src/events/ReconnectingWebSocket.js",
    "importStyle": "ReconnectingWebSocket",
    "description": "A wrapper over the normal WebSocket object exported from the `ws`\nlibrary that automatically performs reconnection attempts when it\nreceives an 'error' or 'close' event from the underlying websocket.\n\nEvents:\n\n- 'open' - fired when the websocket successfully connects to the\n  provided url. Can fire multiple times if the socket disconnects and\n  reconnects. signature ()\n\n- 'message' - fired when data is received on the underlying WebSocket.\n  signature (data: any, flags: { binary, masked })\n\n- 'disconnected' - fired when the websocket disconnects, but reconnect\n  attempts are about to be made.\n  signature (details: { reason, err, code, message })\n\n- 'reconnected' - fired when the websocket was previously disconnected\n  but has been reconnected automatically. signature ()\n\n- 'error' - fired directly before a 'close' event when the websocket has\n  been disconnected for some reason and has exhaused its reconnection\n  attempts. This event indicates why the websocket could not be reconnected.\n  signature (mainError: Error)\n\n- 'close' - fired when the websocket disconnects and will not be\n  reconnected, due to either having exhaused all reconnect attempts or\n  reconnects being disabled. signature ()",
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "events~events.EventEmitter"
    ]
  },
  {
    "__docId__": 237,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket#constructor",
    "access": "public",
    "description": "Create a websocket connection that can automatically reconnect upon\ndisconnect.",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.url",
        "description": "The url to connect to"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.reconnect",
        "description": "Whether to attempt a reconnect\n upon being disconnected either by an error or by having the socket close"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{ maxTimeout: 60000 }",
        "defaultRaw": "{ maxTimeout: 60000 }",
        "name": "params.retryOptions",
        "description": "Any\n advanced options to pass to the 'node-retry' retry.operation() method."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params.wsOptions",
        "description": "Any advanced options to pass\n directly to the 'ws' library constructor."
      }
    ]
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "_url",
    "memberof": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket",
    "static": false,
    "longname": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket#_url",
    "access": "private",
    "description": null,
    "lineNumber": 61,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "_wsOptions",
    "memberof": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket",
    "static": false,
    "longname": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket#_wsOptions",
    "access": "private",
    "description": null,
    "lineNumber": 64,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "member",
    "name": "_retryOptions",
    "memberof": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket",
    "static": false,
    "longname": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket#_retryOptions",
    "access": "private",
    "description": null,
    "lineNumber": 67,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "member",
    "name": "_reconnect",
    "memberof": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket",
    "static": false,
    "longname": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket#_reconnect",
    "access": "private",
    "description": null,
    "lineNumber": 70,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "connect",
    "memberof": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket#connect",
    "access": "public",
    "description": "Connect to the websocket server, using an exponential backoff\nalgorithm if an error occurs while connecting.",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "function with signature (err). Called upon\n successful connection to the server, or when the maxRetries has\n been exceeded."
      }
    ],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "member",
    "name": "_ws",
    "memberof": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket",
    "static": false,
    "longname": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket#_ws",
    "access": "private",
    "description": null,
    "lineNumber": 105,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "handleError",
    "memberof": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket#handleError",
    "access": "private",
    "description": "Websocket 'error' handler that attempts to reconnect if reconnect is\nenabled. Otherwise, it only feeds the 'error' that occurred back up\nthe chain and closes the connection.",
    "lineNumber": 145,
    "ignore": true,
    "params": [
      {
        "name": "err",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "handleClose",
    "memberof": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket#handleClose",
    "access": "private",
    "description": "Websocket 'close' handler that attempts to reconnect if reconnect is\nenabled. Otherwise, it only feeds the 'close' event back up the chain.",
    "lineNumber": 174,
    "ignore": true,
    "params": [
      {
        "name": "code",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "close",
    "memberof": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket#close",
    "access": "public",
    "description": "Closes the underlying websocket instance and removes all event\nlisteners from this object.",
    "lineNumber": 200,
    "params": [],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "emit",
    "memberof": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ReconnectingWebSocket.js~ReconnectingWebSocket#emit",
    "access": "public",
    "description": "Wrapper around the underlying EventEmitter's `emit()`\nto provide some visibility into the events being emitted\nwhen debugging is enabled.",
    "lineNumber": 218,
    "params": [
      {
        "nullable": null,
        "types": [
          "...*"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "The originally emitted arguments"
      }
    ],
    "return": null
  },
  {
    "__docId__": 249,
    "kind": "file",
    "name": "src/events/index.js",
    "content": "import { URL, URLSearchParams } from \"url\";\nimport ARIWebSocket from \"./ARIWebSocket\";\n\n/**\n * Client for interacting with the Asterisk REST Interface server-sent events.\n */\nexport default class Events {\n  /**\n   * Connect to Asterisk's event endpoint via websocket, and return an\n   * EventEmitter that can be used to listen for events coming from Asterisk.\n   *\n   * @param {object} params\n   * @param {string|Array.<string>} params.app The app[s] to receive events for.\n   * @param {string} params.url The ARI events url with 'ws' or 'wss' protocol,\n   *  i.e. 'ws://asterisk.local:8088/ari/events'\n   * @param {string} params.username The username to use for the connection\n   * @param {string} params.password The password to use for the connection\n   * @param {boolean} [params.subscribeAll=true] Whether or not to subscribe\n   *  to all system events. When set to false, explicit subscription\n   *  requests must be made to the ARI events endpoint to receive events for\n   *  individual event sources on a given application. *Param available since\n   *  Asterisk 13.6*\n   * @param {boolean} [params.reconnect=true] Whether to reconnect to the\n   *  ARI events endpoint upon unsolicited disconnect.\n   * @param {object} [params.retryOptions={ maxTimeout: 60000 }] Any\n   *  advanced options to pass to the 'node-retry' retry.operation() method.\n   * @param {object} [params.wsOptions={}] Any advanced options to pass\n   *  directly to the 'ws' library constructor.\n   * @returns {ARIWebSocket}\n   */\n  static connect(params) {\n    const {\n      app,\n      url: userProvidedUrl,\n      username,\n      password,\n      subscribeAll = true,\n      reconnect = true,\n      retryOptions = { maxTimeout: 60000 },\n      wsOptions = {},\n    } = params;\n\n    const parsedUrl = new URL(userProvidedUrl);\n\n    const newSearchParams = new URLSearchParams(parsedUrl.searchParams);\n    newSearchParams.set(\"api_key\", `${username}:${password}`);\n    newSearchParams.set(\"app\", [].concat(app).join(\",\"));\n    newSearchParams.set(\"subscribeAll\", subscribeAll ? \"true\" : \"false\");\n    parsedUrl.search = newSearchParams.toString();\n\n    const wsUrl = parsedUrl.href;\n\n    return new ARIWebSocket({\n      url: wsUrl,\n      reconnect,\n      retryOptions,\n      wsOptions,\n    });\n  }\n}\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/src/events/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 250,
    "kind": "class",
    "name": "Events",
    "memberof": "src/events/index.js",
    "static": true,
    "longname": "src/events/index.js~Events",
    "access": "public",
    "export": true,
    "importPath": "awry/src/events/index.js",
    "importStyle": "Events",
    "description": "Client for interacting with the Asterisk REST Interface server-sent events.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "connect",
    "memberof": "src/events/index.js~Events",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/index.js~Events.connect",
    "access": "public",
    "description": "Connect to Asterisk's event endpoint via websocket, and return an\nEventEmitter that can be used to listen for events coming from Asterisk.",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ARIWebSocket}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "params.app",
        "description": "The app[s] to receive events for."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.url",
        "description": "The ARI events url with 'ws' or 'wss' protocol,\n i.e. 'ws://asterisk.local:8088/ari/events'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.username",
        "description": "The username to use for the connection"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params.password",
        "description": "The password to use for the connection"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.subscribeAll",
        "description": "Whether or not to subscribe\n to all system events. When set to false, explicit subscription\n requests must be made to the ARI events endpoint to receive events for\n individual event sources on a given application. *Param available since\n Asterisk 13.6*"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.reconnect",
        "description": "Whether to reconnect to the\n ARI events endpoint upon unsolicited disconnect."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{ maxTimeout: 60000 }",
        "defaultRaw": "{ maxTimeout: 60000 }",
        "name": "params.retryOptions",
        "description": "Any\n advanced options to pass to the 'node-retry' retry.operation() method."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "params.wsOptions",
        "description": "Any advanced options to pass\n directly to the 'ws' library constructor."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ARIWebSocket"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 252,
    "kind": "file",
    "name": "src/index.js",
    "content": "import Events from \"./events\";\nimport API from \"./api\";\n\n/**\n * An ARI websocket and API client library.\n *\n * @typedef {object} Awry\n * @property {Events} Events Client for interacting with the Asterisk REST\n *  Interface server-sent events.\n * @property {API} API Client for interacting with the Asterisk Rest\n *  Interface.\n */\nexport default { Events, API };\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "typedef",
    "name": "Awry",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~Awry",
    "access": "public",
    "description": "An ARI websocket and API client library.",
    "lineNumber": 13,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "Events",
        "description": "Client for interacting with the Asterisk REST\n Interface server-sent events."
      },
      {
        "nullable": null,
        "types": [
          "API"
        ],
        "spread": false,
        "optional": false,
        "name": "API",
        "description": "Client for interacting with the Asterisk Rest\n Interface."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "Awry"
    }
  },
  {
    "kind": "index",
    "content": "# awry\n\n[![Build Status][Build Status Image]][Build Status Link]\n[![Codecov][Codecov Image]][Codecov Link]\n[![Known Vulnerabilities][Snyk Image]][Snyk Link]\n\nAn [Asterisk REST Interface][] websocket and API client library for node.js\nv6+.\n\n[Build Status Image]: https://travis-ci.org/chadxz/awry.svg?branch=master\n[Build Status Link]: https://travis-ci.org/chadxz/awry\n[Codecov Image]: https://img.shields.io/codecov/c/github/chadxz/awry.svg\n[Codecov Link]: https://codecov.io/gh/chadxz/awry\n[Snyk Image]: https://snyk.io/test/github/chadxz/awry/badge.svg\n[Snyk Link]: https://snyk.io/test/github/chadxz/awry\n[Asterisk REST Interface]: https://wiki.asterisk.org/wiki/pages/viewpage.action?pageId=29395573\n\n### installation\n\n`npm install awry`\n\n### usage\n\n```js\nconst awry = require('awry');\n\nconst api = new awry.API({\n  baseUrl: 'http://asterisk.local:8088/ari',\n  username: 'asterisk',\n  password: 'asterisk'\n});\n\napi.applications.list().then(apps => {\n  console.log(apps);\n});\n\nconst events = awry.Events.connect({\n  app: 'someApp',\n  url: 'http://asterisk.local:8088/ari/events',\n  username: 'asterisk',\n  password: 'asterisk'\n});\n\nevents.on('message', message => {\n  console.log(message);\n});\n```\n\nFor more details see the [full API documentation](http://chadmcelligott.com/awry).\n\n### debugging\n\nawry uses the [debug](https://github.com/visionmedia/debug) module to log\ndebugging output. To enable this output to print to the console, set the\nenvironment variable `DEBUG` to one of the following when running your app:\n\n- `awry:*` - shows all debug output from this library.\n- `awry:ARIWebSocket` - shows only the debug output from the ARIWebSocket\nsub-module.\n- `awry:ReconnectingWebSocket` - shows only the debug output from the\nReconnectingWebSocket sub-module.\n\nFor example: `DEBUG=awry:* node myapp.js`\n\n### contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n\n### license\n\n[MIT](LICENSE-MIT)\n",
    "longname": "/Users/cmcelligott/src/awry/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"awry\",\n  \"version\": \"7.2.0\",\n  \"description\": \"An ARI websocket and API client library\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"prettify\": \"prettier --write \\\"**/*.js\\\" \\\"!coverage/**\\\" \\\"!docs/**\\\"\",\n    \"lint\": \"eslint .\",\n    \"test\": \"npm run lint && mocha\",\n    \"cover\": \"nyc --reporter=html --reporter=text mocha && open coverage/index.html\",\n    \"ci-test\": \"npm run lint && npm run ci-mocha && npm run ci-upload-coverage\",\n    \"ci-mocha\": \"nyc mocha\",\n    \"ci-upload-coverage\": \"nyc report --reporter=text-lcov > coverage.lcov && codecov\",\n    \"docs\": \"esdoc\"\n  },\n  \"keywords\": [\n    \"asterisk\",\n    \"ari\"\n  ],\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \">=10\",\n    \"npm\": \">=6\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/chadxz/awry.git\"\n  },\n  \"nyc\": {\n    \"temp-directory\": \"coverage/.nyc_output\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^0.19.2\",\n    \"debug\": \"^4.0.1\",\n    \"esm\": \"^3.2.22\",\n    \"retry\": \"^0.12.0\",\n    \"ws\": \"^7.2.5\"\n  },\n  \"devDependencies\": {\n    \"@types/mocha\": \"^7.0.2\",\n    \"@types/ws\": \"^7.2.4\",\n    \"acorn\": \"^7.2.0\",\n    \"codecov\": \"^3.0.0\",\n    \"env-test\": \"^1.0.0\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^6.8.0\",\n    \"eslint-config-prettier\": \"^6.11.0\",\n    \"eslint-config-standard\": \"^14.1.1\",\n    \"eslint-plugin-import\": \"^2.20.2\",\n    \"eslint-plugin-node\": \"^11.1.0\",\n    \"eslint-plugin-prettier\": \"^3.0.0\",\n    \"eslint-plugin-promise\": \"^4.0.1\",\n    \"eslint-plugin-standard\": \"^4.0.0\",\n    \"mocha\": \"^7.1.2\",\n    \"nock\": \"^12.0.3\",\n    \"nyc\": \"^15.0.1\",\n    \"prettier\": \"^2.0.5\"\n  }\n}\n",
    "longname": "/Users/cmcelligott/src/awry/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 254,
    "kind": "testFile",
    "name": "test/api/ApplicationsAPI.spec.js",
    "content": "import nock from \"nock\";\nimport ApplicationsAPI from \"../../src/api/ApplicationsAPI\";\n\ndescribe(\"the Applications API\", () => {\n  beforeEach(() => {\n    nock.disableNetConnect();\n  });\n\n  afterEach(() => {\n    nock.enableNetConnect();\n  });\n\n  describe(\"list method\", () => {\n    describe(\"always\", () => {\n      it(\"makes a GET request to /applications\", () => {\n        const mock = nock(\"http://fake.local\")\n          .get(\"/ari/applications\")\n          .reply(200, { foo: \"bar\" });\n\n        const api = new ApplicationsAPI({\n          baseUrl: \"http://fake.local/ari\",\n          username: \"foo\",\n          password: \"bar\",\n        });\n\n        return api.list().then(() => {\n          mock.done();\n        });\n      });\n\n      it(\"sends the username and password\", () => {\n        const mock = nock(\"http://fake.local\", {\n          reqheaders: {\n            authorization: \"Basic Zm9vOmJhcg==\",\n          },\n        })\n          .get(\"/ari/applications\")\n          .reply(200, { foo: \"bar\" });\n\n        const api = new ApplicationsAPI({\n          baseUrl: \"http://fake.local/ari\",\n          username: \"foo\",\n          password: \"bar\",\n        });\n\n        return api.list().then(() => {\n          mock.done();\n        });\n      });\n\n      it(\"sets the accept header as json\", () => {\n        const mock = nock(\"http://fake.local\", {\n          reqHeaders: {\n            accept: \"application/json\",\n          },\n        })\n          .get(\"/ari/applications\")\n          .reply(200, { foo: \"bar\" });\n\n        const api = new ApplicationsAPI({\n          baseUrl: \"http://fake.local/ari\",\n          username: \"foo\",\n          password: \"bar\",\n        });\n\n        return api.list().then(() => {\n          mock.done();\n        });\n      });\n    });\n  });\n\n  describe(\"get method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/applications/foo\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ApplicationsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"foo\",\n        password: \"bar\",\n      });\n\n      return api.get({ applicationName: \"foo\" }).then(() => {\n        mock.done();\n      });\n    });\n  });\n\n  describe(\"subscribe method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/applications/foo/subscription\")\n        .query({ eventSource: \"device234\" })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ApplicationsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"foo\",\n        password: \"bar\",\n      });\n\n      return api\n        .subscribe({\n          applicationName: \"foo\",\n          eventSource: \"device234\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"unsubscribe method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/applications/foo/subscription\")\n        .query({ eventSource: \"device234\" })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ApplicationsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"foo\",\n        password: \"bar\",\n      });\n\n      return api\n        .unsubscribe({\n          applicationName: \"foo\",\n          eventSource: \"device234\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"filterEvents method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .put(\"/ari/applications/foo/eventFilter\", {\n          filter: {\n            allowed: [{ type: \"StasisStart\" }],\n            disallowed: [{ type: \"StasisEnd\" }],\n          },\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ApplicationsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"foo\",\n        password: \"bar\",\n      });\n\n      return api\n        .filterEvents({\n          applicationName: \"foo\",\n          filter: {\n            allowed: [{ type: \"StasisStart\" }],\n            disallowed: [{ type: \"StasisEnd\" }],\n          },\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/test/api/ApplicationsAPI.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/api/ApplicationsAPI.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/api/ApplicationsAPI.spec.js~describe0",
    "access": null,
    "description": "the Applications API",
    "lineNumber": 4
  },
  {
    "__docId__": 256,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "test/api/ApplicationsAPI.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ApplicationsAPI.spec.js~describe0.describe1",
    "access": null,
    "description": "list method",
    "lineNumber": 13
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "describe2",
    "testId": 2,
    "memberof": "test/api/ApplicationsAPI.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ApplicationsAPI.spec.js~describe0.describe1.describe2",
    "access": null,
    "description": "always",
    "lineNumber": 14
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "test/api/ApplicationsAPI.spec.js~describe0.describe1.describe2",
    "testDepth": 3,
    "static": true,
    "longname": "test/api/ApplicationsAPI.spec.js~describe0.describe1.describe2.it3",
    "access": null,
    "description": "makes a GET request to /applications",
    "lineNumber": 15
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/api/ApplicationsAPI.spec.js~describe0.describe1.describe2",
    "testDepth": 3,
    "static": true,
    "longname": "test/api/ApplicationsAPI.spec.js~describe0.describe1.describe2.it4",
    "access": null,
    "description": "sends the username and password",
    "lineNumber": 31
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/api/ApplicationsAPI.spec.js~describe0.describe1.describe2",
    "testDepth": 3,
    "static": true,
    "longname": "test/api/ApplicationsAPI.spec.js~describe0.describe1.describe2.it5",
    "access": null,
    "description": "sets the accept header as json",
    "lineNumber": 51
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "describe6",
    "testId": 6,
    "memberof": "test/api/ApplicationsAPI.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ApplicationsAPI.spec.js~describe0.describe6",
    "access": null,
    "description": "get method",
    "lineNumber": 73
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "test/api/ApplicationsAPI.spec.js~describe0.describe6",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ApplicationsAPI.spec.js~describe0.describe6.it7",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 74
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "describe8",
    "testId": 8,
    "memberof": "test/api/ApplicationsAPI.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ApplicationsAPI.spec.js~describe0.describe8",
    "access": null,
    "description": "subscribe method",
    "lineNumber": 91
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "test/api/ApplicationsAPI.spec.js~describe0.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ApplicationsAPI.spec.js~describe0.describe8.it9",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 92
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "describe10",
    "testId": 10,
    "memberof": "test/api/ApplicationsAPI.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ApplicationsAPI.spec.js~describe0.describe10",
    "access": null,
    "description": "unsubscribe method",
    "lineNumber": 115
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "test/api/ApplicationsAPI.spec.js~describe0.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ApplicationsAPI.spec.js~describe0.describe10.it11",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 116
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "describe12",
    "testId": 12,
    "memberof": "test/api/ApplicationsAPI.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ApplicationsAPI.spec.js~describe0.describe12",
    "access": null,
    "description": "filterEvents method",
    "lineNumber": 139
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "test/api/ApplicationsAPI.spec.js~describe0.describe12",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ApplicationsAPI.spec.js~describe0.describe12.it13",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 140
  },
  {
    "__docId__": 269,
    "kind": "testFile",
    "name": "test/api/AsteriskAPI.spec.js",
    "content": "import nock from \"nock\";\nimport AsteriskAPI from \"../../src/api/AsteriskAPI\";\n\ndescribe(\"the Asterisk API\", () => {\n  beforeEach(() => {\n    nock.disableNetConnect();\n  });\n\n  afterEach(() => {\n    nock.enableNetConnect();\n  });\n\n  describe(\"getObject method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/asterisk/config/dynamic/fooClass/barType/baz\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new AsteriskAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .getObject({\n          configClass: \"fooClass\",\n          objectType: \"barType\",\n          id: \"baz\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"updateObject method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .put(\"/ari/asterisk/config/dynamic/fooClass/barType/baz\", {\n          fields: [{ field1: \"field1val\" }, { field2: \"field2val\" }],\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new AsteriskAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .updateObject({\n          configClass: \"fooClass\",\n          objectType: \"barType\",\n          id: \"baz\",\n          fields: [{ field1: \"field1val\" }, { field2: \"field2val\" }],\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"deleteObject method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/asterisk/config/dynamic/fooClass/barType/baz\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new AsteriskAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .deleteObject({\n          configClass: \"fooClass\",\n          objectType: \"barType\",\n          id: \"baz\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"getInfo method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/asterisk/info\")\n        .query({ only: \"system,build\" })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new AsteriskAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .getInfo({\n          only: [\"system\", \"build\"],\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"listModules method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/asterisk/modules\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new AsteriskAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api.listModules().then(() => {\n        mock.done();\n      });\n    });\n  });\n\n  describe(\"getModule method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/asterisk/modules/myModule\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new AsteriskAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .getModule({\n          moduleName: \"myModule\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"loadModule method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/asterisk/modules/my%20Module\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new AsteriskAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .loadModule({\n          moduleName: \"my Module\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"unloadModule method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/asterisk/modules/my%20Module\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new AsteriskAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .unloadModule({\n          moduleName: \"my Module\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"reloadModule method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .put(\"/ari/asterisk/modules/my%20Module\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new AsteriskAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .reloadModule({\n          moduleName: \"my Module\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"listLogChannels method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/asterisk/logging\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new AsteriskAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api.listLogChannels().then(() => {\n        mock.done();\n      });\n    });\n  });\n\n  describe(\"addLog method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/asterisk/logging/my%20log%20channel\")\n        .query({ configuration: \"i have no idea what i'm doing\" })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new AsteriskAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .addLog({\n          logChannelName: \"my log channel\",\n          configuration: \"i have no idea what i'm doing\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"deleteLog method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/asterisk/logging/my%20log%20channel\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new AsteriskAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .deleteLog({\n          logChannelName: \"my log channel\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"rotateLog method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .put(\"/ari/asterisk/logging/my%20log%20channel/rotate\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new AsteriskAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .rotateLog({\n          logChannelName: \"my log channel\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"getGlobalVariable method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/asterisk/variable\")\n        .query({ variable: \"something cool\" })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new AsteriskAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .getGlobalVariable({\n          variable: \"something cool\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"setGlobalVariable method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/asterisk/variable\")\n        .query({\n          variable: \"something cool\",\n          value: \"do what now\",\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new AsteriskAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .setGlobalVariable({\n          variable: \"something cool\",\n          value: \"do what now\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/test/api/AsteriskAPI.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "test/api/AsteriskAPI.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14",
    "access": null,
    "description": "the Asterisk API",
    "lineNumber": 4
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "describe15",
    "testId": 15,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe15",
    "access": null,
    "description": "getObject method",
    "lineNumber": 13
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe15.it16",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 14
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "describe17",
    "testId": 17,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe17",
    "access": null,
    "description": "updateObject method",
    "lineNumber": 37
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe17.it18",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 38
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "describe19",
    "testId": 19,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe19",
    "access": null,
    "description": "deleteObject method",
    "lineNumber": 64
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe19.it20",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 65
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "describe21",
    "testId": 21,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe21",
    "access": null,
    "description": "getInfo method",
    "lineNumber": 88
  },
  {
    "__docId__": 278,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe21.it22",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 89
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe23",
    "access": null,
    "description": "listModules method",
    "lineNumber": 111
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe23.it24",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 112
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe25",
    "access": null,
    "description": "getModule method",
    "lineNumber": 129
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14.describe25",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe25.it26",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 130
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "describe27",
    "testId": 27,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe27",
    "access": null,
    "description": "loadModule method",
    "lineNumber": 151
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14.describe27",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe27.it28",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 152
  },
  {
    "__docId__": 285,
    "kind": "test",
    "name": "describe29",
    "testId": 29,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe29",
    "access": null,
    "description": "unloadModule method",
    "lineNumber": 173
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14.describe29",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe29.it30",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 174
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe31",
    "access": null,
    "description": "reloadModule method",
    "lineNumber": 195
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe31.it32",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 196
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "describe33",
    "testId": 33,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe33",
    "access": null,
    "description": "listLogChannels method",
    "lineNumber": 217
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14.describe33",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe33.it34",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 218
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "describe35",
    "testId": 35,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe35",
    "access": null,
    "description": "addLog method",
    "lineNumber": 235
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14.describe35",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe35.it36",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 236
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "describe37",
    "testId": 37,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe37",
    "access": null,
    "description": "deleteLog method",
    "lineNumber": 259
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14.describe37",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe37.it38",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 260
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe39",
    "access": null,
    "description": "rotateLog method",
    "lineNumber": 281
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14.describe39",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe39.it40",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 282
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "describe41",
    "testId": 41,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe41",
    "access": null,
    "description": "getGlobalVariable method",
    "lineNumber": 303
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe41.it42",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 304
  },
  {
    "__docId__": 299,
    "kind": "test",
    "name": "describe43",
    "testId": 43,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe43",
    "access": null,
    "description": "setGlobalVariable method",
    "lineNumber": 326
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/api/AsteriskAPI.spec.js~describe14.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/AsteriskAPI.spec.js~describe14.describe43.it44",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 327
  },
  {
    "__docId__": 301,
    "kind": "testFile",
    "name": "test/api/BridgesAPI.spec.js",
    "content": "import nock from \"nock\";\nimport BridgesAPI from \"../../src/api/BridgesAPI\";\n\ndescribe(\"the Bridges API\", () => {\n  beforeEach(() => {\n    nock.disableNetConnect();\n  });\n\n  afterEach(() => {\n    nock.enableNetConnect();\n  });\n\n  describe(\"list method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/bridges\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new BridgesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api.list().then(() => {\n        mock.done();\n      });\n    });\n  });\n\n  describe(\"create method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/bridges\")\n        .query({\n          type: \"mixing,dtmf_events\",\n          bridgeId: \"foo\",\n          name: \"fooBridge\",\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new BridgesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .create({\n          bridgeId: \"foo\",\n          name: \"fooBridge\",\n          type: [\"mixing\", \"dtmf_events\"],\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"createOrUpdate method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/bridges/foo\")\n        .query({\n          type: \"mixing,dtmf_events\",\n          name: \"fooBridge\",\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new BridgesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .createOrUpdate({\n          bridgeId: \"foo\",\n          name: \"fooBridge\",\n          type: [\"mixing\", \"dtmf_events\"],\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"get method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/bridges/foo\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new BridgesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .get({\n          bridgeId: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"destroy method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/bridges/foo\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new BridgesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .destroy({\n          bridgeId: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"addChannel method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/bridges/foo%20bar/addChannel\")\n        .query({\n          role: \"announcer\",\n          channel: \"chan1,chan2\",\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new BridgesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .addChannel({\n          bridgeId: \"foo bar\",\n          channel: [\"chan1\", \"chan2\"],\n          role: \"announcer\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"removeChannel method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/bridges/foo%20bar/removeChannel\")\n        .query({ channel: \"chan1,chan2\" })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new BridgesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .removeChannel({\n          bridgeId: \"foo bar\",\n          channel: [\"chan1\", \"chan2\"],\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"startMusicOnHold method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/bridges/foo%20bar/moh\")\n        .query({ mohClass: \"rock_and_roll\" })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new BridgesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .startMusicOnHold({\n          bridgeId: \"foo bar\",\n          mohClass: \"rock_and_roll\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"stopMusicOnHold method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/bridges/foo%20bar/moh\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new BridgesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .stopMusicOnHold({\n          bridgeId: \"foo bar\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"play method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/bridges/foo%20bar/play\")\n        .query({\n          media: \"sound:foo/bar.wav,sound:foo/baz.wav\",\n          playbackId: \"myPlaybackId\",\n          offsetms: 2000,\n          skipms: 5000,\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new BridgesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .play({\n          bridgeId: \"foo bar\",\n          media: [\"sound:foo/bar.wav\", \"sound:foo/baz.wav\"],\n          playbackId: \"myPlaybackId\",\n          offsetms: 2000,\n          skipms: 5000,\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"playWithId method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/bridges/foo%20bar/play/my%20playback\")\n        .query({\n          media: \"sound:foo/bar.wav,sound:foo/baz.wav\",\n          offsetms: 2000,\n          skipms: 5000,\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new BridgesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .playWithId({\n          bridgeId: \"foo bar\",\n          media: [\"sound:foo/bar.wav\", \"sound:foo/baz.wav\"],\n          playbackId: \"my playback\",\n          offsetms: 2000,\n          skipms: 5000,\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"record method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/bridges/foo%20bar/record\")\n        .query({\n          name: \"myRecording\",\n          format: \"wav\",\n          maxDurationSeconds: 60,\n          maxSilentSeconds: 0,\n          ifExists: \"overwrite\",\n          beep: true,\n          terminateOn: \"none\",\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new BridgesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .record({\n          bridgeId: \"foo bar\",\n          name: \"myRecording\",\n          maxDurationSeconds: 60,\n          ifExists: \"overwrite\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/test/api/BridgesAPI.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "describe45",
    "testId": 45,
    "memberof": "test/api/BridgesAPI.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45",
    "access": null,
    "description": "the Bridges API",
    "lineNumber": 4
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "describe46",
    "testId": 46,
    "memberof": "test/api/BridgesAPI.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe46",
    "access": null,
    "description": "list method",
    "lineNumber": 13
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/api/BridgesAPI.spec.js~describe45.describe46",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe46.it47",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 14
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "describe48",
    "testId": 48,
    "memberof": "test/api/BridgesAPI.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe48",
    "access": null,
    "description": "create method",
    "lineNumber": 31
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "test/api/BridgesAPI.spec.js~describe45.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe48.it49",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 32
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "describe50",
    "testId": 50,
    "memberof": "test/api/BridgesAPI.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe50",
    "access": null,
    "description": "createOrUpdate method",
    "lineNumber": 60
  },
  {
    "__docId__": 308,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/api/BridgesAPI.spec.js~describe45.describe50",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe50.it51",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 61
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "describe52",
    "testId": 52,
    "memberof": "test/api/BridgesAPI.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe52",
    "access": null,
    "description": "get method",
    "lineNumber": 88
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/api/BridgesAPI.spec.js~describe45.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe52.it53",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 89
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "describe54",
    "testId": 54,
    "memberof": "test/api/BridgesAPI.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe54",
    "access": null,
    "description": "destroy method",
    "lineNumber": 110
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "test/api/BridgesAPI.spec.js~describe45.describe54",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe54.it55",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 111
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "describe56",
    "testId": 56,
    "memberof": "test/api/BridgesAPI.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe56",
    "access": null,
    "description": "addChannel method",
    "lineNumber": 132
  },
  {
    "__docId__": 314,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/api/BridgesAPI.spec.js~describe45.describe56",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe56.it57",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 133
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "describe58",
    "testId": 58,
    "memberof": "test/api/BridgesAPI.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe58",
    "access": null,
    "description": "removeChannel method",
    "lineNumber": 160
  },
  {
    "__docId__": 316,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/api/BridgesAPI.spec.js~describe45.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe58.it59",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 161
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "describe60",
    "testId": 60,
    "memberof": "test/api/BridgesAPI.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe60",
    "access": null,
    "description": "startMusicOnHold method",
    "lineNumber": 184
  },
  {
    "__docId__": 318,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "test/api/BridgesAPI.spec.js~describe45.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe60.it61",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 185
  },
  {
    "__docId__": 319,
    "kind": "test",
    "name": "describe62",
    "testId": 62,
    "memberof": "test/api/BridgesAPI.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe62",
    "access": null,
    "description": "stopMusicOnHold method",
    "lineNumber": 208
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "test/api/BridgesAPI.spec.js~describe45.describe62",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe62.it63",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 209
  },
  {
    "__docId__": 321,
    "kind": "test",
    "name": "describe64",
    "testId": 64,
    "memberof": "test/api/BridgesAPI.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe64",
    "access": null,
    "description": "play method",
    "lineNumber": 230
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "test/api/BridgesAPI.spec.js~describe45.describe64",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe64.it65",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 231
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "describe66",
    "testId": 66,
    "memberof": "test/api/BridgesAPI.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe66",
    "access": null,
    "description": "playWithId method",
    "lineNumber": 262
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/api/BridgesAPI.spec.js~describe45.describe66",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe66.it67",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 263
  },
  {
    "__docId__": 325,
    "kind": "test",
    "name": "describe68",
    "testId": 68,
    "memberof": "test/api/BridgesAPI.spec.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe68",
    "access": null,
    "description": "record method",
    "lineNumber": 293
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "test/api/BridgesAPI.spec.js~describe45.describe68",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/BridgesAPI.spec.js~describe45.describe68.it69",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 294
  },
  {
    "__docId__": 327,
    "kind": "testFile",
    "name": "test/api/ChannelsAPI.spec.js",
    "content": "import nock from \"nock\";\nimport ChannelsAPI from \"../../src/api/ChannelsAPI\";\n\ndescribe(\"the Channels API\", () => {\n  beforeEach(() => {\n    nock.disableNetConnect();\n  });\n\n  afterEach(() => {\n    nock.enableNetConnect();\n  });\n\n  describe(\"list method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/channels\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api.list().then(() => {\n        mock.done();\n      });\n    });\n  });\n\n  describe(\"originate method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels\", {\n          variables: { foo: \"bar\" },\n        })\n        .query({\n          endpoint: \"pjsip/foobar\",\n          app: \"super cool app\",\n          appArgs: \"somearg=excellent\",\n          callerId: \"jack bauer\",\n          timeout: 45,\n          channelId: \"someChannelId\",\n          otherChannelId: \"someOtherChannelId\",\n          originator: \"someOriginator\",\n          formats: \"ulaw,slin16\",\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .originate({\n          endpoint: \"pjsip/foobar\",\n          app: \"super cool app\",\n          appArgs: \"somearg=excellent\",\n          callerId: \"jack bauer\",\n          timeout: 45,\n          channelId: \"someChannelId\",\n          otherChannelId: \"someOtherChannelId\",\n          originator: \"someOriginator\",\n          formats: [\"ulaw\", \"slin16\"],\n          variables: { foo: \"bar\" },\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"create method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels/create\")\n        .query({\n          endpoint: \"pjsip/foobar\",\n          app: \"super cool app\",\n          appArgs: \"somearg=excellent\",\n          channelId: \"someChannelId\",\n          otherChannelId: \"someOtherChannelId\",\n          originator: \"someOriginator\",\n          formats: \"ulaw,slin16\",\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .create({\n          endpoint: \"pjsip/foobar\",\n          app: \"super cool app\",\n          appArgs: \"somearg=excellent\",\n          channelId: \"someChannelId\",\n          otherChannelId: \"someOtherChannelId\",\n          originator: \"someOriginator\",\n          formats: [\"ulaw\", \"slin16\"],\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"get method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/channels/foo\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .get({\n          channelId: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"originateWithId method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels/foo\", {\n          variables: { foo: \"bar\" },\n        })\n        .query({\n          endpoint: \"pjsip/foobar\",\n          app: \"super cool app\",\n          appArgs: \"somearg=excellent\",\n          callerId: \"jack bauer\",\n          timeout: 45,\n          otherChannelId: \"someOtherChannelId\",\n          originator: \"someOriginator\",\n          formats: \"ulaw,slin16\",\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .originateWithId({\n          channelId: \"foo\",\n          endpoint: \"pjsip/foobar\",\n          app: \"super cool app\",\n          appArgs: \"somearg=excellent\",\n          callerId: \"jack bauer\",\n          timeout: 45,\n          otherChannelId: \"someOtherChannelId\",\n          originator: \"someOriginator\",\n          formats: [\"ulaw\", \"slin16\"],\n          variables: { foo: \"bar\" },\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"hangup method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/channels/foo\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .hangup({\n          channelId: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"continueInDialplan method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels/foo/continue\")\n        .query({\n          context: \"someContext\",\n          extension: \"someExtension\",\n          priority: \"somePriority\",\n          label: \"someLabel\",\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .continueInDialplan({\n          channelId: \"foo\",\n          context: \"someContext\",\n          extension: \"someExtension\",\n          priority: \"somePriority\",\n          label: \"someLabel\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"redirect method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels/foo/redirect\")\n        .query({ endpoint: \"PJSIP/4004\" })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .redirect({\n          channelId: \"foo\",\n          endpoint: \"PJSIP/4004\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"answer method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels/foo/answer\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .answer({\n          channelId: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"ring method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels/foo/ring\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .ring({\n          channelId: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"ringStop method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/channels/foo/ring\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .ringStop({\n          channelId: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"sendDTMF method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels/foo/dtmf\")\n        .query({\n          dtmf: \"1234\",\n          before: 200,\n          between: 300,\n          duration: 350,\n          after: 250,\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .sendDTMF({\n          channelId: \"foo\",\n          dtmf: \"1234\",\n          before: 200,\n          between: 300,\n          duration: 350,\n          after: 250,\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"mute method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels/foo/mute\")\n        .query({ direction: \"out\" })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .mute({\n          channelId: \"foo\",\n          direction: \"out\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"unmute method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/channels/foo/mute\")\n        .query({ direction: \"out\" })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .unmute({\n          channelId: \"foo\",\n          direction: \"out\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"hold method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels/foo/hold\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .hold({\n          channelId: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"unhold method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/channels/foo/hold\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .unhold({\n          channelId: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"startMusicOnHold method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels/foo/moh\")\n        .query({ mohClass: \"classical\" })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .startMusicOnHold({\n          channelId: \"foo\",\n          mohClass: \"classical\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"stopMusicOnHold method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/channels/foo/moh\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .stopMusicOnHold({\n          channelId: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"startSilence method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels/foo/silence\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .startSilence({\n          channelId: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"stopSilence method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/channels/foo/silence\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .stopSilence({\n          channelId: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"play method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels/foo/play\")\n        .query({\n          media: \"sound:tt-monkeys,sound:helloworld\",\n          lang: \"en\",\n          offsetms: 150,\n          skipms: 1500,\n          playbackId: \"monkeyAttack\",\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .play({\n          channelId: \"foo\",\n          media: [\"sound:tt-monkeys\", \"sound:helloworld\"],\n          lang: \"en\",\n          offsetms: 150,\n          skipms: 1500,\n          playbackId: \"monkeyAttack\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"playWithId method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels/foo/play/monkeyAttack\")\n        .query({\n          media: \"sound:tt-monkeys,sound:helloworld\",\n          lang: \"en\",\n          offsetms: 150,\n          skipms: 1500,\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .playWithId({\n          channelId: \"foo\",\n          playbackId: \"monkeyAttack\",\n          media: [\"sound:tt-monkeys\", \"sound:helloworld\"],\n          lang: \"en\",\n          offsetms: 150,\n          skipms: 1500,\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"record method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels/foo/record\")\n        .query({\n          name: \"recording.wav\",\n          format: \"wav\",\n          maxDurationSeconds: 60,\n          maxSilenceSeconds: 10,\n          ifExists: \"overwrite\",\n          beep: false,\n          terminateOn: \"#\",\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .record({\n          channelId: \"foo\",\n          name: \"recording.wav\",\n          format: \"wav\",\n          maxDurationSeconds: 60,\n          maxSilenceSeconds: 10,\n          ifExists: \"overwrite\",\n          beep: false,\n          terminateOn: \"#\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"getChannelVariable method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/channels/foo/variable\")\n        .query({ variable: \"jenkins\" })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .getChannelVariable({\n          channelId: \"foo\",\n          variable: \"jenkins\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"setChannelVariable method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels/foo/variable\")\n        .query({\n          variable: \"jenkins\",\n          value: \"bamboo\",\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .setChannelVariable({\n          channelId: \"foo\",\n          variable: \"jenkins\",\n          value: \"bamboo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"snoopChannel method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels/foo/snoop\")\n        .query({\n          app: \"myApp\",\n          spy: \"both\",\n          whisper: \"both\",\n          appArgs: \"foo=bar\",\n          snoopId: \"snoopyDoopy\",\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .snoopChannel({\n          channelId: \"foo\",\n          app: \"myApp\",\n          spy: \"both\",\n          whisper: \"both\",\n          appArgs: \"foo=bar\",\n          snoopId: \"snoopyDoopy\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"snoopChannelWithId method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels/foo/snoop/snoopyDoopy\")\n        .query({\n          app: \"myApp\",\n          spy: \"both\",\n          whisper: \"both\",\n          appArgs: \"foo=bar\",\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .snoopChannelWithId({\n          channelId: \"foo\",\n          snoopId: \"snoopyDoopy\",\n          app: \"myApp\",\n          spy: \"both\",\n          whisper: \"both\",\n          appArgs: \"foo=bar\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"dial method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/channels/foo/dial\")\n        .query({ caller: \"scooby\", timeout: 60 })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new ChannelsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .dial({\n          channelId: \"foo\",\n          caller: \"scooby\",\n          timeout: 60,\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/test/api/ChannelsAPI.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 328,
    "kind": "test",
    "name": "describe70",
    "testId": 70,
    "memberof": "test/api/ChannelsAPI.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70",
    "access": null,
    "description": "the Channels API",
    "lineNumber": 4
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "describe71",
    "testId": 71,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe71",
    "access": null,
    "description": "list method",
    "lineNumber": 13
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe71.it72",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 14
  },
  {
    "__docId__": 331,
    "kind": "test",
    "name": "describe73",
    "testId": 73,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe73",
    "access": null,
    "description": "originate method",
    "lineNumber": 31
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe73.it74",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 32
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "describe75",
    "testId": 75,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe75",
    "access": null,
    "description": "create method",
    "lineNumber": 75
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe75",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe75.it76",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 76
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "describe77",
    "testId": 77,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe77",
    "access": null,
    "description": "get method",
    "lineNumber": 112
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe77",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe77.it78",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 113
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "describe79",
    "testId": 79,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe79",
    "access": null,
    "description": "originateWithId method",
    "lineNumber": 134
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe79",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe79.it80",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 135
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "describe81",
    "testId": 81,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe81",
    "access": null,
    "description": "hangup method",
    "lineNumber": 177
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe81",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe81.it82",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 178
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "describe83",
    "testId": 83,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe83",
    "access": null,
    "description": "continueInDialplan method",
    "lineNumber": 199
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe83",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe83.it84",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 200
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "describe85",
    "testId": 85,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe85",
    "access": null,
    "description": "redirect method",
    "lineNumber": 231
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe85",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe85.it86",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 232
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "describe87",
    "testId": 87,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe87",
    "access": null,
    "description": "answer method",
    "lineNumber": 255
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe87.it88",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 256
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "describe89",
    "testId": 89,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe89",
    "access": null,
    "description": "ring method",
    "lineNumber": 277
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe89",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe89.it90",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 278
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "describe91",
    "testId": 91,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe91",
    "access": null,
    "description": "ringStop method",
    "lineNumber": 299
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe91",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe91.it92",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 300
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "describe93",
    "testId": 93,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe93",
    "access": null,
    "description": "sendDTMF method",
    "lineNumber": 321
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe93.it94",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 322
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "describe95",
    "testId": 95,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe95",
    "access": null,
    "description": "mute method",
    "lineNumber": 355
  },
  {
    "__docId__": 354,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe95",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe95.it96",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 356
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "describe97",
    "testId": 97,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe97",
    "access": null,
    "description": "unmute method",
    "lineNumber": 379
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe97",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe97.it98",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 380
  },
  {
    "__docId__": 357,
    "kind": "test",
    "name": "describe99",
    "testId": 99,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe99",
    "access": null,
    "description": "hold method",
    "lineNumber": 403
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe99",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe99.it100",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 404
  },
  {
    "__docId__": 359,
    "kind": "test",
    "name": "describe101",
    "testId": 101,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe101",
    "access": null,
    "description": "unhold method",
    "lineNumber": 425
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe101",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe101.it102",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 426
  },
  {
    "__docId__": 361,
    "kind": "test",
    "name": "describe103",
    "testId": 103,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe103",
    "access": null,
    "description": "startMusicOnHold method",
    "lineNumber": 447
  },
  {
    "__docId__": 362,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe103.it104",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 448
  },
  {
    "__docId__": 363,
    "kind": "test",
    "name": "describe105",
    "testId": 105,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe105",
    "access": null,
    "description": "stopMusicOnHold method",
    "lineNumber": 471
  },
  {
    "__docId__": 364,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe105",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe105.it106",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 472
  },
  {
    "__docId__": 365,
    "kind": "test",
    "name": "describe107",
    "testId": 107,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe107",
    "access": null,
    "description": "startSilence method",
    "lineNumber": 493
  },
  {
    "__docId__": 366,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe107.it108",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 494
  },
  {
    "__docId__": 367,
    "kind": "test",
    "name": "describe109",
    "testId": 109,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe109",
    "access": null,
    "description": "stopSilence method",
    "lineNumber": 515
  },
  {
    "__docId__": 368,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe109",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe109.it110",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 516
  },
  {
    "__docId__": 369,
    "kind": "test",
    "name": "describe111",
    "testId": 111,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe111",
    "access": null,
    "description": "play method",
    "lineNumber": 537
  },
  {
    "__docId__": 370,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe111",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe111.it112",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 538
  },
  {
    "__docId__": 371,
    "kind": "test",
    "name": "describe113",
    "testId": 113,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe113",
    "access": null,
    "description": "playWithId method",
    "lineNumber": 571
  },
  {
    "__docId__": 372,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe113",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe113.it114",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 572
  },
  {
    "__docId__": 373,
    "kind": "test",
    "name": "describe115",
    "testId": 115,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe115",
    "access": null,
    "description": "record method",
    "lineNumber": 604
  },
  {
    "__docId__": 374,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe115",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe115.it116",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 605
  },
  {
    "__docId__": 375,
    "kind": "test",
    "name": "describe117",
    "testId": 117,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe117",
    "access": null,
    "description": "getChannelVariable method",
    "lineNumber": 642
  },
  {
    "__docId__": 376,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe117",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe117.it118",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 643
  },
  {
    "__docId__": 377,
    "kind": "test",
    "name": "describe119",
    "testId": 119,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe119",
    "access": null,
    "description": "setChannelVariable method",
    "lineNumber": 666
  },
  {
    "__docId__": 378,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe119.it120",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 667
  },
  {
    "__docId__": 379,
    "kind": "test",
    "name": "describe121",
    "testId": 121,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe121",
    "access": null,
    "description": "snoopChannel method",
    "lineNumber": 694
  },
  {
    "__docId__": 380,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe121",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe121.it122",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 695
  },
  {
    "__docId__": 381,
    "kind": "test",
    "name": "describe123",
    "testId": 123,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe123",
    "access": null,
    "description": "snoopChannelWithId method",
    "lineNumber": 728
  },
  {
    "__docId__": 382,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe123",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe123.it124",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 729
  },
  {
    "__docId__": 383,
    "kind": "test",
    "name": "describe125",
    "testId": 125,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe125",
    "access": null,
    "description": "dial method",
    "lineNumber": 761
  },
  {
    "__docId__": 384,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "test/api/ChannelsAPI.spec.js~describe70.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/ChannelsAPI.spec.js~describe70.describe125.it126",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 762
  },
  {
    "__docId__": 385,
    "kind": "testFile",
    "name": "test/api/DeviceStatesAPI.spec.js",
    "content": "import nock from \"nock\";\nimport DeviceStatesAPI from \"../../src/api/DeviceStatesAPI\";\n\ndescribe(\"the DeviceStates API\", () => {\n  beforeEach(() => {\n    nock.disableNetConnect();\n  });\n\n  afterEach(() => {\n    nock.enableNetConnect();\n  });\n\n  describe(\"list method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/deviceStates\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new DeviceStatesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api.list().then(() => {\n        mock.done();\n      });\n    });\n  });\n\n  describe(\"get method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/deviceStates/foo\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new DeviceStatesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .get({\n          deviceName: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"update method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .put(\"/ari/deviceStates/foo\")\n        .query({ deviceState: \"INUSE\" })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new DeviceStatesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .update({\n          deviceName: \"foo\",\n          deviceState: \"INUSE\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"destroy method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/deviceStates/foo\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new DeviceStatesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .destroy({\n          deviceName: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/test/api/DeviceStatesAPI.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 386,
    "kind": "test",
    "name": "describe127",
    "testId": 127,
    "memberof": "test/api/DeviceStatesAPI.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/api/DeviceStatesAPI.spec.js~describe127",
    "access": null,
    "description": "the DeviceStates API",
    "lineNumber": 4
  },
  {
    "__docId__": 387,
    "kind": "test",
    "name": "describe128",
    "testId": 128,
    "memberof": "test/api/DeviceStatesAPI.spec.js~describe127",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/DeviceStatesAPI.spec.js~describe127.describe128",
    "access": null,
    "description": "list method",
    "lineNumber": 13
  },
  {
    "__docId__": 388,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "test/api/DeviceStatesAPI.spec.js~describe127.describe128",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/DeviceStatesAPI.spec.js~describe127.describe128.it129",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 14
  },
  {
    "__docId__": 389,
    "kind": "test",
    "name": "describe130",
    "testId": 130,
    "memberof": "test/api/DeviceStatesAPI.spec.js~describe127",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/DeviceStatesAPI.spec.js~describe127.describe130",
    "access": null,
    "description": "get method",
    "lineNumber": 31
  },
  {
    "__docId__": 390,
    "kind": "test",
    "name": "it131",
    "testId": 131,
    "memberof": "test/api/DeviceStatesAPI.spec.js~describe127.describe130",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/DeviceStatesAPI.spec.js~describe127.describe130.it131",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 32
  },
  {
    "__docId__": 391,
    "kind": "test",
    "name": "describe132",
    "testId": 132,
    "memberof": "test/api/DeviceStatesAPI.spec.js~describe127",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/DeviceStatesAPI.spec.js~describe127.describe132",
    "access": null,
    "description": "update method",
    "lineNumber": 53
  },
  {
    "__docId__": 392,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "test/api/DeviceStatesAPI.spec.js~describe127.describe132",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/DeviceStatesAPI.spec.js~describe127.describe132.it133",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 54
  },
  {
    "__docId__": 393,
    "kind": "test",
    "name": "describe134",
    "testId": 134,
    "memberof": "test/api/DeviceStatesAPI.spec.js~describe127",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/DeviceStatesAPI.spec.js~describe127.describe134",
    "access": null,
    "description": "destroy method",
    "lineNumber": 77
  },
  {
    "__docId__": 394,
    "kind": "test",
    "name": "it135",
    "testId": 135,
    "memberof": "test/api/DeviceStatesAPI.spec.js~describe127.describe134",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/DeviceStatesAPI.spec.js~describe127.describe134.it135",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 78
  },
  {
    "__docId__": 395,
    "kind": "testFile",
    "name": "test/api/EndpointsAPI.spec.js",
    "content": "import nock from \"nock\";\nimport EndpointsAPI from \"../../src/api/EndpointsAPI\";\n\ndescribe(\"the Endpoints API\", () => {\n  beforeEach(() => {\n    nock.disableNetConnect();\n  });\n\n  afterEach(() => {\n    nock.enableNetConnect();\n  });\n\n  describe(\"list method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/endpoints\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new EndpointsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api.list().then(() => {\n        mock.done();\n      });\n    });\n  });\n\n  describe(\"sendMessage method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .put(\"/ari/endpoints/sendMessage\", {\n          variables: { var1: \"cool\", var2: \"rad\" },\n        })\n        .query({\n          to: \"pjsip/foo\",\n          from: \"pjsip/baz\",\n          body: \"hidey ho\",\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new EndpointsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .sendMessage({\n          to: \"pjsip/foo\",\n          from: \"pjsip/baz\",\n          body: \"hidey ho\",\n          variables: { var1: \"cool\", var2: \"rad\" },\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"listByTechnology method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/endpoints/pjsip\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new EndpointsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .listByTechnology({\n          technology: \"pjsip\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"get method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/endpoints/pj%20sip/foo%20bar\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new EndpointsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .get({\n          technology: \"pj sip\",\n          resource: \"foo bar\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"sendMessageToEndpoint method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .put(\"/ari/endpoints/pjsip/foo/sendMessage\", {\n          variables: { var1: \"cool\", var2: \"nice\" },\n        })\n        .query({\n          from: \"pjsip/jenkins\",\n          body: \"hidey ho\",\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new EndpointsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .sendMessageToEndpoint({\n          technology: \"pjsip\",\n          resource: \"foo\",\n          from: \"pjsip/jenkins\",\n          body: \"hidey ho\",\n          variables: { var1: \"cool\", var2: \"nice\" },\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/test/api/EndpointsAPI.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 396,
    "kind": "test",
    "name": "describe136",
    "testId": 136,
    "memberof": "test/api/EndpointsAPI.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/api/EndpointsAPI.spec.js~describe136",
    "access": null,
    "description": "the Endpoints API",
    "lineNumber": 4
  },
  {
    "__docId__": 397,
    "kind": "test",
    "name": "describe137",
    "testId": 137,
    "memberof": "test/api/EndpointsAPI.spec.js~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/EndpointsAPI.spec.js~describe136.describe137",
    "access": null,
    "description": "list method",
    "lineNumber": 13
  },
  {
    "__docId__": 398,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "test/api/EndpointsAPI.spec.js~describe136.describe137",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/EndpointsAPI.spec.js~describe136.describe137.it138",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 14
  },
  {
    "__docId__": 399,
    "kind": "test",
    "name": "describe139",
    "testId": 139,
    "memberof": "test/api/EndpointsAPI.spec.js~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/EndpointsAPI.spec.js~describe136.describe139",
    "access": null,
    "description": "sendMessage method",
    "lineNumber": 31
  },
  {
    "__docId__": 400,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "test/api/EndpointsAPI.spec.js~describe136.describe139",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/EndpointsAPI.spec.js~describe136.describe139.it140",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 32
  },
  {
    "__docId__": 401,
    "kind": "test",
    "name": "describe141",
    "testId": 141,
    "memberof": "test/api/EndpointsAPI.spec.js~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/EndpointsAPI.spec.js~describe136.describe141",
    "access": null,
    "description": "listByTechnology method",
    "lineNumber": 63
  },
  {
    "__docId__": 402,
    "kind": "test",
    "name": "it142",
    "testId": 142,
    "memberof": "test/api/EndpointsAPI.spec.js~describe136.describe141",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/EndpointsAPI.spec.js~describe136.describe141.it142",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 64
  },
  {
    "__docId__": 403,
    "kind": "test",
    "name": "describe143",
    "testId": 143,
    "memberof": "test/api/EndpointsAPI.spec.js~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/EndpointsAPI.spec.js~describe136.describe143",
    "access": null,
    "description": "get method",
    "lineNumber": 85
  },
  {
    "__docId__": 404,
    "kind": "test",
    "name": "it144",
    "testId": 144,
    "memberof": "test/api/EndpointsAPI.spec.js~describe136.describe143",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/EndpointsAPI.spec.js~describe136.describe143.it144",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 86
  },
  {
    "__docId__": 405,
    "kind": "test",
    "name": "describe145",
    "testId": 145,
    "memberof": "test/api/EndpointsAPI.spec.js~describe136",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/EndpointsAPI.spec.js~describe136.describe145",
    "access": null,
    "description": "sendMessageToEndpoint method",
    "lineNumber": 108
  },
  {
    "__docId__": 406,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "test/api/EndpointsAPI.spec.js~describe136.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/EndpointsAPI.spec.js~describe136.describe145.it146",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 109
  },
  {
    "__docId__": 407,
    "kind": "testFile",
    "name": "test/api/EventsAPI.spec.js",
    "content": "import nock from \"nock\";\nimport EventsAPI from \"../../src/api/EventsAPI\";\n\ndescribe(\"the Events API\", () => {\n  beforeEach(() => {\n    nock.disableNetConnect();\n  });\n\n  afterEach(() => {\n    nock.enableNetConnect();\n  });\n\n  describe(\"generateUserEvent method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/events/user/fooCreated\", {\n          variables: { var1: \"cool\", var2: \"excellent\" },\n        })\n        .query({\n          application: \"fooApp\",\n          source: \"endpoint:pjsip/6001,deviceStatus:someDevice\",\n        })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new EventsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .generateUserEvent({\n          eventName: \"fooCreated\",\n          application: \"fooApp\",\n          source: [\"endpoint:pjsip/6001\", \"deviceStatus:someDevice\"],\n          variables: { var1: \"cool\", var2: \"excellent\" },\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/test/api/EventsAPI.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 408,
    "kind": "test",
    "name": "describe147",
    "testId": 147,
    "memberof": "test/api/EventsAPI.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/api/EventsAPI.spec.js~describe147",
    "access": null,
    "description": "the Events API",
    "lineNumber": 4
  },
  {
    "__docId__": 409,
    "kind": "test",
    "name": "describe148",
    "testId": 148,
    "memberof": "test/api/EventsAPI.spec.js~describe147",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/EventsAPI.spec.js~describe147.describe148",
    "access": null,
    "description": "generateUserEvent method",
    "lineNumber": 13
  },
  {
    "__docId__": 410,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "test/api/EventsAPI.spec.js~describe147.describe148",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/EventsAPI.spec.js~describe147.describe148.it149",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 14
  },
  {
    "__docId__": 411,
    "kind": "testFile",
    "name": "test/api/MailboxesAPI.spec.js",
    "content": "import nock from \"nock\";\nimport MailboxesAPI from \"../../src/api/MailboxesAPI\";\n\ndescribe(\"the Mailboxes API\", () => {\n  beforeEach(() => {\n    nock.disableNetConnect();\n  });\n\n  afterEach(() => {\n    nock.enableNetConnect();\n  });\n\n  describe(\"list method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/mailboxes\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new MailboxesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api.list().then(() => {\n        mock.done();\n      });\n    });\n  });\n\n  describe(\"get method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/mailboxes/foo\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new MailboxesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .get({\n          mailboxName: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"update method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .put(\"/ari/mailboxes/foo\")\n        .query({ oldMessages: 5, newMessages: 0 })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new MailboxesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .update({\n          mailboxName: \"foo\",\n          oldMessages: 5,\n          newMessages: 0,\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"destroy method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/mailboxes/foo\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new MailboxesAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .destroy({\n          mailboxName: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/test/api/MailboxesAPI.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 412,
    "kind": "test",
    "name": "describe150",
    "testId": 150,
    "memberof": "test/api/MailboxesAPI.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/api/MailboxesAPI.spec.js~describe150",
    "access": null,
    "description": "the Mailboxes API",
    "lineNumber": 4
  },
  {
    "__docId__": 413,
    "kind": "test",
    "name": "describe151",
    "testId": 151,
    "memberof": "test/api/MailboxesAPI.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/MailboxesAPI.spec.js~describe150.describe151",
    "access": null,
    "description": "list method",
    "lineNumber": 13
  },
  {
    "__docId__": 414,
    "kind": "test",
    "name": "it152",
    "testId": 152,
    "memberof": "test/api/MailboxesAPI.spec.js~describe150.describe151",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/MailboxesAPI.spec.js~describe150.describe151.it152",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 14
  },
  {
    "__docId__": 415,
    "kind": "test",
    "name": "describe153",
    "testId": 153,
    "memberof": "test/api/MailboxesAPI.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/MailboxesAPI.spec.js~describe150.describe153",
    "access": null,
    "description": "get method",
    "lineNumber": 31
  },
  {
    "__docId__": 416,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "test/api/MailboxesAPI.spec.js~describe150.describe153",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/MailboxesAPI.spec.js~describe150.describe153.it154",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 32
  },
  {
    "__docId__": 417,
    "kind": "test",
    "name": "describe155",
    "testId": 155,
    "memberof": "test/api/MailboxesAPI.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/MailboxesAPI.spec.js~describe150.describe155",
    "access": null,
    "description": "update method",
    "lineNumber": 53
  },
  {
    "__docId__": 418,
    "kind": "test",
    "name": "it156",
    "testId": 156,
    "memberof": "test/api/MailboxesAPI.spec.js~describe150.describe155",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/MailboxesAPI.spec.js~describe150.describe155.it156",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 54
  },
  {
    "__docId__": 419,
    "kind": "test",
    "name": "describe157",
    "testId": 157,
    "memberof": "test/api/MailboxesAPI.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/MailboxesAPI.spec.js~describe150.describe157",
    "access": null,
    "description": "destroy method",
    "lineNumber": 78
  },
  {
    "__docId__": 420,
    "kind": "test",
    "name": "it158",
    "testId": 158,
    "memberof": "test/api/MailboxesAPI.spec.js~describe150.describe157",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/MailboxesAPI.spec.js~describe150.describe157.it158",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 79
  },
  {
    "__docId__": 421,
    "kind": "testFile",
    "name": "test/api/PlaybacksAPI.spec.js",
    "content": "import nock from \"nock\";\nimport PlaybacksAPI from \"../../src/api/PlaybacksAPI\";\n\ndescribe(\"the Playbacks API\", () => {\n  beforeEach(() => {\n    nock.disableNetConnect();\n  });\n\n  afterEach(() => {\n    nock.enableNetConnect();\n  });\n\n  describe(\"get method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/playbacks/foo\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new PlaybacksAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .get({\n          playbackId: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"stop method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/playbacks/foo\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new PlaybacksAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .stop({\n          playbackId: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"control method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/playbacks/foo/control\")\n        .query({ operation: \"restart\" })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new PlaybacksAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .control({\n          playbackId: \"foo\",\n          operation: \"restart\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/test/api/PlaybacksAPI.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 422,
    "kind": "test",
    "name": "describe159",
    "testId": 159,
    "memberof": "test/api/PlaybacksAPI.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/api/PlaybacksAPI.spec.js~describe159",
    "access": null,
    "description": "the Playbacks API",
    "lineNumber": 4
  },
  {
    "__docId__": 423,
    "kind": "test",
    "name": "describe160",
    "testId": 160,
    "memberof": "test/api/PlaybacksAPI.spec.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/PlaybacksAPI.spec.js~describe159.describe160",
    "access": null,
    "description": "get method",
    "lineNumber": 13
  },
  {
    "__docId__": 424,
    "kind": "test",
    "name": "it161",
    "testId": 161,
    "memberof": "test/api/PlaybacksAPI.spec.js~describe159.describe160",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/PlaybacksAPI.spec.js~describe159.describe160.it161",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 14
  },
  {
    "__docId__": 425,
    "kind": "test",
    "name": "describe162",
    "testId": 162,
    "memberof": "test/api/PlaybacksAPI.spec.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/PlaybacksAPI.spec.js~describe159.describe162",
    "access": null,
    "description": "stop method",
    "lineNumber": 35
  },
  {
    "__docId__": 426,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "test/api/PlaybacksAPI.spec.js~describe159.describe162",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/PlaybacksAPI.spec.js~describe159.describe162.it163",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 36
  },
  {
    "__docId__": 427,
    "kind": "test",
    "name": "describe164",
    "testId": 164,
    "memberof": "test/api/PlaybacksAPI.spec.js~describe159",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/PlaybacksAPI.spec.js~describe159.describe164",
    "access": null,
    "description": "control method",
    "lineNumber": 57
  },
  {
    "__docId__": 428,
    "kind": "test",
    "name": "it165",
    "testId": 165,
    "memberof": "test/api/PlaybacksAPI.spec.js~describe159.describe164",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/PlaybacksAPI.spec.js~describe159.describe164.it165",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 58
  },
  {
    "__docId__": 429,
    "kind": "testFile",
    "name": "test/api/RecordingsAPI.spec.js",
    "content": "import nock from \"nock\";\nimport RecordingsAPI from \"../../src/api/RecordingsAPI\";\n\ndescribe(\"the Recordings API\", () => {\n  beforeEach(() => {\n    nock.disableNetConnect();\n  });\n\n  afterEach(() => {\n    nock.enableNetConnect();\n  });\n\n  describe(\"listStored method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/recordings/stored\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new RecordingsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api.listStored().then(() => {\n        mock.done();\n      });\n    });\n  });\n\n  describe(\"getStored method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/recordings/stored/foo\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new RecordingsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .getStored({\n          recordingName: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"destroyStored method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/recordings/stored/foo\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new RecordingsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .destroyStored({\n          recordingName: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"getStoredFile method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/recordings/stored/foo/file\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new RecordingsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .getStoredFile({\n          recordingName: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"copyStored method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/recordings/stored/foo/copy\")\n        .query({ destinationRecordingName: \"bar\" })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new RecordingsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .copyStored({\n          recordingName: \"foo\",\n          destinationRecordingName: \"bar\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"getLive method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/recordings/live/foo\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new RecordingsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .getLive({\n          recordingName: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"cancel method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/recordings/live/foo\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new RecordingsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .cancel({\n          recordingName: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"stop method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/recordings/live/foo/stop\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new RecordingsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .stop({\n          recordingName: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"pause method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/recordings/live/foo/pause\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new RecordingsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .pause({\n          recordingName: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"unpause method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/recordings/live/foo/pause\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new RecordingsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .unpause({\n          recordingName: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"mute method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .post(\"/ari/recordings/live/foo/mute\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new RecordingsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .mute({\n          recordingName: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"unmute method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .delete(\"/ari/recordings/live/foo/mute\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new RecordingsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .unmute({\n          recordingName: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/test/api/RecordingsAPI.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 430,
    "kind": "test",
    "name": "describe166",
    "testId": 166,
    "memberof": "test/api/RecordingsAPI.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166",
    "access": null,
    "description": "the Recordings API",
    "lineNumber": 4
  },
  {
    "__docId__": 431,
    "kind": "test",
    "name": "describe167",
    "testId": 167,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe167",
    "access": null,
    "description": "listStored method",
    "lineNumber": 13
  },
  {
    "__docId__": 432,
    "kind": "test",
    "name": "it168",
    "testId": 168,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166.describe167",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe167.it168",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 14
  },
  {
    "__docId__": 433,
    "kind": "test",
    "name": "describe169",
    "testId": 169,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe169",
    "access": null,
    "description": "getStored method",
    "lineNumber": 31
  },
  {
    "__docId__": 434,
    "kind": "test",
    "name": "it170",
    "testId": 170,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166.describe169",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe169.it170",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 32
  },
  {
    "__docId__": 435,
    "kind": "test",
    "name": "describe171",
    "testId": 171,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe171",
    "access": null,
    "description": "destroyStored method",
    "lineNumber": 53
  },
  {
    "__docId__": 436,
    "kind": "test",
    "name": "it172",
    "testId": 172,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166.describe171",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe171.it172",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 54
  },
  {
    "__docId__": 437,
    "kind": "test",
    "name": "describe173",
    "testId": 173,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe173",
    "access": null,
    "description": "getStoredFile method",
    "lineNumber": 75
  },
  {
    "__docId__": 438,
    "kind": "test",
    "name": "it174",
    "testId": 174,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166.describe173",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe173.it174",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 76
  },
  {
    "__docId__": 439,
    "kind": "test",
    "name": "describe175",
    "testId": 175,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe175",
    "access": null,
    "description": "copyStored method",
    "lineNumber": 97
  },
  {
    "__docId__": 440,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe175.it176",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 98
  },
  {
    "__docId__": 441,
    "kind": "test",
    "name": "describe177",
    "testId": 177,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe177",
    "access": null,
    "description": "getLive method",
    "lineNumber": 121
  },
  {
    "__docId__": 442,
    "kind": "test",
    "name": "it178",
    "testId": 178,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166.describe177",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe177.it178",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 122
  },
  {
    "__docId__": 443,
    "kind": "test",
    "name": "describe179",
    "testId": 179,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe179",
    "access": null,
    "description": "cancel method",
    "lineNumber": 143
  },
  {
    "__docId__": 444,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166.describe179",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe179.it180",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 144
  },
  {
    "__docId__": 445,
    "kind": "test",
    "name": "describe181",
    "testId": 181,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe181",
    "access": null,
    "description": "stop method",
    "lineNumber": 165
  },
  {
    "__docId__": 446,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166.describe181",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe181.it182",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 166
  },
  {
    "__docId__": 447,
    "kind": "test",
    "name": "describe183",
    "testId": 183,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe183",
    "access": null,
    "description": "pause method",
    "lineNumber": 187
  },
  {
    "__docId__": 448,
    "kind": "test",
    "name": "it184",
    "testId": 184,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166.describe183",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe183.it184",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 188
  },
  {
    "__docId__": 449,
    "kind": "test",
    "name": "describe185",
    "testId": 185,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe185",
    "access": null,
    "description": "unpause method",
    "lineNumber": 209
  },
  {
    "__docId__": 450,
    "kind": "test",
    "name": "it186",
    "testId": 186,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166.describe185",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe185.it186",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 210
  },
  {
    "__docId__": 451,
    "kind": "test",
    "name": "describe187",
    "testId": 187,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe187",
    "access": null,
    "description": "mute method",
    "lineNumber": 231
  },
  {
    "__docId__": 452,
    "kind": "test",
    "name": "it188",
    "testId": 188,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166.describe187",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe187.it188",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 232
  },
  {
    "__docId__": 453,
    "kind": "test",
    "name": "describe189",
    "testId": 189,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe189",
    "access": null,
    "description": "unmute method",
    "lineNumber": 253
  },
  {
    "__docId__": 454,
    "kind": "test",
    "name": "it190",
    "testId": 190,
    "memberof": "test/api/RecordingsAPI.spec.js~describe166.describe189",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/RecordingsAPI.spec.js~describe166.describe189.it190",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 254
  },
  {
    "__docId__": 455,
    "kind": "testFile",
    "name": "test/api/SoundsAPI.spec.js",
    "content": "import nock from \"nock\";\nimport SoundsAPI from \"../../src/api/SoundsAPI\";\n\ndescribe(\"the Sounds API\", () => {\n  beforeEach(() => {\n    nock.disableNetConnect();\n  });\n\n  afterEach(() => {\n    nock.enableNetConnect();\n  });\n\n  describe(\"list method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/sounds\")\n        .query({ lang: \"en\", format: \"ogg\" })\n        .reply(200, { foo: \"bar\" });\n\n      const api = new SoundsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .list({\n          lang: \"en\",\n          format: \"ogg\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n\n  describe(\"get method\", () => {\n    it(\"makes the right request\", () => {\n      const mock = nock(\"http://fake.local\")\n        .get(\"/ari/sounds/foo\")\n        .reply(200, { foo: \"bar\" });\n\n      const api = new SoundsAPI({\n        baseUrl: \"http://fake.local/ari\",\n        username: \"user\",\n        password: \"1234\",\n      });\n\n      return api\n        .get({\n          soundId: \"foo\",\n        })\n        .then(() => {\n          mock.done();\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/test/api/SoundsAPI.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 456,
    "kind": "test",
    "name": "describe191",
    "testId": 191,
    "memberof": "test/api/SoundsAPI.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/api/SoundsAPI.spec.js~describe191",
    "access": null,
    "description": "the Sounds API",
    "lineNumber": 4
  },
  {
    "__docId__": 457,
    "kind": "test",
    "name": "describe192",
    "testId": 192,
    "memberof": "test/api/SoundsAPI.spec.js~describe191",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/SoundsAPI.spec.js~describe191.describe192",
    "access": null,
    "description": "list method",
    "lineNumber": 13
  },
  {
    "__docId__": 458,
    "kind": "test",
    "name": "it193",
    "testId": 193,
    "memberof": "test/api/SoundsAPI.spec.js~describe191.describe192",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/SoundsAPI.spec.js~describe191.describe192.it193",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 14
  },
  {
    "__docId__": 459,
    "kind": "test",
    "name": "describe194",
    "testId": 194,
    "memberof": "test/api/SoundsAPI.spec.js~describe191",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/SoundsAPI.spec.js~describe191.describe194",
    "access": null,
    "description": "get method",
    "lineNumber": 37
  },
  {
    "__docId__": 460,
    "kind": "test",
    "name": "it195",
    "testId": 195,
    "memberof": "test/api/SoundsAPI.spec.js~describe191.describe194",
    "testDepth": 2,
    "static": true,
    "longname": "test/api/SoundsAPI.spec.js~describe191.describe194.it195",
    "access": null,
    "description": "makes the right request",
    "lineNumber": 38
  },
  {
    "__docId__": 461,
    "kind": "testFile",
    "name": "test/api/index.spec.js",
    "content": "import assert from \"assert\";\nimport API from \"../../src/api\";\nimport ApplicationsAPI from \"../../src/api/ApplicationsAPI\";\nimport AsteriskAPI from \"../../src/api/AsteriskAPI\";\nimport BridgesAPI from \"../../src/api/BridgesAPI\";\nimport DeviceStatesAPI from \"../../src/api/DeviceStatesAPI\";\nimport EndpointsAPI from \"../../src/api/EndpointsAPI\";\nimport EventsAPI from \"../../src/api/EventsAPI\";\nimport MailboxesAPI from \"../../src/api/MailboxesAPI\";\nimport PlaybacksAPI from \"../../src/api/PlaybacksAPI\";\nimport RecordingsAPI from \"../../src/api/RecordingsAPI\";\nimport SoundsAPI from \"../../src/api/SoundsAPI\";\nimport ChannelsAPI from \"../../src/api/ChannelsAPI\";\n\ndescribe(\"API constructed instance\", () => {\n  let api;\n\n  beforeEach(() => {\n    api = new API({\n      username: \"username\",\n      password: \"password\",\n      baseUrl: \"http://127.0.0.1/ari\",\n    });\n  });\n\n  it(\"exposes an applications API instance\", () => {\n    assert(api.applications instanceof ApplicationsAPI);\n  });\n\n  it(\"exposes an asterisk API instance\", () => {\n    assert(api.asterisk instanceof AsteriskAPI);\n  });\n\n  it(\"exposes a bridges API instance\", () => {\n    assert(api.bridges instanceof BridgesAPI);\n  });\n\n  it(\"exposes a device states API instance\", () => {\n    assert(api.deviceStates instanceof DeviceStatesAPI);\n  });\n\n  it(\"exposes a endpoints API instance\", () => {\n    assert(api.endpoints instanceof EndpointsAPI);\n  });\n\n  it(\"exposes a events API instance\", () => {\n    assert(api.events instanceof EventsAPI);\n  });\n\n  it(\"exposes a mailboxes API instance\", () => {\n    assert(api.mailboxes instanceof MailboxesAPI);\n  });\n\n  it(\"exposes a playbacks API instance\", () => {\n    assert(api.playbacks instanceof PlaybacksAPI);\n  });\n\n  it(\"exposes a recordings API instance\", () => {\n    assert(api.recordings instanceof RecordingsAPI);\n  });\n\n  it(\"exposes a sounds API instance\", () => {\n    assert(api.sounds instanceof SoundsAPI);\n  });\n\n  it(\"exposes a channels API instance\", () => {\n    assert(api.channels instanceof ChannelsAPI);\n  });\n});\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/test/api/index.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 462,
    "kind": "test",
    "name": "describe196",
    "testId": 196,
    "memberof": "test/api/index.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/api/index.spec.js~describe196",
    "access": null,
    "description": "API constructed instance",
    "lineNumber": 15
  },
  {
    "__docId__": 463,
    "kind": "test",
    "name": "it197",
    "testId": 197,
    "memberof": "test/api/index.spec.js~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/index.spec.js~describe196.it197",
    "access": null,
    "description": "exposes an applications API instance",
    "lineNumber": 26
  },
  {
    "__docId__": 464,
    "kind": "test",
    "name": "it198",
    "testId": 198,
    "memberof": "test/api/index.spec.js~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/index.spec.js~describe196.it198",
    "access": null,
    "description": "exposes an asterisk API instance",
    "lineNumber": 30
  },
  {
    "__docId__": 465,
    "kind": "test",
    "name": "it199",
    "testId": 199,
    "memberof": "test/api/index.spec.js~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/index.spec.js~describe196.it199",
    "access": null,
    "description": "exposes a bridges API instance",
    "lineNumber": 34
  },
  {
    "__docId__": 466,
    "kind": "test",
    "name": "it200",
    "testId": 200,
    "memberof": "test/api/index.spec.js~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/index.spec.js~describe196.it200",
    "access": null,
    "description": "exposes a device states API instance",
    "lineNumber": 38
  },
  {
    "__docId__": 467,
    "kind": "test",
    "name": "it201",
    "testId": 201,
    "memberof": "test/api/index.spec.js~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/index.spec.js~describe196.it201",
    "access": null,
    "description": "exposes a endpoints API instance",
    "lineNumber": 42
  },
  {
    "__docId__": 468,
    "kind": "test",
    "name": "it202",
    "testId": 202,
    "memberof": "test/api/index.spec.js~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/index.spec.js~describe196.it202",
    "access": null,
    "description": "exposes a events API instance",
    "lineNumber": 46
  },
  {
    "__docId__": 469,
    "kind": "test",
    "name": "it203",
    "testId": 203,
    "memberof": "test/api/index.spec.js~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/index.spec.js~describe196.it203",
    "access": null,
    "description": "exposes a mailboxes API instance",
    "lineNumber": 50
  },
  {
    "__docId__": 470,
    "kind": "test",
    "name": "it204",
    "testId": 204,
    "memberof": "test/api/index.spec.js~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/index.spec.js~describe196.it204",
    "access": null,
    "description": "exposes a playbacks API instance",
    "lineNumber": 54
  },
  {
    "__docId__": 471,
    "kind": "test",
    "name": "it205",
    "testId": 205,
    "memberof": "test/api/index.spec.js~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/index.spec.js~describe196.it205",
    "access": null,
    "description": "exposes a recordings API instance",
    "lineNumber": 58
  },
  {
    "__docId__": 472,
    "kind": "test",
    "name": "it206",
    "testId": 206,
    "memberof": "test/api/index.spec.js~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/index.spec.js~describe196.it206",
    "access": null,
    "description": "exposes a sounds API instance",
    "lineNumber": 62
  },
  {
    "__docId__": 473,
    "kind": "test",
    "name": "it207",
    "testId": 207,
    "memberof": "test/api/index.spec.js~describe196",
    "testDepth": 1,
    "static": true,
    "longname": "test/api/index.spec.js~describe196.it207",
    "access": null,
    "description": "exposes a channels API instance",
    "lineNumber": 66
  },
  {
    "__docId__": 474,
    "kind": "testFile",
    "name": "test/events/ARIWebSocket.spec.js",
    "content": "import ws from \"ws\";\nimport assert from \"assert\";\nimport ARIWebSocket from \"../../src/events/ARIWebSocket\";\nconst WebSocketServer = ws.Server;\n\ndescribe(\"ARIWebSocket\", () => {\n  let ws;\n  let server;\n\n  beforeEach(() => {\n    server = new WebSocketServer({ port: 8088 });\n  });\n\n  afterEach(() => {\n    // important to close client first so it does not try\n    // to reconnect and cause issues in subsequent tests\n    if (ws) ws.close();\n    server.close();\n  });\n\n  it('passes non-\"message\" events along without parsing', (done) => {\n    ws = new ARIWebSocket({ url: \"ws://localhost:8088\" });\n\n    ws.once(\"open\", () => {\n      ws.once(\"bugaboo\", (message) => {\n        assert.strictEqual(message, \"bugaloo\");\n        done();\n      });\n\n      ws.emit(\"bugaboo\", \"bugaloo\");\n    });\n  });\n\n  it('passes \"message\" events without a payload along without parsing', (done) => {\n    ws = new ARIWebSocket({ url: \"ws://localhost:8088\" });\n\n    server.once(\"connection\", (conn) => {\n      ws.on(\"message\", (message) => {\n        assert.deepEqual(message, new Uint8Array(0));\n        done();\n      });\n\n      conn.send();\n    });\n  });\n\n  it('passes \"message\" events that are not string along without parsing', (done) => {\n    ws = new ARIWebSocket({ url: \"ws://localhost:8088\" });\n    const buf = Buffer.from(\"string\");\n\n    server.once(\"connection\", (conn) => {\n      ws.once(\"message\", (message) => {\n        assert.strictEqual(message.toString(\"utf-8\"), buf.toString(\"utf-8\"));\n        done();\n      });\n\n      conn.send(buf);\n    });\n  });\n\n  it('passes string \"message\" events that cannot be parsed as JSON along as-is', (done) => {\n    ws = new ARIWebSocket({ url: \"ws://localhost:8088\" });\n\n    server.once(\"connection\", (conn) => {\n      ws.once(\"message\", (message) => {\n        assert.strictEqual(message, \"hidey ho\");\n        done();\n      });\n\n      conn.send(\"hidey ho\");\n    });\n  });\n\n  it('parses JSON \"message\" payloads before triggering the event', (done) => {\n    ws = new ARIWebSocket({ url: \"ws://localhost:8088\" });\n\n    server.once(\"connection\", (conn) => {\n      ws.once(\"message\", (message) => {\n        assert.deepEqual(message, { foo: \"bar\" });\n        done();\n      });\n\n      conn.send('{\"foo\": \"bar\"}');\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/test/events/ARIWebSocket.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 475,
    "kind": "test",
    "name": "describe208",
    "testId": 208,
    "memberof": "test/events/ARIWebSocket.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/events/ARIWebSocket.spec.js~describe208",
    "access": null,
    "description": "ARIWebSocket",
    "lineNumber": 6
  },
  {
    "__docId__": 476,
    "kind": "test",
    "name": "it209",
    "testId": 209,
    "memberof": "test/events/ARIWebSocket.spec.js~describe208",
    "testDepth": 1,
    "static": true,
    "longname": "test/events/ARIWebSocket.spec.js~describe208.it209",
    "access": null,
    "description": "passes non-\"message\" events along without parsing",
    "lineNumber": 21
  },
  {
    "__docId__": 477,
    "kind": "test",
    "name": "it210",
    "testId": 210,
    "memberof": "test/events/ARIWebSocket.spec.js~describe208",
    "testDepth": 1,
    "static": true,
    "longname": "test/events/ARIWebSocket.spec.js~describe208.it210",
    "access": null,
    "description": "passes \"message\" events without a payload along without parsing",
    "lineNumber": 34
  },
  {
    "__docId__": 478,
    "kind": "test",
    "name": "it211",
    "testId": 211,
    "memberof": "test/events/ARIWebSocket.spec.js~describe208",
    "testDepth": 1,
    "static": true,
    "longname": "test/events/ARIWebSocket.spec.js~describe208.it211",
    "access": null,
    "description": "passes \"message\" events that are not string along without parsing",
    "lineNumber": 47
  },
  {
    "__docId__": 479,
    "kind": "test",
    "name": "it212",
    "testId": 212,
    "memberof": "test/events/ARIWebSocket.spec.js~describe208",
    "testDepth": 1,
    "static": true,
    "longname": "test/events/ARIWebSocket.spec.js~describe208.it212",
    "access": null,
    "description": "passes string \"message\" events that cannot be parsed as JSON along as-is",
    "lineNumber": 61
  },
  {
    "__docId__": 480,
    "kind": "test",
    "name": "it213",
    "testId": 213,
    "memberof": "test/events/ARIWebSocket.spec.js~describe208",
    "testDepth": 1,
    "static": true,
    "longname": "test/events/ARIWebSocket.spec.js~describe208.it213",
    "access": null,
    "description": "parses JSON \"message\" payloads before triggering the event",
    "lineNumber": 74
  },
  {
    "__docId__": 481,
    "kind": "testFile",
    "name": "test/events/ReconnectingWebsocket.spec.js",
    "content": "import ws from \"ws\";\nimport assert from \"assert\";\nimport ReconnectingWebSocket from \"../../src/events/ReconnectingWebSocket\";\nconst WebSocketServer = ws.Server;\n\ndescribe(\"ReconnectingWebSocket\", () => {\n  describe(\"by default\", () => {\n    let ws;\n    let server;\n\n    beforeEach(() => {\n      server = new WebSocketServer({ port: 8088 });\n    });\n\n    afterEach(() => {\n      // important to close client first so it does not try\n      // to reconnect and cause issues in subsequent tests\n      ws.close();\n      server.close();\n    });\n\n    it(\"connects upon creation\", (done) => {\n      ws = new ReconnectingWebSocket({ url: \"ws://localhost:8088\" });\n      server.on(\"connection\", (conn) => {\n        ws.on(\"open\", () => {\n          assert(conn);\n          done();\n        });\n      });\n    });\n\n    it('emits an \"open\" event on connection', (done) => {\n      ws = new ReconnectingWebSocket({ url: \"ws://localhost:8088\" });\n      ws.once(\"open\", done);\n    });\n\n    it(\"disconnects when close is called\", (done) => {\n      ws = new ReconnectingWebSocket({\n        url: \"ws://localhost:8088\",\n        reconnect: false,\n      });\n\n      server.once(\"connection\", (conn) => {\n        conn.once(\"close\", () => {\n          done();\n        });\n      });\n\n      ws.once(\"open\", () => ws.close());\n    });\n\n    it('emits a \"message\" event when a message is received', (done) => {\n      ws = new ReconnectingWebSocket({ url: \"ws://localhost:8088\" });\n\n      server.once(\"connection\", (conn) => {\n        ws.once(\"message\", (message) => {\n          assert.strictEqual(message, \"hidey ho\");\n          done();\n        });\n\n        conn.send(\"hidey ho\");\n      });\n    });\n  });\n\n  describe(\"when no connection can be established on create\", () => {\n    let ws;\n    let server;\n\n    beforeEach(() => {\n      server = new WebSocketServer({\n        port: 8088,\n        verifyClient: (info, verify) => {\n          verify(false, 666, \"fail\");\n        },\n      });\n    });\n\n    afterEach(() => {\n      // important to close client first so it does not try\n      // to reconnect and cause issues in subsequent tests\n      ws.close();\n      server.close();\n    });\n\n    it('emits \"error\" event', (done) => {\n      ws = new ReconnectingWebSocket({\n        url: \"ws://localhost:8088\",\n        reconnect: false,\n      });\n\n      ws.on(\"error\", (err) => {\n        assert(err);\n        done();\n      });\n    });\n\n    it('emits \"close\" event', (done) => {\n      ws = new ReconnectingWebSocket({\n        url: \"ws://localhost:8088\",\n        reconnect: false,\n      });\n\n      ws.on(\"error\", () => {});\n      ws.on(\"close\", done);\n    });\n  });\n\n  describe(\"when an error occurs after being connected\", () => {\n    describe(\"and reconnect is disabled\", () => {\n      let ws;\n      let server;\n\n      beforeEach(() => {\n        server = new WebSocketServer({ port: 8088 });\n      });\n\n      afterEach(() => {\n        // important to close client first so it does not try\n        // to reconnect and cause issues in subsequent tests\n        ws.close();\n        server.close();\n      });\n\n      it('emits an \"error\" event', (done) => {\n        ws = new ReconnectingWebSocket({\n          url: \"ws://localhost:8088\",\n          reconnect: false,\n        });\n\n        ws.on(\"open\", () => {\n          // TODO: come up with a better way to emulate this\n          ws._ws.emit(\"error\", new Error(\"dangit\"));\n        });\n\n        ws.once(\"error\", (err) => {\n          assert(err);\n          done();\n        });\n      });\n\n      it('emits a \"close\" event', (done) => {\n        ws = new ReconnectingWebSocket({\n          url: \"ws://localhost:8088\",\n          reconnect: false,\n        });\n\n        ws.on(\"open\", () => {\n          // TODO: come up with a better way to emulate this\n          ws._ws.emit(\"error\", new Error(\"dangit\"));\n        });\n\n        ws.on(\"error\", () => {});\n        ws.once(\"close\", done);\n      });\n    });\n\n    describe(\"and reconnect is enabled\", () => {\n      describe(\"and the server allows the reconnect\", () => {\n        let ws;\n        let server;\n\n        beforeEach(() => {\n          server = new WebSocketServer({ port: 8088 });\n        });\n\n        afterEach(() => {\n          // important to close client first so it does not try\n          // to reconnect and cause issues in subsequent tests\n          ws.close();\n          server.close();\n        });\n\n        it(\"reconnects\", (done) => {\n          let connectCount = 0;\n          let reconnected = false;\n\n          ws = new ReconnectingWebSocket({ url: \"ws://localhost:8088\" });\n\n          server.on(\"connection\", () => {\n            connectCount++;\n            reconnected = connectCount === 2;\n          });\n\n          ws.on(\"open\", () => {\n            // TODO: come up with a better way to emulate this\n            ws._ws.emit(\"error\", new Error(\"dangit\"));\n          });\n\n          ws.on(\"reconnected\", () => {\n            assert(reconnected);\n            done();\n          });\n        });\n      });\n\n      describe(\"but the reconnect fails\", () => {\n        describe(\"and retries are disabled\", () => {\n          let ws;\n          let server;\n\n          beforeEach(() => {\n            let numConnectionAttempts = 0;\n            server = new WebSocketServer({\n              port: 8088,\n              verifyClient: (info, verify) => {\n                numConnectionAttempts++;\n                verify(numConnectionAttempts === 1, 666, \"fail\");\n              },\n            });\n          });\n\n          afterEach(() => {\n            // important to close client first so it does not try\n            // to reconnect and cause issues in subsequent tests\n            ws.close();\n            server.close();\n          });\n\n          it('emits an \"error\" event', (done) => {\n            ws = new ReconnectingWebSocket({\n              url: \"ws://localhost:8088\",\n              retryOptions: { retries: 0 },\n            });\n\n            ws.on(\"open\", () => {\n              // TODO: come up with a better way to emulate this\n              ws._ws.emit(\"error\", new Error(\"dangit\"));\n            });\n\n            ws.once(\"error\", (err) => {\n              assert(err);\n              done();\n            });\n          });\n\n          it('emits a \"close\" event', (done) => {\n            ws = new ReconnectingWebSocket({\n              url: \"ws://localhost:8088\",\n              retryOptions: { retries: 0 },\n            });\n\n            ws.on(\"open\", () => {\n              // TODO: come up with a better way to emulate this\n              ws._ws.emit(\"error\", new Error(\"dangit\"));\n            });\n\n            ws.on(\"error\", () => {});\n            ws.once(\"close\", () => {\n              done();\n            });\n          });\n        });\n\n        describe(\"but retries are enabled and the retry succeeds\", () => {\n          let ws;\n          let server;\n\n          beforeEach(() => {\n            let numConnectionAttempts = 0;\n            server = new WebSocketServer({\n              port: 8088,\n              verifyClient: (info, verify) => {\n                numConnectionAttempts++;\n                verify(numConnectionAttempts % 2 === 0, 666, \"fail\");\n              },\n            });\n          });\n\n          afterEach(() => {\n            // important to close client first so it does not try\n            // to reconnect and cause issues in subsequent tests\n            ws.close();\n            server.close();\n          });\n\n          it(\"reconnects\", (done) => {\n            ws = new ReconnectingWebSocket({\n              url: \"ws://localhost:8088\",\n              retryOptions: { retries: 1 },\n            });\n\n            ws.on(\"open\", () => {\n              // TODO: come up with a better way to emulate this\n              ws._ws.emit(\"error\", new Error(\"dangit\"));\n            });\n\n            ws.once(\"reconnected\", () => {\n              done();\n            });\n          });\n        });\n      });\n    });\n  });\n\n  describe(\"when the server closes the connection\", () => {\n    describe(\"and reconnect is disabled\", () => {\n      let ws;\n      let server;\n\n      beforeEach(() => {\n        server = new WebSocketServer({ port: 8088 });\n      });\n\n      afterEach(() => {\n        // important to close client first so it does not try\n        // to reconnect and cause issues in subsequent tests\n        ws.close();\n        server.close();\n      });\n\n      it('emits a \"close\" event', (done) => {\n        ws = new ReconnectingWebSocket({\n          url: \"ws://localhost:8088\",\n          reconnect: false,\n        });\n\n        server.once(\"connection\", (conn) => {\n          ws.once(\"open\", () => {\n            conn.close();\n          });\n        });\n\n        ws.once(\"close\", done);\n      });\n    });\n\n    describe(\"and reconnect is enabled\", () => {\n      describe(\"and the server allows the reconnect\", () => {\n        let ws;\n        let server;\n\n        beforeEach(() => {\n          server = new WebSocketServer({ port: 8088 });\n        });\n\n        afterEach(() => {\n          // important to close client first so it does not try\n          // to reconnect and cause issues in subsequent tests\n          ws.close();\n          server.close();\n        });\n\n        it(\"reconnects\", (done) => {\n          let connectCount = 0;\n          let reconnected = false;\n\n          ws = new ReconnectingWebSocket({ url: \"ws://localhost:8088\" });\n          server.on(\"connection\", (conn) => {\n            connectCount++;\n            reconnected = connectCount === 2;\n\n            if (connectCount === 1) {\n              ws.once(\"open\", () => {\n                conn.close();\n              });\n            }\n          });\n\n          ws.once(\"reconnected\", () => {\n            assert(reconnected);\n            done();\n          });\n        });\n      });\n\n      describe(\"but the reconnect fails\", () => {\n        let ws;\n        let server;\n\n        beforeEach(() => {\n          let numConnectionAttempts = 0;\n          server = new WebSocketServer({\n            port: 8088,\n            verifyClient: (info, verify) => {\n              numConnectionAttempts++;\n              verify(numConnectionAttempts === 1, 666, \"fail\");\n            },\n          });\n        });\n\n        afterEach(() => {\n          // important to close client first so it does not try\n          // to reconnect and cause issues in subsequent tests\n          ws.close();\n          server.close();\n        });\n\n        it('emits an \"error\" event', (done) => {\n          ws = new ReconnectingWebSocket({\n            url: \"ws://localhost:8088\",\n            retryOptions: { retries: 0 },\n          });\n\n          server.once(\"connection\", (conn) => {\n            ws.once(\"open\", () => {\n              conn.close();\n            });\n          });\n\n          ws.once(\"error\", (err) => {\n            assert(err);\n            done();\n          });\n        });\n\n        it('emits a \"close\" event', (done) => {\n          ws = new ReconnectingWebSocket({\n            url: \"ws://localhost:8088\",\n            retryOptions: { retries: 0 },\n          });\n\n          server.once(\"connection\", (conn) => {\n            ws.once(\"open\", () => {\n              conn.close();\n            });\n          });\n\n          ws.on(\"error\", () => {});\n          ws.once(\"close\", () => {\n            done();\n          });\n        });\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/test/events/ReconnectingWebsocket.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 482,
    "kind": "test",
    "name": "describe214",
    "testId": 214,
    "memberof": "test/events/ReconnectingWebsocket.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214",
    "access": null,
    "description": "ReconnectingWebSocket",
    "lineNumber": 6
  },
  {
    "__docId__": 483,
    "kind": "test",
    "name": "describe215",
    "testId": 215,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214",
    "testDepth": 1,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe215",
    "access": null,
    "description": "by default",
    "lineNumber": 7
  },
  {
    "__docId__": 484,
    "kind": "test",
    "name": "it216",
    "testId": 216,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe215",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe215.it216",
    "access": null,
    "description": "connects upon creation",
    "lineNumber": 22
  },
  {
    "__docId__": 485,
    "kind": "test",
    "name": "it217",
    "testId": 217,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe215",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe215.it217",
    "access": null,
    "description": "emits an \"open\" event on connection",
    "lineNumber": 32
  },
  {
    "__docId__": 486,
    "kind": "test",
    "name": "it218",
    "testId": 218,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe215",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe215.it218",
    "access": null,
    "description": "disconnects when close is called",
    "lineNumber": 37
  },
  {
    "__docId__": 487,
    "kind": "test",
    "name": "it219",
    "testId": 219,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe215",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe215.it219",
    "access": null,
    "description": "emits a \"message\" event when a message is received",
    "lineNumber": 52
  },
  {
    "__docId__": 488,
    "kind": "test",
    "name": "describe220",
    "testId": 220,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214",
    "testDepth": 1,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe220",
    "access": null,
    "description": "when no connection can be established on create",
    "lineNumber": 66
  },
  {
    "__docId__": 489,
    "kind": "test",
    "name": "it221",
    "testId": 221,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe220",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe220.it221",
    "access": null,
    "description": "emits \"error\" event",
    "lineNumber": 86
  },
  {
    "__docId__": 490,
    "kind": "test",
    "name": "it222",
    "testId": 222,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe220",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe220.it222",
    "access": null,
    "description": "emits \"close\" event",
    "lineNumber": 98
  },
  {
    "__docId__": 491,
    "kind": "test",
    "name": "describe223",
    "testId": 223,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214",
    "testDepth": 1,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223",
    "access": null,
    "description": "when an error occurs after being connected",
    "lineNumber": 109
  },
  {
    "__docId__": 492,
    "kind": "test",
    "name": "describe224",
    "testId": 224,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe224",
    "access": null,
    "description": "and reconnect is disabled",
    "lineNumber": 110
  },
  {
    "__docId__": 493,
    "kind": "test",
    "name": "it225",
    "testId": 225,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe224",
    "testDepth": 3,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe224.it225",
    "access": null,
    "description": "emits an \"error\" event",
    "lineNumber": 125
  },
  {
    "__docId__": 494,
    "kind": "test",
    "name": "it226",
    "testId": 226,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe224",
    "testDepth": 3,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe224.it226",
    "access": null,
    "description": "emits a \"close\" event",
    "lineNumber": 142
  },
  {
    "__docId__": 495,
    "kind": "test",
    "name": "describe227",
    "testId": 227,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe227",
    "access": null,
    "description": "and reconnect is enabled",
    "lineNumber": 158
  },
  {
    "__docId__": 496,
    "kind": "test",
    "name": "describe228",
    "testId": 228,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe227",
    "testDepth": 3,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe227.describe228",
    "access": null,
    "description": "and the server allows the reconnect",
    "lineNumber": 159
  },
  {
    "__docId__": 497,
    "kind": "test",
    "name": "it229",
    "testId": 229,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe227.describe228",
    "testDepth": 4,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe227.describe228.it229",
    "access": null,
    "description": "reconnects",
    "lineNumber": 174
  },
  {
    "__docId__": 498,
    "kind": "test",
    "name": "describe230",
    "testId": 230,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe227",
    "testDepth": 3,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe227.describe230",
    "access": null,
    "description": "but the reconnect fails",
    "lineNumber": 197
  },
  {
    "__docId__": 499,
    "kind": "test",
    "name": "describe231",
    "testId": 231,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe227.describe230",
    "testDepth": 4,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe227.describe230.describe231",
    "access": null,
    "description": "and retries are disabled",
    "lineNumber": 198
  },
  {
    "__docId__": 500,
    "kind": "test",
    "name": "it232",
    "testId": 232,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe227.describe230.describe231",
    "testDepth": 5,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe227.describe230.describe231.it232",
    "access": null,
    "description": "emits an \"error\" event",
    "lineNumber": 220
  },
  {
    "__docId__": 501,
    "kind": "test",
    "name": "it233",
    "testId": 233,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe227.describe230.describe231",
    "testDepth": 5,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe227.describe230.describe231.it233",
    "access": null,
    "description": "emits a \"close\" event",
    "lineNumber": 237
  },
  {
    "__docId__": 502,
    "kind": "test",
    "name": "describe234",
    "testId": 234,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe227.describe230",
    "testDepth": 4,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe227.describe230.describe234",
    "access": null,
    "description": "but retries are enabled and the retry succeeds",
    "lineNumber": 255
  },
  {
    "__docId__": 503,
    "kind": "test",
    "name": "it235",
    "testId": 235,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe227.describe230.describe234",
    "testDepth": 5,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe223.describe227.describe230.describe234.it235",
    "access": null,
    "description": "reconnects",
    "lineNumber": 277
  },
  {
    "__docId__": 504,
    "kind": "test",
    "name": "describe236",
    "testId": 236,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214",
    "testDepth": 1,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe236",
    "access": null,
    "description": "when the server closes the connection",
    "lineNumber": 297
  },
  {
    "__docId__": 505,
    "kind": "test",
    "name": "describe237",
    "testId": 237,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe236",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe236.describe237",
    "access": null,
    "description": "and reconnect is disabled",
    "lineNumber": 298
  },
  {
    "__docId__": 506,
    "kind": "test",
    "name": "it238",
    "testId": 238,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe236.describe237",
    "testDepth": 3,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe236.describe237.it238",
    "access": null,
    "description": "emits a \"close\" event",
    "lineNumber": 313
  },
  {
    "__docId__": 507,
    "kind": "test",
    "name": "describe239",
    "testId": 239,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe236",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe236.describe239",
    "access": null,
    "description": "and reconnect is enabled",
    "lineNumber": 329
  },
  {
    "__docId__": 508,
    "kind": "test",
    "name": "describe240",
    "testId": 240,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe236.describe239",
    "testDepth": 3,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe236.describe239.describe240",
    "access": null,
    "description": "and the server allows the reconnect",
    "lineNumber": 330
  },
  {
    "__docId__": 509,
    "kind": "test",
    "name": "it241",
    "testId": 241,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe236.describe239.describe240",
    "testDepth": 4,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe236.describe239.describe240.it241",
    "access": null,
    "description": "reconnects",
    "lineNumber": 345
  },
  {
    "__docId__": 510,
    "kind": "test",
    "name": "describe242",
    "testId": 242,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe236.describe239",
    "testDepth": 3,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe236.describe239.describe242",
    "access": null,
    "description": "but the reconnect fails",
    "lineNumber": 368
  },
  {
    "__docId__": 511,
    "kind": "test",
    "name": "it243",
    "testId": 243,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe236.describe239.describe242",
    "testDepth": 4,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe236.describe239.describe242.it243",
    "access": null,
    "description": "emits an \"error\" event",
    "lineNumber": 390
  },
  {
    "__docId__": 512,
    "kind": "test",
    "name": "it244",
    "testId": 244,
    "memberof": "test/events/ReconnectingWebsocket.spec.js~describe214.describe236.describe239.describe242",
    "testDepth": 4,
    "static": true,
    "longname": "test/events/ReconnectingWebsocket.spec.js~describe214.describe236.describe239.describe242.it244",
    "access": null,
    "description": "emits a \"close\" event",
    "lineNumber": 408
  },
  {
    "__docId__": 513,
    "kind": "testFile",
    "name": "test/events/index.spec.js",
    "content": "import { URL } from \"url\";\nimport assert from \"assert\";\nimport ws from \"ws\";\nimport Events from \"../../src/events\";\nconst WebSocketServer = ws.Server;\n\ndescribe(\"Events connect() returned emitter\", () => {\n  describe(\"when passed a single app\", () => {\n    let server;\n    let emitter;\n\n    beforeEach(() => {\n      server = new WebSocketServer({ port: 8088 });\n    });\n\n    afterEach(() => {\n      if (emitter) emitter.close();\n      server.close();\n    });\n\n    it(\"subscribes to a single app\", (done) => {\n      emitter = Events.connect({\n        app: \"myApp\",\n        url: \"ws://localhost:8088/\",\n        username: \"foo\",\n        password: \"bar\",\n      });\n\n      server.once(\"connection\", (conn, req) => {\n        emitter.once(\"open\", () => {\n          const parts = new URL(req.url, \"ws://localhost:8088/\");\n          assert.strictEqual(parts.searchParams.get(\"app\"), \"myApp\");\n          done();\n        });\n      });\n    });\n  });\n\n  describe(\"when passed multiple apps\", () => {\n    let server;\n    let emitter;\n\n    beforeEach(() => {\n      server = new WebSocketServer({ port: 8088 });\n    });\n\n    afterEach(() => {\n      emitter.close();\n      server.close();\n    });\n\n    it(\"subscribes to all of the apps\", (done) => {\n      emitter = Events.connect({\n        app: [\"app1\", \"app2\", \"app3\"],\n        url: \"ws://localhost:8088/\",\n        username: \"foo\",\n        password: \"bar\",\n      });\n\n      server.once(\"connection\", (conn, req) => {\n        emitter.once(\"open\", () => {\n          const parts = new URL(req.url, \"ws://localhost:8088/\");\n          assert.strictEqual(parts.searchParams.get(\"app\"), \"app1,app2,app3\");\n          done();\n        });\n      });\n    });\n  });\n\n  describe(\"when connecting\", () => {\n    let server;\n    let emitter;\n\n    beforeEach(() => {\n      server = new WebSocketServer({ port: 8088 });\n    });\n\n    afterEach(() => {\n      emitter.close();\n      server.close();\n    });\n\n    it(\"sets api_key with username and password\", (done) => {\n      emitter = Events.connect({\n        app: \"myApp\",\n        url: \"ws://localhost:8088/\",\n        username: \"foo\",\n        password: \"bar\",\n      });\n\n      server.once(\"connection\", (conn, req) => {\n        emitter.once(\"open\", () => {\n          const parts = new URL(req.url, \"ws://localhost:8088/\");\n          assert.strictEqual(parts.searchParams.get(\"api_key\"), \"foo:bar\");\n          done();\n        });\n      });\n    });\n\n    it(\"defaults to subscribeAll of true\", (done) => {\n      emitter = Events.connect({\n        app: \"myApp\",\n        url: \"ws://localhost:8088/\",\n        username: \"foo\",\n        password: \"bar\",\n      });\n\n      server.once(\"connection\", (conn, req) => {\n        emitter.once(\"open\", () => {\n          const parts = new URL(req.url, \"ws://localhost:8088/\");\n          assert.strictEqual(parts.searchParams.get(\"subscribeAll\"), \"true\");\n          done();\n        });\n      });\n    });\n\n    it(\"passes along a subscribeAll of false\", (done) => {\n      emitter = Events.connect({\n        app: \"myApp\",\n        url: \"ws://localhost:8088/\",\n        username: \"foo\",\n        password: \"bar\",\n        subscribeAll: false,\n      });\n\n      server.once(\"connection\", (conn, req) => {\n        emitter.once(\"open\", () => {\n          const parts = new URL(req.url, \"ws://localhost:8088/\");\n          assert.strictEqual(parts.searchParams.get(\"subscribeAll\"), \"false\");\n          done();\n        });\n      });\n    });\n  });\n\n  describe(\"when disconnected\", () => {\n    describe(\"and reconnect not explicitly set\", () => {\n      let server;\n      let emitter;\n\n      beforeEach(() => {\n        server = new WebSocketServer({ port: 8088 });\n      });\n\n      afterEach(() => {\n        emitter.close();\n        server.close();\n      });\n\n      it(\"reconnects\", (done) => {\n        emitter = Events.connect({\n          app: \"myApp\",\n          url: \"ws://localhost:8088/\",\n          username: \"foo\",\n          password: \"bar\",\n        });\n\n        // the initial connection...\n        server.once(\"connection\", (conn) => {\n          // the reconnect!\n          server.once(\"connection\", () => {\n            emitter.once(\"reconnected\", () => {\n              done();\n            });\n          });\n\n          emitter.once(\"open\", () => {\n            conn.close();\n          });\n        });\n      });\n    });\n\n    describe(\"and reconnect explicitly set\", () => {\n      let server;\n      let emitter;\n\n      beforeEach(() => {\n        server = new WebSocketServer({ port: 8088 });\n      });\n\n      afterEach(() => {\n        emitter.close();\n        server.close();\n      });\n\n      it(\"reconnects\", (done) => {\n        emitter = Events.connect({\n          app: \"myApp\",\n          url: \"ws://localhost:8088/\",\n          username: \"foo\",\n          password: \"bar\",\n          reconnect: true,\n        });\n\n        // the initial connection...\n        server.once(\"connection\", (conn) => {\n          // the reconnect!\n          server.once(\"connection\", () => {\n            emitter.once(\"reconnected\", () => {\n              done();\n            });\n          });\n\n          emitter.once(\"open\", () => {\n            conn.close();\n          });\n        });\n      });\n    });\n\n    describe(\"and reconnect set to false\", () => {\n      let server;\n      let emitter;\n\n      beforeEach(() => {\n        server = new WebSocketServer({ port: 8088 });\n      });\n\n      afterEach(() => {\n        emitter.close();\n        server.close();\n      });\n\n      it(\"emits 'close' event\", (done) => {\n        emitter = Events.connect({\n          app: \"myApp\",\n          url: \"ws://localhost:8088/\",\n          username: \"foo\",\n          password: \"bar\",\n          reconnect: false,\n        });\n\n        server.once(\"connection\", (conn) => {\n          emitter.once(\"close\", done);\n\n          emitter.once(\"open\", () => {\n            conn.close();\n          });\n        });\n      });\n    });\n  });\n\n  describe(\"when a message is emitted on the socket\", () => {\n    let server;\n    let emitter;\n\n    beforeEach(() => {\n      server = new WebSocketServer({ port: 8088 });\n    });\n\n    afterEach(() => {\n      emitter.close();\n      server.close();\n    });\n\n    it(\"emits a 'message' event\", (done) => {\n      server.once(\"connection\", (conn) => {\n        conn.send(\"hidey ho\");\n      });\n\n      emitter = Events.connect({\n        app: \"myApp\",\n        url: \"ws://localhost:8088/\",\n        username: \"foo\",\n        password: \"bar\",\n      });\n\n      emitter.on(\"message\", (message) => {\n        assert.strictEqual(message, \"hidey ho\");\n        done();\n      });\n    });\n  });\n\n  describe(\"when an error is emitted on the socket\", () => {\n    let server;\n    let emitter;\n\n    afterEach(() => {\n      emitter.close();\n      server.close();\n    });\n\n    it(\"emits an 'error' event\", (done) => {\n      server = new WebSocketServer({\n        port: 8088,\n        verifyClient(info, verify) {\n          verify(false, 666, \"die die die\");\n        },\n      });\n\n      emitter = Events.connect({\n        app: \"myApp\",\n        url: \"ws://localhost:8088/\",\n        username: \"foo\",\n        password: \"bar\",\n        reconnect: false,\n      });\n\n      emitter.on(\"error\", (err) => {\n        assert(err);\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/test/events/index.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 514,
    "kind": "test",
    "name": "describe245",
    "testId": 245,
    "memberof": "test/events/index.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/events/index.spec.js~describe245",
    "access": null,
    "description": "Events connect() returned emitter",
    "lineNumber": 7
  },
  {
    "__docId__": 515,
    "kind": "test",
    "name": "describe246",
    "testId": 246,
    "memberof": "test/events/index.spec.js~describe245",
    "testDepth": 1,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe246",
    "access": null,
    "description": "when passed a single app",
    "lineNumber": 8
  },
  {
    "__docId__": 516,
    "kind": "test",
    "name": "it247",
    "testId": 247,
    "memberof": "test/events/index.spec.js~describe245.describe246",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe246.it247",
    "access": null,
    "description": "subscribes to a single app",
    "lineNumber": 21
  },
  {
    "__docId__": 517,
    "kind": "test",
    "name": "describe248",
    "testId": 248,
    "memberof": "test/events/index.spec.js~describe245",
    "testDepth": 1,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe248",
    "access": null,
    "description": "when passed multiple apps",
    "lineNumber": 39
  },
  {
    "__docId__": 518,
    "kind": "test",
    "name": "it249",
    "testId": 249,
    "memberof": "test/events/index.spec.js~describe245.describe248",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe248.it249",
    "access": null,
    "description": "subscribes to all of the apps",
    "lineNumber": 52
  },
  {
    "__docId__": 519,
    "kind": "test",
    "name": "describe250",
    "testId": 250,
    "memberof": "test/events/index.spec.js~describe245",
    "testDepth": 1,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe250",
    "access": null,
    "description": "when connecting",
    "lineNumber": 70
  },
  {
    "__docId__": 520,
    "kind": "test",
    "name": "it251",
    "testId": 251,
    "memberof": "test/events/index.spec.js~describe245.describe250",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe250.it251",
    "access": null,
    "description": "sets api_key with username and password",
    "lineNumber": 83
  },
  {
    "__docId__": 521,
    "kind": "test",
    "name": "it252",
    "testId": 252,
    "memberof": "test/events/index.spec.js~describe245.describe250",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe250.it252",
    "access": null,
    "description": "defaults to subscribeAll of true",
    "lineNumber": 100
  },
  {
    "__docId__": 522,
    "kind": "test",
    "name": "it253",
    "testId": 253,
    "memberof": "test/events/index.spec.js~describe245.describe250",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe250.it253",
    "access": null,
    "description": "passes along a subscribeAll of false",
    "lineNumber": 117
  },
  {
    "__docId__": 523,
    "kind": "test",
    "name": "describe254",
    "testId": 254,
    "memberof": "test/events/index.spec.js~describe245",
    "testDepth": 1,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe254",
    "access": null,
    "description": "when disconnected",
    "lineNumber": 136
  },
  {
    "__docId__": 524,
    "kind": "test",
    "name": "describe255",
    "testId": 255,
    "memberof": "test/events/index.spec.js~describe245.describe254",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe254.describe255",
    "access": null,
    "description": "and reconnect not explicitly set",
    "lineNumber": 137
  },
  {
    "__docId__": 525,
    "kind": "test",
    "name": "it256",
    "testId": 256,
    "memberof": "test/events/index.spec.js~describe245.describe254.describe255",
    "testDepth": 3,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe254.describe255.it256",
    "access": null,
    "description": "reconnects",
    "lineNumber": 150
  },
  {
    "__docId__": 526,
    "kind": "test",
    "name": "describe257",
    "testId": 257,
    "memberof": "test/events/index.spec.js~describe245.describe254",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe254.describe257",
    "access": null,
    "description": "and reconnect explicitly set",
    "lineNumber": 174
  },
  {
    "__docId__": 527,
    "kind": "test",
    "name": "it258",
    "testId": 258,
    "memberof": "test/events/index.spec.js~describe245.describe254.describe257",
    "testDepth": 3,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe254.describe257.it258",
    "access": null,
    "description": "reconnects",
    "lineNumber": 187
  },
  {
    "__docId__": 528,
    "kind": "test",
    "name": "describe259",
    "testId": 259,
    "memberof": "test/events/index.spec.js~describe245.describe254",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe254.describe259",
    "access": null,
    "description": "and reconnect set to false",
    "lineNumber": 212
  },
  {
    "__docId__": 529,
    "kind": "test",
    "name": "it260",
    "testId": 260,
    "memberof": "test/events/index.spec.js~describe245.describe254.describe259",
    "testDepth": 3,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe254.describe259.it260",
    "access": null,
    "description": "emits 'close' event",
    "lineNumber": 225
  },
  {
    "__docId__": 530,
    "kind": "test",
    "name": "describe261",
    "testId": 261,
    "memberof": "test/events/index.spec.js~describe245",
    "testDepth": 1,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe261",
    "access": null,
    "description": "when a message is emitted on the socket",
    "lineNumber": 245
  },
  {
    "__docId__": 531,
    "kind": "test",
    "name": "it262",
    "testId": 262,
    "memberof": "test/events/index.spec.js~describe245.describe261",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe261.it262",
    "access": null,
    "description": "emits a 'message' event",
    "lineNumber": 258
  },
  {
    "__docId__": 532,
    "kind": "test",
    "name": "describe263",
    "testId": 263,
    "memberof": "test/events/index.spec.js~describe245",
    "testDepth": 1,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe263",
    "access": null,
    "description": "when an error is emitted on the socket",
    "lineNumber": 277
  },
  {
    "__docId__": 533,
    "kind": "test",
    "name": "it264",
    "testId": 264,
    "memberof": "test/events/index.spec.js~describe245.describe263",
    "testDepth": 2,
    "static": true,
    "longname": "test/events/index.spec.js~describe245.describe263.it264",
    "access": null,
    "description": "emits an 'error' event",
    "lineNumber": 286
  },
  {
    "__docId__": 534,
    "kind": "testFile",
    "name": "test/index.spec.js",
    "content": "import awry from \"../src\";\nimport Events from \"../src/events\";\nimport assert from \"assert\";\n\ndescribe(\"awry\", () => {\n  it(\"exposes the Events module\", () => {\n    assert.strictEqual(awry.Events, Events);\n  });\n\n  it(\"exposes an API constructor\", () => {\n    assert.strictEqual(typeof awry.API, \"function\");\n  });\n});\n",
    "static": true,
    "longname": "/Users/cmcelligott/src/awry/test/index.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 535,
    "kind": "test",
    "name": "describe265",
    "testId": 265,
    "memberof": "test/index.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/index.spec.js~describe265",
    "access": null,
    "description": "awry",
    "lineNumber": 5
  },
  {
    "__docId__": 536,
    "kind": "test",
    "name": "it266",
    "testId": 266,
    "memberof": "test/index.spec.js~describe265",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.spec.js~describe265.it266",
    "access": null,
    "description": "exposes the Events module",
    "lineNumber": 6
  },
  {
    "__docId__": 537,
    "kind": "test",
    "name": "it267",
    "testId": 267,
    "memberof": "test/index.spec.js~describe265",
    "testDepth": 1,
    "static": true,
    "longname": "test/index.spec.js~describe265.it267",
    "access": null,
    "description": "exposes an API constructor",
    "lineNumber": 10
  }
]